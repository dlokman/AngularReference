
To run dist build
cd dist/production
npx http-server . // (to serve the production bundle)

cd dist/production/apps/appname
npx http-server . // (to serve the production bundle)

nx dep-graph (draws graph)

Angular generate command:
e.g
ng generate service hero
ng generate component product-details
https://angular.io/cli/generate
​
Search Annually: 'Stack Overflow Developer survey'

Searching for npm packages: https://www.npmjs.com/

Criteria:
Popularity indicates how many times the package has been downloaded. This is a good indicator of packages that others have found to be especially useful, but not foolproof.

Quality includes considerations such as the presence of a readme file, stability, tests, up-to-date dependencies, custom website, and code complexity.

Maintenance ranks packages according to the attention given by developers. Packages that are maintained more frequently are more likely to work well with the current or upcoming versions of npm, for example.

Optimal combines the three other criteria in a meaningful way.

Nx mono repos- From Monorepo Mess to Monorepo Bliss: Avoiding Common Mistakes: 
https://www.infoq.com/presentations/monorepo-mistakes/?utm_term=development&utm_campaign=Nx%20Community%20-%20Newsletter&utm_medium=email&_hsmi=282307446&_hsenc=p2ANqtz-_-IFklOsME0JdQC-AUWpFVbSy2SaO_lzsO6JgB40rKxEql_oiEPIKZAD6R--M_3zXcMxXwwZS2TWYQ5g3TbjrajaEhkQ&utm_content=282307446&utm_source=hs_email

Git branching and merging: https://www.varonis.com/blog/git-branching
Git merge:
https://www.togaware.com/linux/survivor/Git_Merge_Master_into.html
https://phoenixnap.com/kb/git-merge-master-into-branch
https://ruslan.rocks/posts/git-merge-master-into-feature-branch

to merge main branch to feature branch, before creating a PR (to get latest changes from main branch)
$ git checkout main
$ git pull
$ git checkout feature-branch
$ git merge main
$ git push

Before creating a PR, merge main branch to your feature branch to get latest changes
https://www.togaware.com/linux/survivor/Git_Merge_Master_into.html
https://phoenixnap.com/kb/git-merge-master-into-branch
https://ruslan.rocks/posts/git-merge-master-into-feature-branch

Github CodeOwners file
Who will be requested to approve PR by default.
https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners

Vscode:
refresh "main" branch under "remotes" in VS code
switch to "main" branch under "branches" in VS code (git checkout main)
refresh "main" branch under "branches" in VS code
git status (On branch main. Your branch is up to date with 'origin/main'.)

switch to feature-branch (git checkout feature-branch)
git merge main                     (merges main branch to feature-branch)
git push


Command
to merge main branch to feature branch, before creating a PR (to get latest changes from main branch)
git checkout main
git pull

git checkout feature-branch
git merge main
git push


To troubleshoot git:
Ctrl+Shift+P and then type 'set log level' and then select 'debug'.
then execute the git command and see the 'Output window for Git' for commands details

.gitkeep is to enable checking in empty folders

.vscode folder
  extensions.json  (checked in to source control)
  settings.json    (checked in to source control. Workspace settings)

Create Angular 15 project when you have Angular 16 installed globally
npx -p @angular/cli@15.2.0 ng new Angular12App
https://kumargandhi.in/2021/09/29/create-angular-app-in-a-specific-version/#:~:text=First%20lets%20install%20npx%20globally.&text=Now%20we%20execute%20npx%20command,%5Bname%20of%20the%20project%5D.

---------------------------------------FontAwesome in Angular 15-----------------------------------------
https://fontawesome.com/
https://github.com/FortAwesome/angular-fontawesome/blob/HEAD/docs/usage/features.md
https://fontawesome.com/docs/web/use-with/angular
https://www.npmjs.com/package/@fortawesome/angular-fontawesome  (see Compatibility table)

Font Awesome Icons:
https://fontawesome.com/search?o=r&m=free

Font Awesome Angular Features:
https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/features.md

npm install @fortawesome/angular-fontawesome@0.12.0
npm install @fortawesome/fontawesome-svg-core@6.2.0
npm install @fortawesome/free-brands-svg-icons@6.2.0
npm install @fortawesome/free-regular-svg-icons@6.2.0
npm install @fortawesome/free-solid-svg-icons@6.2.0

https://github.com/FortAwesome/angular-fontawesome  (guide how to use it)

Features:
https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage.md
https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/features.md

------------------------------------------------------------------------------------------------------------

C:\Users\dalokman\AppData\Roaming\Code\User\settings.json => User settings. Global settings.

Workspace settings overrides User settings.
https://code.visualstudio.com/docs/getstarted/settings

Reference Commands:
git config --list => to list all git config settings including username and email

npm show default config anf overrides
npm config ls -l

npm config list (tcheck what registry pointing to

cloning using SSH in VsCode Powershell:
git clone git@github.com:reponame

git basic commands:
https://docs.github.com/en/get-started/using-git/about-git

Create a new branch in github:
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository

Create a PR in github:
https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request


parsing sessionstorage sessionItem value. item will be null or an object
https://stackoverflow.com/questions/46915002/argument-of-type-string-null-is-not-assignable-to-parameter-of-type-string
const sessionItemJson = sessionStorage.getItem('sessionItem');
const item = sessionItemJson !== null ? JSON.parse(sessionItemJson) : null;

TODO:
----------------------------------Certifications & Courses complete by Oct 1------------------------------------------
    1) Certified Scrum Developer (Scrum.org Certification) - Done

    2) NGRX (Udemy approved course) - Course from Angular University  - 6.5 hours - Done
       Cognizant Udemy: https://cognizant.udemy.com/course/ngrx-course/learn/lecture/16194654#overview
       Udemy: https://www.udemy.com/course/ngrx-course/

    3) NGRX Documentation (skim)
       Reference (TODOOOO):
          a)     Youtube: I bet you can understand NgRx after watching this video:  - Done
                 Video: https://www.youtube.com/watch?v=kx0VTgTtSBg  (7min out of 20 min) <--- In progress: 34 min of 1hr 29 min
                 Git source: https://github.com/joshuamorony/ngrx-ionic-example/tree/main

             JavaScript Marathon | Beginner to Advanced NgRx with Mike Ryan, Creator of NgRx
                 https://www.youtube.com/watch?v=iWX7qCGVt9U  (1hr 29 min - Creator of NGRX - *****Mike Ryan**** <--- Good Explanation) - Done
                 Github Repo- NGRX Training from co-creator: https://github.com/thisdot/ngrx-training

          b1) Go over online docs: https://ngrx.io  - Done

          b2) Skim over 7 sample NGRX applications.  - Done


          TODO NEXT <-----------------------------------------
          LPL Qs:
             1) What version of AngularJs, Bootstrap etc do they use?
             2) Use Js or Typescript?

          Code: https://github.com/apress/pro-angularjs

        Half Day: AngularJs PDF then Online Docs,  Half Day: Angular Architecture Courses

          AngularJs:
              PDF  (C:\Users\961702\OneDrive - Cognizant\Desktop\TODO\Resources)
              Interview Questions: diff bw $scope and $rootscope. transclusion <=> Same as content projection
              Online Docs:
              Main Site: https://angularjs.org/
                  Docs: https://docs.angularjs.org/guide
              Tutorial: https://docs.angularjs.org/tutorial
                  API: https://docs.angularjs.org/api
                  Error Reference: https://docs.angularjs.org/error
              Sample Project with AngularJs & Typescript
          Angular:
              Angular Architecture Courses
              PDF

          (AngularJs PDf & 2 angular architecture courses (youtube + pluralsight) + See folder hierarchy/setup=> DanWahloin, Shell)

          Check NGRX - ok?: https://www.youtube.com/watch?v=4KtoqTNmEf8
          Angular architecture: https://www.youtube.com/watch?v=BS5G7Pqgqck (24 min)

          Evaluate Quickly- Best Javascript Animation libraries 2023 (search github plus google)

          NGRX (spare time learning on the side to keep in touch):
             NGRX book: https://n-mehlhorn.gumroad.com/l/angular-ngrx-book (mentioned in NGRX Resources)
             Pluralsight course- ***Get credit in Cognizant***: https://www.pluralsight.com/courses/angular-ngrx-getting-started  (mentioned in NGRX Resources)
             Ultimate course- https://ultimatecourses.com/learn/ngrx-store-effects (mentioned in NGRX Resources)
             7 Sample Applications - Go over more detail

          Micro-front end architecture with Angular - High-Level Overview (spare time view)
          https://www.youtube.com/watch?v=NCFQBRh3hZk  (19 min)
          https://www.youtube.com/watch?v=gEv4WSDM2Z4  (21 min)


          Angular Architecture and Best Practices  (5hr 21min) - Search in Cognizant Learn to Register (so can be reflected in Cognizant Learn. Need Pluralsight license. 5 days)
          Pluralsight Course: https://www.pluralsight.com/courses/angular-architecture-best-practices
          Description: https://codewithdan.com/products/angular-architecture
          Github: https://github.com/DanWahlin/angular-architecture


    2) Certified Scrum Developer (Scrum Alliance Hands on Learning Course) - Do next year. Need 1 certification per year
       Sep 11 - 14, 2023- 12pm Central Time  (4 hours each day)

    4) Client Specific - Go over AngularJs PDf Apress (e.g $scope concepts, transclusion angular 1 (same as content projection angular 13)

    5) Evaluate - Best Javascript Animation libraries 2023 (search github plus google)

    6) Misc:  Micro-front end architecture with Angular (check udemy course "e.g. 'micro frontends with Angular')
       https://nx.dev/ (Osmancik, Mehmet). Tool for micro-front end
       *See at end for video/url links*

       Nx official
       https://nxplaybook.com/p/nx-workspaces
       https://nx.dev/getting-started/intro

       High-Level Overview
       https://www.youtube.com/watch?v=NCFQBRh3hZk
       https://www.youtube.com/watch?v=gEv4WSDM2Z4

       https://www.youtube.com/watch?v=cXOkmOy-8dk&t=256s
       https://www.youtube.com/watch?v=dJG9zH30c-o
       https://www.youtube.com/watch?v=e8-hBYw5bx0&t=1s
       https://www.youtube.com/watch?v=ZAO0yXupIIE&t=175s

       https://www.youtube.com/watch?v=ZAO0yXupIIE&t=177s ??

	   Nx sample projects
	   https://github.com/nrwl/ng-module-federation (to speed up the builds of Angular apps)
	   https://github.com/nrwl/nx-examples
	   https://github.com/nrwl/nx-workshop
	   https://github.com/trungk18/angular-spotify
	   https://github.com/nrwl/nx-recipes
	   https://github.com/nrwl/nx-apollo-angular-example

	7) Git course - Misc Learning (Find something in Udemy or Pluralsight to get credit? Compare content quality)
	   https://learn.microsoft.com/en-us/training/paths/intro-to-vc-git/

 Other Options: Skill Demonstration(manager. have to demo), Project Experience(manager)

   ---------------------------------Update Angular Latest Knowledge-------------------------

   https://blog.angular.io/ - Done

   https://www.youtube.com/@Angular/videos   (86 min)
      https://www.youtube.com/watch?v=r5DEBMuStPw  (15 min) How to route in Angular - done (new provideRouter)
      https://www.youtube.com/watch?v=eM3zi_n7lNs  (12 min) Customizing components and directives -skim
      https://www.youtube.com/watch?v=5K10oYJ5Y-E  (12 min) Http in Angular
      https://www.youtube.com/watch?v=kWbk-dOJaNQ  ( 9 min) Forms in Angular
      https://www.youtube.com/watch?v=EEzDLpIbW9w  (11 min) Getting started with Angular Signals
      https://www.youtube.com/watch?v=EIF0g9LDHcQ  (11 min) Rethinking reactivity with Angular Signals
      https://www.youtube.com/watch?v=uqWUv0dpib0  (16 min) What s new in Angular


   Angular Online Doc (skim and check anything new)

   https://angular.io/resources?category=community


   --------------------------------------Standalone Apis- Angular 14 & above TODOOOOOOOOOOOOOO----------------------------
   Standalone Resources (import list long? component dependencies) - ***Standalone Apis - Need Angular 14 Minimum***:
   Standalone Sample Github Project: https://github.com/Ismaestro/angular-example-app
   https://www.danywalls.com/head-start-with-standalone-components-in-angular-15
   https://codelabs.developers.google.com/angular-standalone-components#0
   https://www.thisdot.co/blog/how-to-create-standalone-components-in-angular/
   https://angular.io/guide/standalone-components

   https://primeng.org/installation

   test: ng new --standalone schematics collection

   ----------------------------------Setup Angular 16 Project on Laptop- TODOOOOOOOOOOOOOO------------------------------------------
   1) Google Search - sample Angular 16 project or see official online doc
      new features(standalone pipe, inject())


   ----------------------------------Interview Prep------------------------------------------
   Go Over Resume
   Prepare List of Questions (job description/role etc). See Notepad as an example.

   Previous Cognizant Client Interviews

   Angular Ref: https://angular.io/guide/cheatsheet
   Typescript Ref: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html
   Typescript Ref 2: https://www.typescriptlang.org/docs/handbook/2/classes.html
   Typescript Ref 3: https://www.typescriptlang.org/cheatsheets
   Typescript Utilities: https://www.typescriptlang.org/docs/handbook/utility-types.html

   Git Ref: https://learn.microsoft.com/en-us/azure/devops/repos/git/command-prompt?view=azure-devops
   Angular StyleGuide: https://angular.io/guide/styleguide

   This notepad (scroll bottom for Interview questions as well)

   Google Search: 'Angular Interview Questions', 'Typescript Interview Questions', 'Javascript Interview Questions', 'CSS Interview Questions',

   Skim Angular Book (summaries- resolve, canActivates)
   Open All VsCode Projects


--------------------------------------------Angular folder hierarchy best practice----------------------------------------------------------------

Angular folder hierarchy - best practices

https://angular.io/guide/styleguide#!#04-11
https://medium.com/@shijin_nath/angular-right-file-structure-and-best-practices-that-help-to-scale-2020-52ce8d967df5
https://www.thirdrocktechkno.com/blog/angular-architecture-best-practices/
https://github.com/mathisGarberg/angular-folder-structure/tree/master/src/app/modules


//1) Angular Project based Hierarchy

      src
        app
           core     	     (1. core module. only singleton items i.e. instantiated only once. No dependency on Shared Module)
			  services       (common and specific)
			  guards         //resolve, canActivate, canDeactivate, canLoad
			  app-settings
			  interceptor
			  error-handler (unhandled exceptions)
              core.module.ts
           layout            (centered, custom page layout)
           models
              	classes
                enums
                interfaces
	   	   pages             (2. pages module. All folders under partials in AdvisoryToolsWeb)
                base         (base page component. other pages  can inherit from it to have common functionality)
                page1
				page2
                pages.module.ts   (will import shared module)
           shared                 (3. shared module. shared in feemanagement pages only)
	            components        (put navbar, footer, banner here)
                directives
                pipes
                shared.module.ts (includes devextreme components)
           app-routing.module
           app.module.ts        (will import pages, core and devextreme module)

Pages, Shared and Core Modules are imported in App Module
Shared Module are imported in Pages Module
DevExtreme Module is imported in Shared Module  (common components)

Do not import shared module to core module(minimal. directly import 3rd part dependencies and other required to core.module)


//2) NX Project Based Hierarchy
apps
   angularApp1
      src
        app
           models
              	classes
                enums
                interfaces
		   services          (feemanagement specific services)
		   layout            (centered, custom page layout)
	   	   pages             (2. pages module. All folders under partials in AdvisoryToolsWeb)
                base         (base page component. other pages  can inherit from it to have common functionality)
                page1
				page2
                pages.module.ts   (will import shared module)
           shared                 (3. shared module. shared in feemanagement pages only. Global shared should go to libs\cx-shared))
	            components
                directives
                pipes
                shared.module.ts ((devextreme components are in ao-shared module))
           app-routing.module    (has routing for feemanagement)
           app.module.ts         (will import pages and devextreme module)

   angularApp2

libs
  cx-shared
     src
        lib  (shared among All Angular apps above e.g angularApp1 & angularApp2)
           components  (navbar, footer, banner)
           directives
           pipes
           services
	          common  (rest service, common service, app-settings service)
              guards   //resolve, canActivate, canDeactivate, canLoad
              interceptor
	      	  error-handler (unhandled exceptions)
           cx-shared.module.ts  (Should have all 3rd party DevExtreme controls imported and exported)

Pages Module, CXShared Module are imported in App Module (Try checking if can avoid importing CXShared to App Module)
Shared Module and CXShared Module  are imported in Pages Module
DevExtreme Module is imported in CXSharedModule  (common components)


--------------------------------------------Angular folder hierarchy best practice End---------------------------------------


the enableProdMode() function call has been removed in main.ts.
https://blog.ninja-squad.com/2022/11/16/angular-cli-15.0/

NPM Trends: https://npmtrends.com/@ngrx/store-vs-@ngxs/store

NGRX Vs NGXS (looks like downloads for NGXS is flat for the past year)
https://npmtrends.com/@ngrx/store-vs-@ngxs/store
https://emilyxiong.medium.com/my-developer-experience-with-ngxs-9da7431073f4
https://babafemi-adojutelegan.hashnode.dev/ngrx-vs-ngxs-state-management-angular

PrimeNg previous versions downloads on npm
https://www.npmjs.com/package/primeng?activeTab=versions

PrimeNg 13- Discord - ***Can still use it for free. Just won't get updates/fixes but should be 99% stable***
It is open source, you can use PrimeNG @ 13 but it is no longer in active development. You will not get any further
updates or fixes unless you pay for LTS. Can still use it for free in companies though.


------------------------------------------------------------------------------------------------------------

Angular Signals Ref (Developer Preview Angular 16. Don't need to wait for stable release. Looks like won't have any issue):
Previously could use change detection to accomplish the same purpose via getters
https://www.youtube.com/watch?v=oqYQG7QMdzw
https://www.youtube.com/watch?v=EEzDLpIbW9w
https://www.youtube.com/watch?v=EIF0g9LDHcQ


VS Code Collapse All:
Ctrl + A
Ctrl + K followed by Ctrl + 0 (zero)

Angular Ref: https://angular.io/guide/cheatsheet
Typescript Ref: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html
Git Ref: https://learn.microsoft.com/en-us/azure/devops/repos/git/command-prompt?view=azure-devops
Angular StyleGuide: https://angular.io/guide/styleguide

Intellicode (AI assisted). Vscode extension
https://visualstudio.microsoft.com/services/intellicode/
Star next to dropdown on intellisense while typing

use 'debugger;' to cause breakpoints

Github: Angular Projects Search (e.g. Standalone or Jwt sample angular projects etc):
https://github.com/search?q=angular&type=repositories&p=1

Angular Roadmap: https://angular.io/guide/roadmap#improve-documentation-and-schematics-for-standalone-components

Angular Tools & Resources: https://github.com/PatrickJS/awesome-angular

Sample Apps:
Findall
ConceptCS
BlockRewards
Dan Wahlin Angular Jumpstart (github- latest version)
Official Sample Apps => https://angular.io/guide/example-apps-list

Sample Code:
Apress-Pro Angular Book
Angular.Io Sample Code: https://angular.io/guide/example-apps-list


**********Whats new in Angular 14**********
Standalone Api - enable developers to build applications *without using NgModules* - *Developer preview*

**********Whats new in Angular 15: https://blog.angular.io/angular-v15-is-now-available-df7be7f2f4c8**********
1) Standalone Api (In v14, it was called Standalone Components) -*Stable release*  <----------------
   they now fully work in HttpClient, Angular Elements, router and more
   standalone: true <-- component property
   The standalone APIs allow you to bootstrap an application using a single component

   https://www.telerik.com/blogs/angular-14-introducing-standalone-components
   https://www.infragistics.com/community/blogs/b/infragistics/posts/comprehensive-guide-to-angular-standalone-components

   ***Standalone Apis are Components, Directives and Pipes*** (make Pipes standalone. No need to be in modules. Can be shared)

   Standalone Resources:
   Standalone Github Project: https://github.com/Ismaestro/angular-example-app
   https://www.danywalls.com/head-start-with-standalone-components-in-angular-15
   https://codelabs.developers.google.com/angular-standalone-components#0
   https://www.thisdot.co/blog/how-to-create-standalone-components-in-angular/
   https://angular.io/guide/standalone-components

   Best Practices for Angular Standalone Components: (Make pipes and directives as standalone components)
   https://www.infragistics.com/community/blogs/b/infragistics/posts/comprehensive-guide-to-angular-standalone-components

   Idea behind Standalone component is that its a component that is more or less independent. Declaring itself is self contained.
   references all its own dependencies. Can load it and use it by itself. Other modules don't augment it.
   45 min
   https://dev.to/this-is-learning/the-little-known-story-behind-angular-standalone-components-37jm

2) No more Environment files.  (https://dev.to/this-is-angular/angular-15-what-happened-to-environmentts-koh)
   This was removed from Angular 15 CLI in order to simplify the minimal app created via ng new in the new standalone world.
   https://stackoverflow.com/questions/74685963/angular-cannot-find-environment-file

   We can still add them ourselves and use them. environment.ts by default is production
   https://angular.io/guide/build#configure-environment-specific-defaults

2) New router standalone APIs (You can build a multi-route application using the new router standalone APIs!)
   Another benefit of the provideRouter API is that it s tree-shakable!

3) Directive composition API
    Can add standalone directives to a host element <tr  [pa-attr]=''
    Within pa-attr directive (both selector and input attribute), host element is <tr element. Whichever element is hosting it.
    The directive composition API only works with standalone directives

4) Optimizing Images with the Angular Image Directive:
    NgOptimizedImage
    https://angular.io/guide/image-directive

5) Reduced code canActivate Guards

6) Esbuild- experimental support in v14

7) Deprecations (providedIn: 'root' is preferable. Adds to the root injector)    <--------------
   Deprecated "providedIn: NgModule" and "providedIn: 'any'"
   If you should truly scope providers to a specific NgModule, use NgModule.providers instead


******************************Whats new in Angular 16******************************
https://blog.angular.io/angular-v16-is-here-4d7a28ec680d

1) Developer Preview: *New Reactivity model for Angular* (New Change Detection Model)  https://www.youtube.com/watch?v=Qy-oUc5eB2M<------------
   It s entirely backward compatible and interoperable with the current system

   New signals library (the full signal integration in the framework is *coming later this year*)  <------------
   Developer preview: converting signals to observables and observable to signal
   Next we ll be working on *signal-based components* which have a simplified set of lifecycle hooks, and an alternative, more simple way of declaring inputs and outputs

2) TakeUntilDestroyed Operator (RXJs interop). Use instead of takeUntil to unsubscribe from Observables
   https://indepth.dev/posts/1518/takeuntildestroy-in-angular-v16

3) standalone migration guide

4) Create new projects as standalone from the start! (starting Angular 16) - Developer Preview

5) Esbuild (faster build - 72% improvement) enters - Developer Preview
   In ng serve we re now using Vite for the development server, and esbuild powers both your development and production builds
   Angular CLI relies on Vite exclusively as a development server.

6) Experimental Jest Support (unit testing) - no real browsers are required

7) Autocomplete imports in templates

In v16 we re also enabling support for TypeScript 5.0

8) Required inputs. In v16 now you can mark an input as required  <--------

https://www.youtube.com/watch?v=bkOEMw0oTkY
9) Bind data resolvers, path parameters or query parameters to the corresponding component s inputs  <--------
   have to use provideRouter: https://blog.angular.io/advancements-in-the-angular-router-5d69ec4c032
   Using provideRouter is the  standalone way  (don't have to import and use RouterModule) :
   https://ultimatecourses.com/blog/setup-router-with-angular-standalone-components

10)Angular Security (CSP support for inline-styles)
 nonce attribute: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce
The nonce global attribute is a content attribute defining a cryptographic nonce ("number used once") which can be used by
Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element
<html>
<body>
  <app ngCspNonce="{% nonce %}"></app>
</body>
</html>

11) ngOnDestroy injectable <-----------------

12) Self-closing tags starting v16    <---------------------- concise code
replace
<super-duper-long-component-name [prop]="someVar"></super-duper-long-component-name> with
<super-duper-long-component-name [prop]="someVar"/>



******Advancements in the Angular Router*************
https://blog.angular.io/advancements-in-the-angular-router-5d69ec4c032
You can now use Router without the need for RouterModule (and improved tree shaking for reduced bundle sizes)
"angular 16 sample project"

You can use provideRouter instead of routerModule.ForRoot or routerModule.ForChild

Introduction of functional guards using inject() instead of class based guards

E2E Testing:
NX=> Playwright
https://blog.nrwl.io/introducing-playwright-support-for-nx-d8108ee11d46
https://www.youtube.com/watch?v=k1U3PuBrZFQ

Jest Unit Test Debugging:
https://jestjs.io/docs/troubleshooting

Jest Unit Testing:
https://www.jstwister.com/post/unit-testing-beginners-guide-testing-functions
https://www.jstwister.com/post/unit-testing-beginners-guide-spying-fake-timers
https://www.jstwister.com/post/unit-testing-beginners-guide-mock-http-and-files

https://jestjs.io/docs/api
https://jestjs.io/docs/jest-object
https://jestjs.io/docs/getting-started

npx nx test [--options=xx]
https://nx.dev/nx-api/jest/executors/jest

To exclude a test from being executed, use xit() instead of it()

Unit Testing for router: Using RouterTestingHarness instead of stubs and spies
https://blog.angular.io/write-better-tests-without-router-mocks-stubs-bf5fc95c1c57


Unit Testing
Karma needs a browser. Jest runs unit tests in node and does not need a browser.
"Experimental Support" for Jest in Angular v16 <-----

Karma is now deprecated: https://blog.angular.io/moving-angular-cli-to-jest-and-web-test-runner-ef85ef69ceca
so now adding support for "Web Test Runner"(a browser-based unit test runner)  "in a future Angular release"

Will Migrate off of Karma(browser based test runner) and will integrate Web Test Runner (browser based test runner) with Jasmine <-------------------------

Karma deprecated = Equivalent is Web Test Runner

Unit Test Future Options:
1) Web Test Runner with Jasmine (instead of Karma Test Runner with Jasmine) - available in future Angular release (after v16.1)
2) Jest unit test runner. (No Browser) - (Experimental Support in v16.1)

--------------------------------------------Scrum Certification-----------------------------------------
Scrum Alliance: https://www.scrumalliance.org/courses-events/search?from=2023-08-09&to=2023-09-09&cnty=US&rad=30&tz=my&pg=1
Scrum.Org (Reading Material is good): https://www.scrum.org/assessments/professional-scrum-developer-certification

Knowledge Material:
https://www.scrum.org/resources/suggested-reading-professional-scrum-developer - Done
https://www.scrum.org/resources/scrum-glossary
https://www.scrum.org/scrum-guide-2020
https://www.scrum.org/pathway/software-developer-learning-path
https://www.scrum.org/pathway/scrum-master (skim)

Core Reading:
https://scrumguides.org/scrum-guide.html
https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-US.pdf#zoom=100

Ref:
https://scrumguides.org/index.html
https://www.scrum.org/resources/blog/three-pillars-empiricism-scrum
https://www.scrum.org/resources/empiricism-essential-element-scrum

For example, the team openly and transparently shows the product at the end of each Sprint to the customer in order to gather valuable feedback. If the customer changes the requirements during inspection, the team does not complain but rather adapts by using this as an opportunity to collaborate with the customer to clarify the requirements and test out the new hypothesis.

Scrum works not because it has three roles, five events, and three artifacts but because it adheres to the underlying Agile principles of iterative, value-based incremental delivery by frequently gathering customer feedback and embracing change.
(Inspect & Adapt continuously)

Reasons for adapting Agile for example, faster time to market, increased return on investment through value- based delivery, reduced total cost of ownership through enhanced software quality, and improved customer and employee satisfaction

Why does Scrum work?
Because it adheres to the underlying Agile principles of iterative, value-based incremental delivery by frequently gathering customer feedback and embracing change (Inspect & Adapt continuously)

Reasons for adopting agile:
1) faster time to market** (can be done without following scrum properly)
2) increased return on investment through value-based delivery (assumption is scrum if followed properly)
3) reduced total cost of ownership through enhanced software quality
4) improved customer and employee satisfaction (assumption is scrum if followed properly)

Scrum enhancement
1) Twist: Lead provides solutioning of every task for developer
2) Should not enforce 100% sprint deliverable. Will result in *reduced software quality* since developers will rush to just check-in code. 80% target or above (some spillage should be ok). Below 80% e.g. 60-70% is not good as well. Not too slow or too fast.
3) New value created is shown via demos. Creating *functional enteprise software according to Business specs* should be the main goal.

In the end, scrum is just a process of creating good software. If we don' follow it properly or abuse it then the resulting software is even worse than not following it.

https://en.wikipedia.org/wiki/Agile_software_development

Scrum Abuse History (Word 'commit')
Renamed 'commitment' to 'forecast' in 2011 since it was being abused by the business people or by the developers themselves.
100% commitment to delivery (most controversial updates to the 2011 Scrum Guide)

Commit to Sprint Goal and not commit to Sprint Backlog (https://www.scrum.org/resources/blog/myth-2-sprint-backlog-cant-change-during-sprint). Although the Sprint Goal is fixed during the Sprint, the Sprint Backlog is not

Encourage the Development Team to change, modify and improve the Sprint Backlog during the Sprint. If new work is required, the Development Team adds it to the Sprint Backlog. If work proves to be unnecessary, the Development Team removes it from the Sprint Backlog. It s up to the Development Team to apply these changes and inform the Product Owner *****if this is considered necessary***

Either way, whether the commitment concept is abused by the business people or by the developers themselves, the usual victim is product quality, as Ken Schwaber himself has repeatedly pointed out
https://www.scrum.org/resources/commitment-vs-forecast  <------- show

Development Team can change, modify and improve the Sprint Backlog during the Sprint.

Important Links for Scrum based Developers:
https://www.scrum.org/resources/blog/myth-2-sprint-backlog-cant-change-during-sprint
https://www.scrum.org/resources/commitment-vs-forecast

Sprint Goal examples https://www.scrum.org/resources/blog/scrum-trenches-sprint-goal:

Sprint Goal becomes: "Get Jira tickets 17322, 17323, 171400 and 17888 to done". 'Great, we now have a Sprint Goal. Back to work!'.

-or-

We take a close look at all the Product Backlog Items we selected for the Sprint and we try to squeeze these into a sentence that sums them all up:

"Finish the authorization issues, create a procedure for capturing search queries and make it generic, create a new theme for mobile version".

Other examples of Sprint Goals https://www.scrum.org/resources/blog/six-reasons-why-you-need-pay-more-attention-sprint-goal:
Implement the functionality for user registration.
Launch a partnership program (traders) for acquiring new clients and increasing the company's earnings.

https://www.scrum.org/resources/blog/11-advantages-using-sprint-goal
Get feature X ready for release (hereby the Sprint Goal is delivering a feature)
Check if the architecture enables the desired performance (hereby the Sprint Goal is addressing a risk)
Test if users are willing to register before using the product features (hereby the Sprint Goal is testing an assumption)

If we have a Sprint Backlog, essentially the plan for the Sprint, why do we need a Sprint Goal?

Remember that software development is complex, and we cannot plan perfectly for the unknown.  When we create the Sprint Backlog, there is an expectation that work will emerge during the Sprint.  Scope may need to be re-negotiated.  The Sprint Goal helps provide focus on an objective we want to achieve and allows the flexibility to negotiate the work to achieve that objective.

Scrum Definition of Done:
https://www.scrum.org/resources/blog/why-scrum-requires-completely-done-software-every-sprint
https://www.scrum.org/resources/blog/when-done-too-hard
Coded, Tested, Integrated, Releasable

https://www.scrum.org/resources/definition-done-vs-acceptance-criteria

Sprint Velocity: https://www.scrum.org/resources/blog/why-focus-velocity-inhibits-agility

Sprint Review
https://www.scrum.org/resources/blog/myth-12-sprint-review-demo
Make sure that people understand that the event is about gathering feedback and navigating complexity together, not  selling the product  or  accepting done work ;
Avoid Powerpoint or screenshots as a means to inspect the state of the Increment. Clicking through working software really is the best way to validate assumptions and interpretations of developers, users and other stakeholders;
Invite real users to the Sprint Review. These are the people that (will) actually use the product, and are most capable of determining if the product  works well .

***Sprint Overall Flow***
https://www.scrum.org/resources/blog/typical-sprint-play-play

***Sprint Meetings Durations***
https://www.scrum.org/resources/blog/myth-11-scrum-we-spend-too-much-time-meetings
The prescribed time-boxes are based on a sprint of 1 month. For shorter Sprints, the event is generally shorter. The time-boxes are:

Daily Scrum: 15 minutes;
Sprint Planning: at most 8 hours;
Sprint Review: at most 4 hours;
Sprint Retrospective: at most 3 hours;

Roles in Scrum: https://www.scrum.org/resources/blog/accountabilities-scrum-its-complete-picture-now

When multiple teams work on the same product, they should share the same Product backlog

Product backlog is refined by Scrum Team (not Product Owner). Scrum Teams are self managing and may decide to include
PO or SM or all or some of the Developers. Product backlog refinement is not a mandatory event prescribed by Scrum

True or False: The Product Owner makes sure the team selects enough from the Product Backlog for a Sprint to satisfy the Stakeholders: False

Planning Poker- Task estimation (SP) is not required per Scrum. It comes from XP (Extreme Programming)
It was added by Scrum practioners
https://medium.com/serious-scrum/dont-sweat-the-estimations-bd3ceb145668

https://www.udemy.com/course/scrum-developer-certification-practice-exams/learn/quiz/5311660/result/1038395924#overview
Who ultimately decides the team has enough work for the sprint during sprint planning? (choose the best option)
The Developers
In the 2nd phase through discussion with the Product Owner, the Developers select items from the Product Backlog to include in the current Sprint. The Scrum Team may refine these items during this process, which increases understanding and confidence.


Selecting how much can be completed within a Sprint may be challenging. However, the more the Developers know about their past performance, upcoming capacity, and Definition of Done, the more confident they will be in their Sprint forecasts.

True or False, In Scrum, Team Velocity is a good metric to track the progress of product development.
In Scrum, the real mark of progress is the delivery of a usable product Increment in every Sprint. The Increment is the only measure of progress in Scrum. There is no other metric of progress such as the creation of any interim documents/artifacts, completion of phases, etc. In addition, a Scrum Team may internally use some measures such as Sprint Work Planned vs. Completed (Burn-down), Rate of Completion (Velocity), etc. However, these are only internal metrics used by the team to manage their work. They are not indicators of progress for stakeholders.

Example of Sprint Goal:  https://agilemania.com/sprint-review-vs-sprint-retrospective#:~:text=Sprint%20Review%20focuses%20on%20the,people%2C%20processes%2C%20and%20tools.

  Allow less than 35 years old, non-smoker customer to generate a quote online.

-----------------------------------------------------------------------------------------------------------


Debugging Chrome Dev Tools (https://www.youtube.com/watch?v=3lNkq264nkM)
Break up sources by Authored Vs Deployed trees (4:50 min) - Experimental<-------------

Use 'Add logpoint' to log to console while running the UI

Typed Forms are only for Reactive Forms(not Template Forms): https://www.youtube.com/watch?v=L-odCf4MfJc

Directive Composition api (Adding directives to host property): https://www.youtube.com/watch?v=EJJwyyjsRGs

To inject dependencies, can use inject() at top before constructor- (injecting historically was done via constructor parameters) Angular 14
Can be used to initilize fields (above constructor or even in function?) or in constructor
https://codereacter.medium.com/why-angular-14s-new-inject-function-is-so-amazing-ac281e7148d1
https://www.henriquecustodia.dev/posts/angular-inject-function:-a-new-way-to-work-with-di/
https://www.youtube.com/watch?v=-jRxG84AzCI
https://angular.io/errors/NG0203

@Injectable({providedIn: 'root'})
export class Car {
  radio: Radio|undefined;

  // OK: field initializer
  spareTyre = inject(Tyre);

  constructor() {
    // OK: constructor body
    this.radio = inject(Radio);
  }
}


Can setup breakpoints in html <button (click)="submit()"></button>

Angular New Image directive: https://www.youtube.com/watch?v=uE4GM3sKsgk
lazyload non images default. eagelry load images that you mark with priority


*************************************************************************

RXJS Pipe Operator:
https://indepth.dev/posts/1037/reading-the-rxjs-6-sources-map-and-pipe

Update   (Same output, same concept (composing operators), different syntax)

of(1,2,3).map(x => x + 1).filter(x => x > 2);  TO

of(1,2,3).pipe(
  map(x => x + 1),
  filter(x => x > 2)
);

if user type is not known and if getting a typescript compile error
user.someProp
then use
user['someProp'] if anyone complains of 'any'

Javascript
convert object to string: JSON.stringify(object)
convert string to object  JSON.parse(string);

The dependencies are essential to running the application.
The devDependencies are only necessary to develop the application.

Vscode Extensions: OpenApi Swagger Editor

Node doc: version compatibility

Vscode keyboard shortcuts: https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf

Angular Content Projection: https://angular.io/guide/content-projection
Sample Example

screen reader - chrome extension - web accessibility - 508 compliant



View Bitbucket PR from VsCode (Atlassian):
https://support.atlassian.com/bitbucket-cloud/docs/bitbucket-pull-requests-in-vs-code/#View-and-modify-a-Bitbucket-pull-request-from-VS-Code

Git Branching and Merging: A Step-By-Step Guide
https://www.varonis.com/blog/git-branching

Swagger Editor (to view yaml files for api schema):
https://editor.swagger.io/

Jest:
https://jestjs.io/

JWT token:
https://jwt.io/

Js Playground:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
https://playcode.io/1537908

Bitbucket: Bitbucket is a Git-based source code repository hosting service
Used to store codebase and create PRs.

Bamboo: Bamboo is a continuous integration and deployment tool
Analyzed Bamboo logs to resolve build errors

Branching Strategies:
https://www.bmc.com/blogs/devops-branching-strategies/
https://learn.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops

angular best practices:
https://massivepixel.io/blog/angular-best-practices/

angular change detection:
https://mokkapps.de/blog/the-last-guide-for-angular-change-detection-you-will-ever-need/



npm install rimraf --global (to install globally)
npm install rimraf --glob  (to install globally)
rimraf ./node_modules or  rimraf node_modules (delete node_modules)

npm install rimraf@3.0.1

npm install   `--force` Vs `--legacy-peer-deps`
https://stackoverflow.com/questions/66020820/npm-when-to-use-force-and-legacy-peer-deps
https://www.copycat.dev/blog/yarn-vs-npm/#:~:text=the%20same%20purpose.-,Yarn%20vs%20npm%20Comparison%20of%20Performance,for%20updates%2C%20and%20resolving%20dependencies.

npm install  --legacy-peer-deps`
https://www.linkedin.com/pulse/npm-install-legacy-peer-deps-vs-force-shaharyar-saleem#:~:text=2%EF%B8%8F%E2%83%A3%20npm%20install%20%2D%2Dforce%3A&text=It%20instructs%20npm%20to%20forcefully,checks%20and%20forcibly%20install%20packages.


Dependencies vs peerDependencies
Dependencies: Libraries or modules that an NPM module needs in order to work in production. (Example: I recently built a pie chart mocking library that uses Chance.js to calculate random numbers within a specified range; Chance is therefore a dependency of my module.)

peerDependencies: A peer dependency is a specific version or set of versions of a third-party software library that a module is designed to work with. They're similar in concept to the relationship between a browser extension and a browser. (Example: react-redux has two quite logical peerDependencies: react and redux.)

The --legacy-peer-deps flag was introduced with v7 as a way to bypass peerDependency auto-installation; it tells NPM to ignore peer deps and proceed with the installation anyway. This is how things used to be with NPM v4 thru v6.

peerDependencies: Dependendies of 3rd party software
--legacy-peer-deps: tell it to ignore peer Dependendies (don't install if conflict?computer may have latest verision)
--force: install peer dependency even if it conflicts

new versions of npm => install the peer dependencies by default

check local angular version in a project when no global angular is installed:
2 ways
1) node_modules/.bin/ng --version
2)
add a line to scripts in package.json
"scripts": {
   "test33": "ng --version"   --> ng here will use local angular version

To inform node version that is compatible with the project. Update package.json and include an engines
section e.g.:

"engines": {
    "node": ">=20.7.0",
    "npm": ">=10.1.0"
  },


Angula Unit Testing
karma.conf.cli.js - line 115
browsers: ['Chrome'],

package.json
"test": "ng test",

Ctrl K + Ctrl S -> To view all shortcuts
Ctrl K + Ctrl 0 -> Collapse all
Ctrl K + Ctrl J -> Expand All

508/accessibility
-Accessible via tabs
-Visually impaired - aria-label
tabindex="0" [attr.aria-label]="Test label"

error: node api crashed (kill node and restart)
tasklist (list all processes)
netstat -aon | findstr 8080  (find out who is using port 8080 where we are running Node Api)
taskkill /F /PID 30080   (kill that process)

netstat -aon | findstr 8000

git status
git merge develop (merge develop branch to existing selected branch)

VsCode shortcuts: https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf

Unit Testing Misc:
Simon Test or Angular Extension Pack

Decrypt JWT Token
https://jwt.io/

Collapse/Expand-> Bootstrap
Tooltip-> Bootstrap

Media Queries - CSS - Responsive

508 compliance. web accessibility
------------------------------------------------------------------

***Default Mobile***

//Medium Devices (Tablets, 768px and up). Sm for Bootstrap 3.3.
@media (min-width: 768px) {
   .classa{}
}

@media (min-width: 820px) {
    .classa{}
}

@media (min-width: 912px) {
   .classa{}
}
//Large Devices (Desktops, 992px and up). Md for Bootstrap 3.3.
@media (min-width: 992px) {
   .classa{}
}

//X-Large Devices (Large Desktops, 1200px and up). Lg for Bootstrap 3.3.
@media (min-width: 1200px) {
   .classa{}

-----------------------------------------------------------------------------
html details tag - collapse/expand text
https://www.w3schools.com/tags/tag_details.asp

<div title="Hello {{ponyName}}">
is equivalent to
<div [title]="'Hello ' + ponyName">

css selectors
selector: 'element'      selects      <element ...>
selector: '[attribute]'  selects e.g  <div element ...>
selector: '.class1'       selects e.g  <div class="class1">

https://fortawesome.com/ same folks as font-awesome

https://angular.io/guide/cheatsheet
@ViewChild(myPredicate) myChildComponent;     --> Cannot use @ViewChild inside directives? correct?
@ViewChildren(myPredicate) myChildComponents; --> Cannot use @ViewChild inside directives?

But can use it to query both components and directives from within a component

Component extends Directive
https://angular.io/guide/cheatsheet

Angular Cheatsheet:
Typescript Cheatsheet:

Smarty Address Apis
https://www.smarty.com/products/apis/us-street-api
https://smarty.com/products/apis/us-autocomplete-pro-api

The ComponentFixture is a test harness for interacting with the created component and its corresponding element (html element).

fixture.detectChanges runs change detection. tells angular to perform data binding.

UI libraries- updated Jan 2023
MD Bootstrap: https://mdbootstrap.com/docs/angular/
Ng Zorro: https://ng.ant.design/components/overview/en
Nebular : https://akveo.github.io/nebular/docs/components/components-overview
Ng Bootstrap: https://ng-bootstrap.github.io/#/components/accordion/examples
Ngx Bootstrap: https://valor-software.com/ngx-bootstrap/old/7.1.2/#/modals

check for array length:
if (someVar && someVar.length > 0) {
Vs
if (filteredMemberUIDs?.length)


https://play.planningpoker.com/play/game

Font Awesome    (Done)
Angular Material (Done)
Jquery          (Done)
Boostrap        (Used bootstrap.bundle.min which includes Popper.js for tooltips)
Ng bootstrap    (Done)
Lodash          (Done)
PrimeNG         (Done)
PrimeIcons      (Done)
PrimeFlex   (layout css) (Done)
Moment          (Done)
toastr          (Done)
Eslint          (Done)

Compare 2 arrays or 2 objects to see if they are equal. Deep comparison
1) Lodash faster, Sort Order doesn't matter. More Thorough solution
Lodash - Issue if remove all elements to [] and then re-add- it doesn't equal
 https://lodash.com/docs/#isEqual (_.isEqual(value, other))

2) JSON.stringify. sort order matters.But less performant. issue null or undefined.
https://www.samanthaming.com/tidbits/33-how-to-compare-2-objects/

const k1 = { fruit: '??' };
const k2 = { fruit: '??' };

// Using JavaScript
JSON.stringify(k1) === JSON.stringify(k2); // true

// Using Lodash
_.isEqual(k1, k2); // true


*******HOST Property of Component************
@Component({
  moduleId: module.id,
  selector: 'some-cmp',
  templateUrl:  '../../xxx.html',
  host: { class: 'classB' },   --> will add class to some-cmp element
  providers: [OneClickNowService]
})
class SomeComponent
 constructor(private _elementRef: ElementRef)

 ngOnInit()
 this._elementRef.nativeElement.classList.remove('classB'); remove classB in code

<some-cmp class="classB">
</some-cmp>

*******HOST End************

Get npm cache location:
npm config get cache

npm i -g rimraf  => to install rimraf to delete node_modules

delete package-lock.json
cls
rimraf node_modules  (delete node_modules)
npm cache clean --force
npm cache verify
npm install

git clone repoUrl
git branch  (list local branches)
git checkout -b feature/branchname  (create and checkout feature branch)
git branch  (list local branches)
git pull origin feature/branchname  (get all code from repo)
git status



to merge
make sure you are on feature branch via git status
switch to develop and get latest
switch back to  feature branch
git merge develop (merges develop to your feature branch)


Writing Browser Specific CSS. below example
if bowser supports property: '-moz-appearance' with value 'none' then apply the class. Only firefox currently supports that property and value
@supports (-moz-appearance: none) {
   .class { }
}


Resolving Merge conflicts in VSCode:
https://www.varonis.com/blog/git-branching
https://www.youtube.com/watch?v=HosPml1qkrg

how to disable http request caching using nan interceptor
https://betterprogramming.pub/how-to-prevent-http-request-caching-with-angular-httpclient-e82abf8b157d

Multi Repos (Seperate UI & API Repos) preferable for CI/CD. Each one can have its own CI/CD triggered by check-in - PRs. E2E testing collaborate. E2E test on Staging (duplicate of Prod).. Dev>QA>UAT>Staging>Prod
https://www.kaaiot.com/blog/using-devops

if same team works on both UI & Api, can keep together. Jordan has seen both ways.

Angular 15 removed following files. not because not needed but to simplify it for new developers starting out on Angular.
As testing or environment files are needed, they can be added later. also in the future you can use schematics to add
environment files: https://levelup.gitconnected.com/angular-15-new-must-know-features-ae392a2baf2d

Eslint disable next line rule

// eslint-disable-next-line rule-name
// eslint-disable-next-line no-console
https://eslint.org/docs/latest/rules/no-console

error: eslint angular cannot read file tsconfig.json

update .eslintrc as below

     "parserOptions": {
        "project": [
          "**/tsconfig.json"
        ],

Web Workers: To run heavy duty logic in a different thread than the main thread to improve performance
https://blog.bitsrc.io/10-tricks-to-optimize-your-angular-app-44208f616bf0

Jest:
1) https://jestjs.io/docs/mock-functions
2) https://jestjs.io/docs/mock-function-api
3) https://jestjs.io/docs/expect
4) https://jestjs.io/docs/using-matchers
5) https://jestjs.io/docs/asynchronous

Use this to trigger file renames for GIT in VSCode
git mv MedProfileSearchCmp.scss medProfileSearchCmp.scss <----
https://git-scm.com/docs/git-mv
https://koukia.ca/rename-or-move-files-in-git-e7259bf5a0b7


Group By, GroupBy - Transform -Sample - Typescript

https://playcode.io/rxjs
{
  "dependencies": {
    "rxjs": "8.0.0-alpha.3",
    "lodash": "^4.17.21"
  }
}


Response Schema
{

  tasksfill: [
    {

    }
  ]
}

Member 1, Task: TaskA
Member 2, Task: TaskB
Member 1, Task: TaskC

Transform To

order {

  members: [
      member data
      Tasks: []
  ]

}

Member 1
   Task: TaskA
   Task: TaskC
Member 2
   Task: TaskB


      let members = [];
      const map = new Map();
      for (const x of data.tasksfill) {
        if (!map.has(x.id)) {
          map.set(x.id, true); // set unique value of member to the map
          members.push({
            patientInfo: x.patientInfo,

            Task: data.tasksfill.reduce((res, ops) => {
              if (ops.id === x.id) {
                res.push(ops.dispensedProduct);
              }
              return res;
            }, [])
          });
        }
      }

data.members = members
console.log(data);

Window scroll to an element:
const div = $('#Div');
const offset = div.offset();
this.window.scrollTo(null, offset.top - 170);
offset.top, offset.left

Scrum: https://scrumguides.org/scrum-guide.html#purpose-of-the-scrum-guide

Unit Testing Services

karma.conf.cli.js - line 115
browsers: ['Chrome'],

package.json
"test": "ng test",

Unit Testing Page Route parameters
https://stackoverflow.com/questions/55514167/error-as-cannot-read-property-subscribe-for-activated-route-in-angular-7-whi
https://stackblitz.com/edit/stackoverflow-q-55514167?file=app%2Fchild.component.spec.ts

If angular file has jqeury then for unit testing in karma config include jquery and bootstrap if needed
(test with bootstrap 3.3.6). This loads jquery and bootstrap in the browser for unit testing.

link: http://karma-runner.github.io/6.4/config/files.html

    files: [
      { pattern: 'node_modules/jquery/dist/jquery.js', watched: false },
      { pattern: 'node_modules/bootstrap3/dist/js/bootstrap.min.js', watched: false }
    ]

Jasmine expect functions
https://www.npmjs.com/package/jasmine-expect

spyon
https://jestjs.io/docs/jest-object

    it('Test function', fakeAsync(() => {
      spyOn(someSvc, 'someFunction')
        .and.returnValue(
	  Promise.resolve(response as IHttpResponse)
          //Promise.reject({ status: 400 }) OR
        );

      xxx.suite.comp.ngOnInit();
      tick(3000);
      xxx.suite.fixture.detectChanges();
      expect(xxx).toEqual([]);
    }));

How to change a spy/ How to update a spy
https://jasmine.github.io/tutorials/spying_on_properties


https://angular.io/guide/testing-services
https://angular.io/api/core/testing/fakeAsync
https://danielk.tech/home/angular-how-to-test-asynchronous-code
https://jasmine.github.io/api/3.6/Spy.html#withArgs
https://medium.com/dailyjs/unit-testing-async-calls-and-promises-with-jasmine-a20a5d7f051e
    //console.info('test');

Transform data when using Promises in http Angular
https://www.syncfusion.com/blogs/post/angular-promises-versus-observables.aspx
https://vitalflux.com/angular-http-promise-code-example-get-api/
https://v2.angular.io/docs/ts/latest/tutorial/toh-pt6.html
https://hassantariqblog.wordpress.com/2016/12/03/angular2-http-post-with-complex-object-using-promises-in-angular-2-application/
https://www.concretepage.com/angular-2/angular-2-http-get-example

Service returning a promise
    spyOn(TestHelper.SomeService, 'getXXX')
      .withArgs('BB').and
      .returnValue(
        Promise.resolve(SomeObject)
      );

     TestHelper.SomeService.getXXX('BB').then(
       (result: any) => {
        expect(result.length).toBe(5);
      });


https://angular.io/guide/roadmap

508 - Accessibility

tabIndex="0"
[attr.aria-label]="This is a sample Description"

if user uses keyboard to tab through the page and when the control with someClass has focus as a result-> then apply this styling
.someClass:focus-visible {
        border: 0.1429rem solid var(--color-link);
        border-radius: 0.5714rem;
}


Checklist:
https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes (List of Aria- attributes)
https://www.w3.org/WAI/ARIA/apg/patterns/ (Buttons, Checkboxes etc)
https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex (tabindex)
https://www.section508.gov/content/guide-accessible-web-design-development/
https://www.w3.org/WAI/test-evaluate/preliminary/


Video:
https://www.youtube.com/watch?v=cOmehxAU_4s  <-- good


Starter (attributes to use in html)
tabindex="0"
tabindex="-1" (if it shouldn't be tabbed. Can give focus programmatically
[attr.aria-label]="content.xxx"  (description)
alt attribute for images
should work for spanish

Mastering Typescript Book: https://www.google.com/books/edition/Mastering_TypeScript/O2wrEAAAQBAJ?hl=en&gbpv=1&pg=PA2&printsec=frontcover

DanWahlin Angular14 Jumpstart:
https://github.com/DanWahlin/Angular-JumpStart

Stackblitz- Interviews
Js playground: https://playcode.io/javascript/
Ts playground: https://playcode.io/typescript/

For Filter and SortBy for collections use Lodash....

source code: Pro angular. https://github.com/Apress/pro-angular-5ed
source code: Typescript. https://github.com/Apress/essential-typescript-4
source code: Mastering Typescript: https://github.com/PacktPublishing/Mastering-TypeScript-Fourth-Edition

ES2020 New Features:
https://www.freecodecamp.org/news/javascript-new-features-es2020/
https://egghead.io/courses/es6-and-beyond-javascript-tips-and-tricks-from-es2015-to-es2020-46108d07
Nullish Coalesce ??, Big Int
ES2019
ES2017 async await

<select class="form-control" [value]="productsPerPage"
(change)="changePageSize($any($event).target.value)">

valid json values:

https://www.w3schools.com/js/js_json_datatypes.asp
In JSON, values must be one of the following data types:
a string
a number
an object (JSON object)
an array
a boolean
null


RXJs subscribe's updated method and deprecations:
https://rxjs.dev/deprecations/subscribe-arguments

import { of } from 'rxjs';

// recommended
of([1,2,3]).subscribe((v) => console.info(v));
// also recommended
of([1,2,3]).subscribe({
    next: (v) => console.log(v),
    error: (e) => console.error(e),
    complete: () => console.info('complete')
})

RXJS: https://www.learnrxjs.io/learn-rxjs/operators/combination/forkjoin

Typings: https://github.com/DefinitelyTyped/DefinitelyTyped
@types/xxx

npm install bootstrap@3.3.5
npm install jquery@3.3.31

npm install lowdb@1.0.0
npm install --save-dev @types/lowdb

types installed
npm install --save-dev @types/jquery
npm install --save @types/toastr

--save Vs --save-dev (see above)
--save: saves it to the dependency attribute
--save-dev: saves it to the devDependencies attribute

https://dev.to/jha/save-and-save-dev-why-you-should-know-the-difference-j7p#:~:text=What%20does%20%2D%2Dsave%20and,in%20the%20dev%2Ddependency%20object.


To add an entry to the "dependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> [--save-prod]

To add an entry to the "devDependencies" attribute of a package.json file, on the command line, run the following command:
npm install <package-name> --save-dev

Difference between npm (has to install npm packages) and npx (can execute npm packages without installing them)
https://www.codingninjas.com/codestudio/library/difference-between-npm-and-npx#:~:text=Difference%20between%20NPM%20vs%20NPX,-NPM&text=NPM%20is%20a%20package%20manager,packages%20directly%2C%20without%20installing%20them.

Json Database: https://github.com/typicode/lowdb   pg 30
JSON.stringify(someObject)

To check types used by compiler, enable declarations in tsconfig pg 157 typescript

https://alligator.io/angular/component-communication/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_324
https://codeburst.io/angular-interview-question-what-are-ng-container-ng-content-and-ng-template-9fafbbc255d5

Experience in .NET Core
Experience in containerization - Docker

@app.route("/testModelApi")
def hello():
    return "Hello, This is a test - Model Api"


Vs code open folder: C:\Users\Danial.Lokman\source\cs-repo\ConceptSelection_UI\src>

To stop angular from reloading a website on code change
ng serve --port 3000 --open --live-reload false

--live-reload=false

can update Angular to 7.9?
major.minor:  minor versions are backwards compatible. major versions are not

eg
https://blog.codeship.com/best-practices-when-versioning-a-release/
------------------------------------------------------------------------

Browser Reference Links:

PRimeNg Forum
PrimeNg Source code - P-Table examples: https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table
PrimeNg Source code - P-Table Core source: https://github.com/primefaces/primeng/blob/master/src/app/components/table/table.ts
PrimeNg Source code - P-Table CSS : https://github.com/primefaces/primeng/blob/master/src/app/components/grid/grid.css
PrimeNg Github : https://github.com/primefaces/primeng/issues?q=rowsPerPageOptions+sort%3Acomments-desc



git clone--correct- vsts

C:\Users\Danial.Lokman\source> git clone https://sede-pt-digt.visualstudio.com/Concept%20Selection%20with%20Machine%20Learning/_git/Concept%20Selection%20with%20Machine%20Learning cs-repo

create cs-repo folder under C:\Users\Danial.Lokman\source>
put contents of vsts repository-repo (Concept%20Selection%20with%20Machine%20Learning) into cs-repo folder via above command

Chrome run while disbaling API CORS error. Right click Chrome> Properties
"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-web-security --user-data-dir="C:\Apps\Test"

***ToDO- Spare Time***

SportsStore- authMiddleware.js  (json web token)
https://github.com/auth0/node-jsonwebtoken
-----------------------------------------------------


----->Check both Package.Json as well as Angular.Json<-----

Font Awesome    (Done)
Angular Material (Done)
Jquery          (Done)
Boostrap        (Used bootstrap.bundle.min which includes Popper.js for tooltips)
Ng bootstrap    (Done)
Lodash          (Done)
PrimeNG         (Done)
PrimeIcons      (Done)
PrimeFlex   (layout css) (Done)
Moment          (Done)
toastr          (Done)
Eslint          (Done)


Wait---Install if need a dummy Api---
DevDependencies  (test if can run)
(if need to run it by itself-SportsStore)
"json-server": "^0.17.0",
"jsonwebtoken": "^8.5.1",

---Copy Base Folder and then Add. Keep Base Folder seperate to start a new Angular 14 project---

Web3 Js
Main Js
Styles Css

-----------------------------------------------------

Angular Testing: https://angular.io/api/core/testing

Syntax Reference:

<div *ngFor="let product of products">
 {{product.name}}
</div>

UI component Libraries


Angular cache clean: https://angular.io/cli/cache
ng cache clean


tsconfig Ref: https://www.typescriptlang.org/tsconfig
javascript playground: https://www.programiz.com/javascript/online-compiler/?ref=cbe05472


installing jquery, popper & bootstrap: https://angular.io/guide/using-libraries


*****************SAMPLE DEMOS: https://angular.io/guide/example-apps-list************

Angular File structure: https://angular.io/guide/file-structure
Angular Style Guide: https://angular.io/guide/styleguide

Frequently Used Modules: https://angular.io/guide/frequent-ngmodules
BrowserModule imports CommonModule, which contributes many common directives such as ngIf and ngFor.
Singleton services: https://angular.io/guide/singleton-services
Defining providers in the Angular module means that all dependencies for a token within the
application will be resolved using the same object. PG 534

Angular Error Reference: https://angular.io/errors/NG0100
Angular CheatSheet: https://angular.io/guide/cheatsheet

Adding typings files: https://angular.io/guide/typescript-configuration


Using google Roboto font:
https://fonts.google.com

<link href="https://fonts.googleapis.com/css?family=Noto+Sans|Noto+Serif|Roboto:300,400,700&display=swap"
rel="stylesheet">

https://fonts.google.com/?query=roboto&selection.family=Roboto

self signed cert for iis - https://aboutssl.org/how-to-create-a-self-signed-certificate-in-iis/

primeng 7.0 releases: https://www.primefaces.org/primeng-7-0-0-released/

ng serve --port 3000 --open

angular cli- dev, qa, prod:
https://theinfogrid.com/tech/developers/angular/environment-variables-angular/

Build configuration in angular.json or project.json
Full Article: https://angular.io/guide/workspace-config
Assets configuration: https://angular.io/guide/workspace-config#assets-configuration

******Ref: Build and Serve Configuration in angular.json: https://www.youtube.com/watch?v=D97Qhk8n-lU***********************

ng serve --port 3000 --open --live-reload false(for localhost)
ng serve --port 3000 --open
ng build --configuration=dev (for dev server)
ng build --configuration=uat
ng build --configuration=production

ng build --configuration stage  (no equal?)
ng build  (default will use production build)

ng build --base-href /BlockRewards-NG/

ng serve --configuration=dev   (can also use -c) - ng serve builds and serves. Ref: Build and Serve Configuration in angular.json: https://www.youtube.com/watch?v=D97Qhk8n-lU
ng serve --configuration=uat



Integrate Windows Authentication in Angular & Webapi
https://www.c-sharpcorner.com/article/enable-windows-authentication-in-web-api-and-angular-app/

CTRL + B -> toggles explorer window

Javascript- Browser Memory monitoring:
window.performance.memory
limit 2GB per Tab

view users who accessed iis website via iis logs. Ran Logparser 2.2
C:\Program Files (x86)\Log Parser 2.2>logparser "SELECT DISTINCT cs-username FROM C:\Users\danial.lokman\Desktop\Current-Focus\TODO\IIS-Logs\u_ex*.log WHERE cs-username <> NULL" -o:datagrid
https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/
https://www.youtube.com/watch?v=0sCrBol6ArQ
Traffic by user: logparser "Select Top 200 cs-username AS User, Count(*) AS Hits FROM C:\Users\danial.lokman\Desktop\Current-Focus\TODO\IIS-Logs\u_ex*.log GROUP BY cs-username ORDER BY Hits Desc" -o:datagrid

RouteGuards:
https://itnext.io/handle-restricted-routes-in-angular-with-route-guards-95c93be9d05e


Replay Subject
		let c = new ReplaySubject(2);

		c.subscribe({next: (v) => { console.log(v) }});

		c.next("subscriber a: 1");
		c.next("subscriber a: 2");
		c.next("subscriber a: 3");

		c.subscribe({next: (v) => { console.log(v) }});

		c.next("subscriber b: 1`");
		c.next("subscriber b: 2");

Result:

subscriber a: 1
subscriber a: 2
subscriber a: 3
subscriber a: 2
subscriber a: 3
subscriber b: 1`
subscriber b: 1`
subscriber b: 2
subscriber b: 2


----Running UI-on-Local-Computer-----------


Angular 14 Changes:
-TsLint to EsLint
- Option Strict for Tsconfig ON by default. Cannot assign null or undefined values to variables if the type hasn't been decalred
to accept null or defined.
-Stand alone components (don't need to be ngmodule)

check if property does not exist: if (product.category != undefined) {


class Product {
	name: string
	category?: string    => type is string | undefined. Cannot assign null. Strict on.
}

class Product {
	name: string
	category?: string | null   => type is string | null | undefined
}

to get valid data from API via json. undefined is not a valid json value, whereas null is

class Product {
	name: string
	category: string | null
}

typeof(param) == "number")    -> to check type
if (x instanceof y) {         -> to check if object has been derived from a class

undefined: variables have been defined but not assigned a value
null: assigned to variables to indicate 'no value' or absense of value

Each TypeScript or JavaScript file that you add to a project is treated as a module.

To use Schematics API, use ng add and not npm install pg 221. like adding bootstrap requires npm install plus adding css manually. Schematics api automates the process.

convert traditional function to arrow function
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
// Traditional Function
function bob(a) {
  return a + 100;
}

// Arrow Function
const bob2 = (a) => a + 100;


Object.assign  (shallow copy- not deep copy): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
merges source properties to target
copies all enumerable own properties from one or more source objects to a target object.
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

Eg usecase. if we wanna update the same object.


What are the various kinds of directives?

There are mainly three kinds of directives,
Components   These are directives with a template.
Structural directives   These directives change the DOM layout by adding and removing DOM elements.
Attribute directives   These directives change the appearance or behavior of an element, component, or another directive

Change detection gets triggered if one of the following events occurs:
1) any browser event (click, keyup, etc.)
2) setInterval() and setTimeout()
3) HTTP requests via XMLHttpRequest


My advice is to use linting sparingly

The angular.json command defines default build modes for commands, and the default
configuration uses development mode for the ng serve command and production mode for the ng build
command. You

<div [class]="getClasses(2)">
<div [class]="p-2 bg-info">

*ngIf - won't even render on DOM
Vs
hide on DOM
hidden= true Or display:none   [hidden]="true"  [style.display]="'none'"

adding trackBy:getKey for *ngFor to improve performance
instead of destroying html elements and recreating. it will only process the changes

ng-container does not render html element. can use in *ngFor or *nfIf

One-way data bindings must be idempotent, meaning that they can be evaluated repeatedly without
changing the state of the application- pg 297

DOM events Reference: https://developer.mozilla.org/en-US/docs/Web/Events

Data flow
  --->
() = ""   event binding
  <---
[]=""     property binding

[()] both ways

The [(ngModel)] directive is used to simplify two-way bindings so that you don t have to apply both an event and
a property binding to the same element.

structural directives: which are used to change the structure/layout of the HTML document   *ngIf, *ngFor
attribute directives: that change the appearance or behavior of a single element e.g. [class] [style.display]

left || right   (left is used if left value evaluates to "true" else right is used)       <--- dont use
left ?? right   (left is used if left value is not null or not undefined else right is used)  <--- use!!
??  is called Nullish coalescing operator

falsy values/false values- pg 67
   The false (boolean) value
   The 0 (number) value
   The empty string ("")
   null
   undefined
   NaN (a special number value)

page 352 (Pro Angular)

https://angular.io/guide/lifecycle-hooks

Components AND Directives Lifecycle Hooks
ngOnChanges()  (first call)
ngOnInit()     (input properties are now set. Can use them now. Initialize component/directive)
ngOnChanges()  (whenever input properties change)
ngDoCheck()    Detect and act upon changes that Angular can't or won't detect on its own. This method is called when Angular runs its change detection process so that directives have an opportunity to update any state that isn t directly associated with an input property.
ngOnDestroy()  Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.

Components lifecycle hook
ngAfterViewInit()     --> This method is called after Angular initializes the component's views and child views. The results of the view queries are set before this method is invoked.
ngAfterContentInit()  --> This method is called after Angular projects external content into the component's view. Called once after the first ngDoCheck().

Directives lifecycle hook
ngAfterViewInit()     --> This method is called after Angular initializes the view that contains the directive.
ngAfterContentInit()  --> This method is called after Angular projects external content into the view that a directive is in.


[misc]
ngAfterContentChecked()
ngAfterViewChecked() - This method is called after the component s view has been checked as part of the change detection process.

template
<div>-- child view begins --</div>

   <my-child-view></my-child-view>

<div>-- child view ends --</div>`

export class AfterViewComponent implements  AfterViewChecked

 @ViewChild(ChildViewComponent) viewChild: ChildViewComponent;

ngAfterViewInit() {
    // viewChild is set after the view has been initialized

  this.logIt('AfterViewInit');

  this.doSomething();
  }


angular bug on model change for input type number

Template Literals  `You've earned ${region} ${amount}!`
Multiline strings using backtick

There are two different types of target: a directive or a property binding.

***Built-in  Directive Binding***
ngClass, ngStyle, ngIf, ngFor, ngSwitch, ngTemplateOutlet

If the binding target doesn t correspond to a directive, then Angular checks to see whether the target can
be used to create a property binding


***Property Binding***

[property] - Standard Property Binding
	     <input  [value]=""   (value) is a standard property of html input tag


[attr.name] - attribute binding (on host element e.g. td). setting value of attributes
             <td [attr.colspan]="model.getProducts().length">
	     same as
	      <td colspan="model.getProducts().length">

html-> difference between attribute and properties
https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html


[class.name]  class property binding- adding/removing classes conditionally
              <div   [class.bg-success]="model.getProduct(2).price < 50" class="p-a-1"
              if true - same as
	      <div   class = "bg-success p-a-1"


[style.name]  style property binding,
             <span [style.fontSize]="fontSizeWithUnits">
             same as
             <span style ="fontSize:"fontSizeWithUnits">


[] -  denotes 1 way binding


[target]="expr" The square brackets indicate a one-way data binding where data flows from
the expression to the target. The different forms of this type of binding are the
topic of this chapter.

{{expression}} This is the string interpolation binding, which is described in the  Using the
String Interpolation Binding  section.

(target) ="expr" The round brackets indicate a one-way binding where the data flows from the
target to the destination specified by the expression. This is the binding used
to handle events, as described in Chapter 14.

[(target)] ="expr" This combination of brackets known as the banana-in-a-box indicates a
two-way binding, where data flows in both directions between the target and
the destination specified by the expression, as described in Chapter 14.


pa-attr="'table-success'"

need square brackets to evaluate the expression in "" else raw text will be used
[pa-attr]="getProducts().length < 6 ? 'table-success' : 'table-warning'"

ngOnInit This method is called after Angular has set the initial value for all the input
properties that the directive has declared.

ngOnChanges This method is called when the value of an input property has changed and also
just before the ngOnInit method is called.

ngDoCheck This method is called when Angular runs its change detection process so that
directives have an opportunity to update any state that isn t directly associated
with an input property.

ngAfterContentInit This method is called when the directive s (projected) content has been initialized. See the
 Receiving Query Change Notifications  section in Chapter 14 for an example
that uses this method.

ngAfterContentChecked This method is called after the directive s content has been inspected as part of
the change detection process.

ngOnDestroy This method is called immediately before Angular destroys a directive.

<input class="bg-primary text-white form-control"
[paModel]="newProduct.name"
(paModelChange)="newProduct.name = $event" />

<input class="bg-primary text-white form-control"
[(paModel)]="newProduct.name" />

Structural directives: change the layout of the HTML document by adding and removing elements. *ngIf or *ngFor.

Components are directives that have their "own templates", rather than relying on content provided from
elsewhere.

ng-content element. This is known as content projection. projecting host element's content

ViewEncapsulation pg 429
Emulated:    **Default** Component styles are seperate from others. but it still allows elements to be styled by the global CSS styles e.g Bootstrap
ShadowDom:   When this value is specified, Angular uses the browser s shadow DOM feature
None:        When this value is specified, Angular simply adds the unmodified CSS styles to the head
section of the HTML document and lets the browser figure out how to apply the styles using
the normal CSS precedence rules. "Adds to global css"
The ShadowDom and None values should be used with caution

/deep/ -> css selector. Specified in a parent component Pushes a Style into the Child Component s Template
e.g: styles: ["/deep/ div { border: 2px black solid; font-style:italic }"]

@ViewChild(class) -> This decorator tells Angular to query for the first directive or component object
of the specified type and assign it to the property. The class name can be
replaced with a template variable

@ViewChild(class)
@ViewChild('dtExport')   -> <p-table #dtExport    Via template variable

ngAfterViewInit -> This method is called when the component s view and child views have been initialized. The
results of the view queries e.g. @ViewChild(class) are set before this method is invoked.

Pipes are classes that are used to prepare data for display to the user.

Pipe
Pure=true: Default is evaluated when data value before the vertical bar character in the template changes or when
one or more of its arguments is modified.

Pipe is re-evaluated if item.price changes or taxRate changes
<td>{{item.price | addTax:(taxRate || 0) | currency:"USD":"symbol" }}</td>

Pure=false. Pipe is re-evaluated / invokes the transform methods even when there has been no data value or argument changes
Impure- don't use- performance issue. re-evaluated too often

| json pipwe for troubleshooting

<div>{{ getProducts() | json }}</div>

Services. are Singleton. Same Service object is shared by all componets/directives/pipes

difference between property and attributes
https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html
For instance, this HTML element:
<input type="text" value="Name:">
has 2 attributes (type and value).
Once the browser parses this code, a HTMLInputElement object will be created, and this object will contain dozens of properties like: accept, accessKey, align, alt, attributes, autofocus, baseURI, checked, childElementCount, childNodes, children, classList, className, clientHeight, etc.

<div [attr.role]="myAriaRole">  Binds attribute role to the result of expression myAriaRole.
<input [value]="firstName">     Binds property value to the result of expression firstName.


Components are just directives with templates

Providers are classes that create service objects the first time that Angular needs to
resolve a dependency.

constructor arguments are resolved using either built-in or custom services

extends-> inherits another class
implements -> implement an interface e.g. OnInit

super class or base class
derived class

Service providers instantiate a service for dependency injection
Class provider - configured using a class
Value provider - configured using an object
Factory provider - configured using a function - function to create the object required to resolve a dependency

When Angular creates a new instance of a class, it resolves any dependencies using an injector.

Each component and directive can have its own injector, and each injector can be configured with its own set of providers, known
as local providers.

Components can define local providers. Seperable service object unlike Singleton service objects
Local Providers on Component will have its own Service object injected in constructor. Will not be singleton
like when declaring providers on app module.

providers: Services or Pipes that will be injected in the constructor
global providers  in app Module
local providers : in components

Root module: every Angular application uses to describe the configuration of the application to Angular
Feature module: which are used to add structure to an application so that related features can be grouped as a single unit


Module Limitations: There is no module-wide scope for providers, which means that the providers
defined by a feature module (or custom modules) will be available as though they had been defined by the
root module

Module Properties

imports:  Specifies the Modules imported that are required to support the directives, components, and pipes in the application
declarations: This property is used to specify the directives, components, and pipes that are used in the
application. when you add a module to the imports property, its declarable classes are automatically available for use in the application

providers: This property defines the service providers that will be used by the module s injector. These
are the providers that will be available throughout the application and used when no local provider for a service is available
singleton services specified here. to inject parameters in the constructor.

bootstrap: This property specifies the root components for the application.

Feature modules are used to group related functionality so that it can be used as a single entity, just
like the Angular modules such as BrowserModule


Feature modules/Custmom Module's PROVIDERS: When the feature module is loaded,
it's set of providers is combined with those in the root module, which means that the
feature module s services are available throughout the application (and not just within the
module).<---IMPORTANT

Feature module's Providers are merged with the root module's providers and are available throughout the application

EXPORTS: export directives, components, and pipes to be used in other modules that import this feature module

@Injectable Reference: https://mjlib.in/what-is-the-purpose-of-providedin-with-the-injectable-decorator/

If you specify providedIn root then you don't have to include it in providers property in the module. also allows tree shaking
@Injectable({
    providedIn: 'root',
})

If providedIn is not provided then you have to

Chp 12- Template Forms
Chp 21, 22- Reactive forms

FormGroup provides an API for working with a form and can be used directly in the component class
FormGroup is a container for FormControl objects each of which represents an element in the form.
FormGroup class: which represents a group of form controls

Template based forms use NgModel directive whereas Reactive Forms use [formControl] directive

Object.assign does shallow copying. Only copies reference data. Same underlying reference. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Deep copy creates a completely seperate object copying data with its own reference. https://developer.mozilla.org/en-US/docs/Glossary/Deep_copy
For Deepcopy use Lodash's cloneDeep()
https://code.tutsplus.com/articles/the-best-way-to-deep-copy-an-object-in-javascript--cms-39655

pg 648- Custom Form Validation

Rest API MEthods
https://restfulapi.net/http-methods/
Angular: https://www.sitepoint.com/angular-rxjs-create-api-service-rest-backend/
Http Status Codes: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

get(url)          This method sends a GET request to the specified URL.
post(url, body)   This method sends a POST request using the specified object as the body.
put(url, body)    This method sends a PUT request using the specified object as the body.
patch(url, body)  This method sends a PATCH request using the specified object as the body.
delete(url)       This method sends a DELETE request to the specified URL.
head(url)         This method sends a HEAD request, which has the same effect as a GET request except that the server will return only the headers and not the request body.
options(url)      This method sends an OPTIONS request to the specified URL.

request(method, url, options)
This method can be used to send a request with any verb, as described in the  Consolidating HTTP Requests  section.


-Webapi 2 uses IHttpActionResult. Webapi 1 used HttpResponseMessage

HTTP Method	URI Path	Action	Parameter
GET	api/products	GetAllProducts	(none)
GET	api/products/4	GetProductById	4
DELETE	api/products/4	DeleteProduct	4
POST	api/products	Post (or PostProduct?)      product send in body as Json -Create
PUT     api/products/4  Put (or PutProduct)   4     product send in body as Json -Update

PATCH  api/products/4  To update specific properties of an object. The request body contains a JSON
representation of the properties to update and the new values.  (some web services may not support Patch verb)


**See Gene by Gene Sample App

 Webapi 2								Webapi 1
 public IEnumerable<Product> GetAllProducts() { }
 public async Task<IHttpActionResult> GetProductById(int id)                 -- public Product GetProductById(int id) { }
 public async Task<IHttpActionResult> DeleteProduct(int id)                  -- public HttpResponseMessage DeleteProduct(int id){ }
 public async Task<IHttpActionResult> Post([FromBody]Product product)        --public HttpResponseMessage Post([FromBody]Product product)
 public async Task<IHttpActionResult> Put(int id, [FromBody]Product product) --public HttpResponseMessage Put(int id, [FromBody]Product product)

 https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/create-a-rest-api-with-attribute-routing
 https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5

Action	HTTP method	Relative URI

Get a list of all products	GET	 /api/products
Get a product by ID		GET	 /api/products/id
Get a product by category	GET	 /api/products?category=category
Create a new product		POST	 /api/products
Update a product		      PUT	 /api/products/id
Delete a product		      DELETE /api/products/id


For Servers that don't accept CORS, we need to use JsonP. Only use if CORS functionality is not available on the server

this.ngZone.run(() => this.messageService.reportMessage(new Message(msg, true)), 0); --> triggers Angular's change detection process
Angulardoesn t keep track of the state of "services" as it does for components and directives.

pipes and services can be tested in isolation
for components and directives, you need unit testing

RouterModule.forRoot(routes) -> The forRoot method produces a module that includes the routing service.


Direct access:
/products/edit/2
To avoid direct access issue with loading data before accessing it use a Resolver (pg 755) instead of Observables (pg 709)

Resolver example: https://www.bacancytechnology.com/blog/angular-resolver

Resolver
resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Product | undefined> {

The first argument is an ActivatedRouteSnapshot object, which describes the route that is being ****navigated to*** using the properties
described in Chapter 24.

The second argument is a RouterStateSnapshot object, which describes the ***current route*** through a single property called url.

CanActivate (parameters is same as Resolvers above)
canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {


Chp 24- Used routing in forms (list/add/edit) to handle navigation(passing data) between list component and add/edit component instead of using
a shared service.

Place more specific routes first


/table   router-outlet for childs: categories and products- parent- tablecomponent
/table/categories   click without clicking categories
/table/products     click without clicking products

/table/Watersports/categories  click after clicking categories
/table/Watersports/products    click after clicking products

json server is a package for creating web services from json data or javscript code

? denotes optional parameters when creating new Product objects
export class Product {
constructor(
public id?: number,
public name?: string,
public category?: string,
public description?: string,
public price?: number) { }
}

import { Observable, from } from "rxjs";
private products: Product[]

getProducts(): Observable<Product[]>
    return from([this.products]);

pg 141- guard to prevent users from reloading browser on a diff url than main url

array if remove or add an item, you can either use IterableDiffers to check or just reload datasource or (if reloading datasource doesn't do)
just use a subject and then signal back to the subscriber



------------Angular online Docs----------------------------


Web Components:
Create an Angular Component that can be used in another framework.
Web components are a set of browser APIs that enable developers to create custom and reusable HTML tags that can be used in web apps just like standard HTML tags.
Angular elements are Angular components packaged as custom elements (also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way.

Angular consolidating import statements
https://balramchavan.medium.com/smarter-way-to-organize-import-statements-using-index-ts-file-s-in-angular-c685e9d645b7



! after variable name- typescript

Telling typescript that word is not null or undefined and not to give an error

let word : string | null = null
const num = 1
if (num) {
    word = "Hello World!"
}
console.log(word!.toLowerCase())

word!.toLowerCase()
https://blog.logrocket.com/understanding-exclamation-mark-typescript/#:~:text=TypeScript%20exclamation%20mark-,What%20is%20the%20TypeScript%20exclamation%20mark%3F,a%20string%20or%20undefined%2C%20the%20!

2nd example. Non-null Assertion Operator (Postfix !)

x either has:
1) a Value
2) is Undefined  (? optional parameter)
3) is null
function liveDangerously(x?: number | null) {
  console.log(x!.toFixed());  // using x!.toFixed is basically saying x is not null or undefined
}


let ff  = (first?: number, second?:number) => {
  first = first ?? 5;
  second = second ?? 10
  console.log(`${first}` + '  ' +  `${second}`);
}

ff(null,4);



definite assignment assertion operator
// Not initialized, but no error
name!: string;

To tell typescript compiler that name will be initialized and not to give an error. It won't be null or undefined
https://www.typescriptlang.org/docs/handbook/2/classes.html#--strictpropertyinitialization

***class property***

export class Order {
    public id?: number;  --> use it as "optional property" when creating an object via constructor. Value is either number or undefined

    public id: number| undefined;

    name!: string;       --> wanted to say "name:string". Valid value only string. Cannot be null or undefined.  since strict is on need to
			     initialize it. If don't initialize it, then need to use ! to tell typescript that it will be initialized.
			     ! implying "Trust me, it will be initialized some way other than within constructor"



Component
  public id: number | undefined;

Input Property
@Input("paModel")
modelProperty: string | undefined = "";




Component Interaction
1) Pass data via Input Binding
2) Intercept input property changes with a setter
3) Intercept input property changes with ngOnChanges()
4) Parent listens for child event   (via Emit)
5) Parent interacts with child using local Template variable
6) Parent calls an @ViewChild()
7) Parent and children communicate using a service
8) Components communicate via routing (passing params)

@Injectable() implies class is intended for use as a Service. pg 491

Using the @Injectable() providedIn property is preferable to using the @NgModule() providers array. With @Injectable() providedIn,
optimization tools can perform tree-shaking, which removes services that your application isn't using. This results in smaller
bundle sizes.

What is NgZone?   https://angular.io/guide/zone
Angular provides a service called NgZone which creates a zone named angular to automatically trigger change detection when the following conditions are satisfied.
When a sync or async function is executed
When there is no microTask scheduled

NgZone service provides a run() method that allows you to execute a function inside the angular zone. This function is used to execute third party APIs which are not handled by Zone and trigger change detection automatically at the correct time.


Question 27: How do you update the view if your data model is updated outside the  Zone ?
Requirement: Expert Angular knowledge

Answer:

1) Using the ApplicationRef.prototype.tick method, which will run change detection on the entire component tree.
2) Using NgZone.prototype.run method, which will also run change detection on the entire tree. The run method under the hood itself calls tick, and the parameter takes the function you want to perform before tick.
3) Using the ChangeDetectorRef.prototype.detectChanges method, which will launch change detection on the current component and its children.

Question 30: What are some points to consider when optimizing an Angular 6 application for performance?
Requirement: Application performance optimization

Answer: There are many ways, some ideas include:

AOT compilation, bundling and uglifying the application, tree shaking, lazy loading, separating dependencies and devDependencies, Using OnPush and TrackBy, removing unnecessary 3rd party libraries and import statements, avoid computing values within the template. using async/await (non-blocking api calls)

59. In Angular, describe how will you set, get and clear cookies?
For using cookies in Angular, you need to include a  module called ngCookies angular-cookies.js.

To set Cookies   For setting the cookies in a key-value format  put  method is used.

cookie.set('nameOfCookie',"cookieValue");
To get Cookies   For retrieving the cookies  get  method is used.

cookie.get( nameOfCookie );
To clear Cookies   For removing cookies  remove  method is used.

cookie.delete( nameOfCookie );
60.  If your data model is updated ou

@HostListener() function decorator allows you to handle events of the host element in the directive class. For example, it can be used to change the color of the host element if you hover over the host element with the mouse.


When a sync or async function is executed.
When there is no microTask scheduled.

Change Detection reference: https://mokkapps.de/blog/the-last-guide-for-angular-change-detection-you-will-ever-need/
Change Detection: The process of updating the view (DOM) when the data has changed

1) When Change Detection by default occurs:
  a) Any browser event (click, keyup, etc.)
  b) setInterval() and setTimeout()
  c) HTTP requests via XMLHttpRequest

2) How to manually trigger Change Detection?
  a) ChangeDetectorRef.detectChanges() triggers change detection on this view and its children by keeping the change detection strategy in mind
  b) ApplicationRef.tick()             triggers change detection for the whole application by respecting the change detection strategy of a component

  c) ChangeDetectorRef.markForCheck()  [use used much] which does not trigger change detection but marks all OnPush *ancestors* as to be checked once, either as part of the current or next change detection cycle.

With OnPush Change Detection Strategy, Angular will only update that Component if
1) the input reference has changed (for arrays and objects) Or the input has changed(numbers, string, boolean)
2) the component or one of its children triggers an event handler
3) change detection is triggered manually
4) an observable linked to the template via the async pipe emits a new value

Be mindful that the following actions *do not* trigger the change detection with OnPush change detection strategy:
1) setTimeout
2) setInterval
3) Promises
4) Any RxJS observable subscription

Async Pipe
The built-in AsyncPipe subscribes to an observable and returns the latest value it has emitted

Angular Dev Tools: https://angular.io/guide/devtools

Angular Template Driven Form: https://angular.io/guide/forms

Observable subscribe: next, error and complete methods
https://angular.io/guide/observables


@Input either
@Input() id = 'default_id'; Or
@Input() id?: string;   (string or undefined)- optional

Rxjs tap operator for logging
https://www.learnrxjs.io/learn-rxjs/operators/utility/do
https://angular.io/tutorial/toh-pt6

if (environment.production) {
	enableProdMode();  // change detection runs 1 time instead of 2 times, plus
}

enableProdMode();

change detection runs 1 time instead of 2 times, plus
which turns off assertions and other checks within the framework.
no extra logging

https://lukaonik.medium.com/what-is-the-difference-between-production-and-development-mode-in-angular-3eed82b9cf73

using export makes this a module. other classes can then use import to import it
export class Product


Use Declare keyword
The declare keyword in TypeScript is used for the Ambient declaration of variables or for methods. Ambient Declarations is like an import keyword. Which tells the compiler that the source exists in another file
https://www.geeksforgeeks.org/explain-when-to-use-declare-key--in-typescript/
declare let $: any;  <--using jquery in typescript
----------------------------------Typescript Online Docs-----------------------------------------------------

Strict
   strictBindCallApply
   strictFunctionTypes
   strictNullChecks
   strictPropertyInitialization
   useUnknownInCatchVariables
   noImplicitAny
   noImplicitThis


@ViewChild('dfd') paginator!: string; --> "!:" Trust me, it will be set

Tsconfig Reference:
https://www.typescriptlang.org/tsconfig


const pt = new Point();
// Prints 0, 0
console.log(`${pt.x}, ${pt.y}`);


**************If Strict: True in tsconfig*******************************
stirct mode: ON by default starting Angular version 12: https://blog.angular.io/with-best-practices-from-the-start-d64881a16de8

1) strictBindCallApply
2) strictFunctionTypes

3) strictNullChecks - Default True if Strict is ON  <----------------------------------------
When strictNullChecks is true, null and undefined have their own distinct types   <----------------
and you ll get a type error if you try to use them where a concrete value is expected.

4) strictPropertyInitialization - Default True if Strict is ON  <-----------------------------------------
class UserAccount {
  name: string;
  accountType = "user";

  email: string;     ----> Property 'email' has no initializer and is not definitely assigned in the constructor.
  address: string | undefined;

  constructor(name: string) {
    this.name = name;
    // Note that this.email is not set
  }
}

In the above case:

this.name is set specifically.
this.accountType is set by default.
this.email is not set and raises an error.
this.address is declared as potentially undefined which means it does not have to be set.


5) useUnknownInCatchVariables - Default True if Strict is ON
Catch clauses will default to Unknown. err is of type unknown
try {
  // ...
} catch (err) {


6)noImplicitAny - Default True if Strict is ON
if no type is present and typescript infers 'any' type, then typescript will throw an error if noImplicitAny is true.
Default is ON because typescript wants you to use strong types and not fallback on 'any' type.

Below s has no type annotation
function fn(s) {
Parameter 's' implicitly has an 'any' type.
  console.log(s.subtr(3));
}


7) strictNullChecks - Default True if Strict is ON
When strictNullChecks is true, null and undefined have their own distinct types and you ll get a type error if you try to use them where a concrete value is expected.


declare const loggedInUsername: string;

will need to use below if value can be null or undefined

declare const loggedInUsername: string | undefined | null;

Typescript types:
number, string, boolean, Array, any


function printName(obj: { first: string; last?: string }) {
  if (obj.last !== undefined) {
    // OK
    console.log(obj.last.toUpperCase());
  }

  // A safe alternative using modern JavaScript syntax:
  console.log(obj.last?.toUpperCase());
}

//Union type. Method has to be available on Both. Else you'll have to cast it or narrow it using typeof
printId(id: number | string) {

 Or you typeof
The solution is to narrow the union with code. Preferable
  if (typeof id === "string") {
    console.log(id.toUpperCase());
  } else {  // number
    console.log(id);
  }

   console.log((id as number).toUpperCase()); // Error
   console.log((id as string).toUpperCase()); // Valid

}

Type Aliases

type Point = {
  x: number;
  y: number;
};

function printCoord(pt: Point) {
  console.log("The coordinate's x value is " + pt.x);
  console.log("The coordinate's y value is " + pt.y);
}


Type Vs Class. Types get erased at runtime. Class and Object persist an runtime.
https://stackoverflow.com/questions/51131898/what-is-the-difference-between-type-and-class-in-typescript

type Point = {
  x: number;
  y: number;
};

class Point {
  x: number;
  y: number;
}

interface Point {
  x: number;
  y: number;
}

Differences Between Type Aliases and Interfaces
the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.


https://medium.com/geekculture/typescript-interfaces-vs-classes-when-to-use-each-one-29955e2dfbd8
But interfaces are not limited to classes. You can also use them with object literals, like this:

You can use either (class or interfaces) for api requests. classes when serialized will remove functions.

Either Interface or Class can be
interface Person {
  name: string;
  age: number;
  greet(): string;
}

Create Object using Interface to denote structure of object.
const person: Person = {
  name: 'John Doe',
  age: 30,
  greet() {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }
};

Implementing Interface
class Person implements Person {
  name: string;
  age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  greet(): string {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }
}



Type Assertions. Like a type annotation, type assertions are removed by the compiler
const myCanvas = document.getElementById("main_canvas") as HTMLCanvasElement;

Strongest Cast. 2 level cast
const a = (expr as any) as T;


undefined: Declared but not initialized
null: absense of value

typeof values   ( no null value)
"string"
"number"
"bigint"
"boolean"
"symbol"
"undefined"   <---
"object"
"function"

typeof null is actually "object". https://www.typescriptlang.org/docs/handbook/2/narrowing.html


if(value)-- false values. all coerce to false, and other values get coerced true
0
NaN
"" (the empty string)
0n (the bigint version of zero)
null
undefined


function printAll(strs: string | string[] | null) {
  if (strs && typeof strs === "object") {   <-- Best check

by checking if strs is truthy.. if(strs)
typeof null is actually "object". strs will make sure its not null or undefined


this.test == null        checks for both null and undefined <------------------------- https://www.typescriptlang.org/docs/handbook/2/narrowing.html
this.test == undefined   checks for both null and undefined

---> Must use '===' to check for both type and value <---

test: string | null | undefined;

if(this.test == null) {
    console.log('it is null');
} else {
    console.log('it is not null');
}

function logValue(x: Date | string) {
  if (x instanceof Date) {


never type - TypeScript will use a never type to represent a state which shouldn t exist.
The never type is assignable to every type; however, no type is assignable to never (except never itself)

Typescript loops for etc
https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html

let numbers = [1, 2, 3];
for (let num of numbers) {
  console.log(num);
}

var numbers = [1, 2, 3];
for (var _i = 0; _i < numbers.length; _i++) {
  var num = numbers[_i];
  console.log(num);
}


Any,unknown,object,void,undefined,null, and never assignability
https://www.typescriptlang.org/docs/handbook/type-compatibility.html


https://www.typescriptlang.org/docs/handbook/variable-declarations.html
https://www.programiz.com/javascript/let-vs-var
Always use 'let' block scope vs var 'function of global scope'

Unknown Vs Any type
https://stackoverflow.com/questions/51439843/unknown-vs-any

let vAny: any = 10;          // We can assign anything to any
let vUnknown: unknown =  10; // We can assign anything to unknown just like any


let s1: string = vAny;     // Any is assignable to anything
let s2: string = vUnknown; // Invalid; we can't assign vUnknown to any other type (without an explicit assertion)

vAny.method();     // Ok; anything goes with any
vUnknown.method(); // Not ok; we don't know anything about this variable


const foo: unknown = 1
console.log(foo > 10) // <- Error foo is still unknown, so it cannot be compared to a number

// Rest assure compiler, I know what I am doing with foo. Cast Unknown to a number
console.log(foo as number > 10)

Or


In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from any to unknown.
Now you either have to cast it or check instance of or typeof before using it.

try {
  // ...
} catch (err) {
  // We have to verify err is an
  // error before using it as one.
  if (err instanceof Error) {
    console.log(err.message);
  }
}

if (typeof maybe === "string") {


javascript private fields
class ClassWithPrivateField {
  #privateField;
}




-------------------------------Typescript Book---------------------------------------------------

Typescript concise constructor syntax. No need to define and assign properties. This happens automatically. Need to use public keyword.

constructor(public id: number,
	    public task: string,
	    public complete: boolean = false) {
           // no statements required
}

printDetails() : void {
             console.log(`${this.id}\t${this.task} ${this.complete? "\t(complete)": ""}`);
   }
}


Javascript ES6. Map object. Key value pairs.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
https://howtodoinjava.com/typescript/maps/

pg 16- Essential Typescript Reference

private itemMap = new Map<number, TodoItem>();

Can also iterate ove maps using for loops

map.set(key, value)   adds a new entry in the Map.
map.get(key)   retrieves the value for a given key from the Map.
map.has(key)   checks if a key is present in the Map. Returns true or false.
map.size   returns the count of entries in the Map.
map.delete(key)   deletes a key-value pair using its key. If key is found and deleted, it returns true, else returns false.
map.clear()   deletes all entries from the Map.

Javascript spread operator: ...
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

You can expand an iterable such as array or string

You can apply it to an object or an array to expand it.

Expand object and merge it. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
export interface ToDostate{
  prop1: string;
  prop2: string
}

let obj: ToDostate = {
  prop1: 'first prop',
  prop2: 'second prop'
}

console.log(obj);

obj = {...obj, prop1:'first prop modified'}

console.log(obj);


For loops.
Use for-of loops(you can break loop) instead of foreach(cannot break loop but have access to index value) or for-in(iterates through non-data properties as well (pg 368 -  angular 2 development with typescript book- appendix a)

https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html

for objects
for (let item of mobiles) {
  console.log(item.brand);
}

let numbers = [1, 2, 3];
for (let num of numbers) {
  console.log(num);
}

var numbers = [1, 2, 3];
for (var _i = 0; _i < numbers.length; _i++) {
  var num = numbers[_i];
  console.log(num);
}


The double equal sign (==) performs a comparison that applies type coercion. The triple equal sign
(===) applies a strict comparison that will return true only if the values have the same type and are equal.
pg 50. Essential Typescript


Check for a number use
typeof v === 'number' instead of
Number.isNaN('X').  Number.isNaN('37') converts to number automatically

hat?.price
The optional changing operator (the ? character) will stop evaluating an expression if the value it is applied to is null or undefined won t try to read the value of the price property if hat is undefined or null.

https://mariusschulz.com/blog/optional-chaining-the-operator-in-typescript

The JavaScript runtime evaluates the options?.formatting?.indent expression as follows:

If options holds the value null or undefined, produce the value undefined.
Otherwise, if options.formatting holds the value null or undefined, produce the value undefined.
Otherwise, produce the value of options.formatting.indent.

**It won't throw an error**

JSON.stringify(someObject)
The built-in JSON.stringify method creates a string representation of an object using the JSON data
format

Call base class constructor via super()

Object.keys(object)
This method returns an array containing the property names defined by the object.
Object.keys(data).forEach(key => console.log(data[key].toString()));

Object.values(object)
This method returns an array containing the property values defined by the object.

Objects can only store string values as keys.
Maps can store any types as keys

Each Symbol value is unique and immutable and ideally suited as an identifier for objects.
Once you create a symbol, its value is kept private and for internal use.
Symbols are not enumerated, which means that they do not get included in a for..of or for..in loop ran upon an object.


Difference between Array and Set
Set only stores unique values

To troubleshoot data types,

{
  "compilerOptions": {
    "target": "es2020",
    "outDir": "./dist",
    "rootDir": "./src",
    "declaration": true   <-----
   }
}
The declaration setting tells the compiler to generate files that contain type information alongside the
JavaScript code it produces

to generate type info .d.t use "npx tsc" npx executes typescript compiler to compile the files
npx tsc  (to compile)
node dist/index.js  (to execute index.js)

For index.ts file, it will produce index.d.ts with type info it used. this file reveals
the types that the compiler has inferred for the statements

...
declare function calculateTax(amount: number): string;
declare let price: number;
declare let taxAmount: string;
declare let halfShare: number;

typescript compiler will not assume type 'any' if no type is provided
"compilerOptions": {
  "noImplicitAny": true


In a Type Union, you can only use the properties and methods defined by all the types in the union.
Below only method toString() should've been used

function calculateTax(amount: number, format: boolean): string | number {
let taxNumber: string | number = calculateTax(100, false);
let taxString: string | number = calculateTax(100, true);

console.log(`Number Value: ${taxNumber.toFixed(2)}`);  <--Error
console.log(`String Value: ${taxString.charAt(0)}`);   <--Error


A type assertion tells the TypeScript compiler to treat a value as a specific type, known as type narrowing
Type Assertion <=> Type Narrowing  Or Casting??

Or Casting??
let taxNumber = calculateTax(100, false) as number;
let taxString = calculateTax(100, true) as string;

This selects a specific type from the type union so methods on that type can be used

Double Overriding/Casting. First to 'any' then to 'boolean'
let taxBoolean = calculateTax(100, false) as any as boolean;


Type Guard
if (typeof taxValue === "number") {

***Unknown Type***
An unknown value can be assigned only any or itself unless a type assertion or type guard is
used.

let newResult: unknown = calculateTax(200, false);    function returns -type union result of 'number | string'
let myNumber: number = newResult as number;
console.log(`Number value: ${myNumber.toFixed(2)}`); method exists in type number and not type string


when strictNullChecks is true, you cannot assign null or undefined to other types. Default is true if option 'strict' is ON.

Using non-null assertion
function calculateTax(amount: number, format: boolean): string The counterpart to optional parameters is the rest parameter, which allows a function to accept a variable
number of arguments,| number | null {
let taxValue: string | number = calculateTax(100, false)!;

calculateTax(100, false)! tells the compiler that the result from the calculateTax function will not be null
which allows it to be assigned to the taxValue variable, whose type is string | number

Alternate way using a Type Guard -  if (taxValue !== null) {
let taxValue: string | number | null = calculateTax(100, false);
 if (taxValue !== null) {
     let nonNullTaxValue: string | number = taxValue;
 } else {
   console.log("Value is not a string or a number");
 }

Non-null assertion :   calculateTax(100, false)!    --> tells compiler that the result from the calculateTax function will not be null. Applied in Expressions.
Definite Assignment Assertion: let taxValue!: string | number | null; --> tells compiler that value will be assigned before the variable is used. Applied when Defined.

JavaScript doesn t support function overloading, and when you define two functions with the same
name, the second function replaces the first, regardless of the function s parameters

function calculateTax(amount, discount?) { // optional parameter. value undefined if not provided.

Optional parameters must be defined after the required parameters.

Default values. Parameters with default values are still optional parameters, even though no question mark is used,
function applyDiscount(price: number, discount: number = 0.05): number {

Rest Parameter:
The counterpart to optional parameters is the rest parameter, which allows a function to accept a variable
number of arguments,
function calculateTax(amount, discount = 0, ...extraFees) {

NoImplicitReturns
When the noImplicitReturns setting is true, the compiler will report an error when there are paths
through functions that don t explicitly produce a result

Functions that don't produce a result: function writeValue(label: string, value: number): void {

Type Overloading - Not Function Overloading. pg 190

function calculateTax(amount: number): number;
function calculateTax(amount: null): null;
function calculateTax(amount: number | null): number | null {
  if (amount != null) {
   return amount * 1.2;
  }
 return null;
}


Catch variables default to Unknown type when option strict is ON (default)

Try Catch in Typescript 4.0. Catch parameter defaults to type Unknown and you have to do a type guard.


try {
	throw new Error("this is an error");
	} catch (error: unknown) {

	if(error instanceof Error) {  //type guard
		console.log(error.message);
	}
}

let prices: number[] = [100, 75, 42];
let names: string[] = ["Hat", "Gloves", "Umbrella"];

prices.forEach((price: number, index: number) => {
   writePrice(names[index], calculateTax(price));
});


let prices: number[] = [100, 75, 42]; Preferref way to declare arrays than
let prices:Array<number> = [100, 75, 42]; The problem with this syntax is that it cannot be used in TSX files, which combine HTML elements with
TypeScript code, as described in Chapter 15.

compiler will infer the type any for arrays that are created empty


Destructuring an Array
let names = ["Hat", "Boots", "Gloves"];
let [one, two] = names;


Ignoring Elements When Destructuring an Array
let names = ["Hat", "Boots", "Gloves"];
let [, , three] = names;

enum Product { Hat, Gloves, Umbrella }
enum values start at 0

Creating an object using a constructor function
let Employee = function(id: string, name: string, dept: string, city: string) {
  this.id = id;
  this.name = name;
});

When the strictPropertyInitialization configuration option is set to true, the TypeScript compiler
reports an error if a class defines a property that is not assigned a value, either as it is defined or by the
constructor. The strictNullChecks option must also be enabled for this feature to work.

class Employee {
public id: string;
public name: string;
#dept: string;    <-- javascript private field
public city: string;


class Employee {
public readonly id: string;   <-- readonly property


Typescript concise syntax for creating a class

class Employee {

 constructor(public readonly id: string, public name: string, private dept: string, public city: string) {
    // no statements required
 }

 writeDept() {
   console.log(`${this.name} works in ${this.dept}`);
  }
}

let salesEmployee = new Employee("fvega", "Fidel Vega", "Sales", "Paris");
salesEmployee.writeDept();

The typescript compiler automatically creates an instance property for each of the constructor arguments to
which an access control keyword has been applied and assigns the parameter value


Inheritance examples

----using concise typescrpt syntax----
putting access modifier i.e. public creates instance properties automatically

class Person {
	constructor(public id: string, public name: string, public city: string) { }
}


class Employee extends Person {
	constructor(id: string, name: string, private dept: string, city: string) {
		super(id, name, city);
}
	writeDept() {
		console.log(`${this.name} works in ${this.dept}`);
	}
}


Regular way

class Person {
	public id: string;
	public name: string;
	public city: string

		constructor(id: string, name: string, city: string) {
			this.id = id;
			this.name = name;
			this.city = city;
		 }
	}

	class Employee extends Person {
		private dept: string;
		constructor(id: string, name: string, dept: string, city: string) {
			super(id, name, city);
			this.dept = dept;
	}
		writeDept() {
			console.log(`${this.name} works in ${this.dept}`);
		}
	}



Index signature allow to create dynamic properties in typescript just like in javascript. just like Dictionary in Python.

class xxx

[propertyName: string]: Product;


this  vs var self = this;
An arrow function doesn t define it s own this value, it inherits this from the enclosing function  <-------------------------------------
https://medium.com/@cristi.nord/javascript-arrow-functions-8f5984288f6

	var bunny = {
		name: 'Usagi',
		tasks: ['transform', 'eat cake', 'blow kisses'],
		showTasks() {
		  	this.tasks.forEach((task) => {
				console.log(this.name + " wants to " + task);
		  });
		}
	  };

	  bunny.showTasks();

Interfaces do not generate any JavaScript code. This means that interfaces are a
construct only used in the TypeScript compilation step and language services, and
are there to ensure type safety.



class WithoutInit {
   a: number;
   b: string;
}
 Error: strictPropertyInitialization

error TS2564: Property 'a' has no initializer and is not definitely
assigned in the constructor
error TS2564: Property 'b' has no initializer and is not definitely
assigned in the constructor

4 Solutions

1)
class WithoutInit {
  a: number | undefined;
  b: string | undefined;
}

2) definite assignment

class WithoutInit {
  a!: number;    (tells compiler trust me a will be assigned before it is used)
  b!: string;
}

3)
class WithoutInit {
  a: number = 1;
  b: string = "test";
}

4)

class WithoutInit {
  a: number;
  b: string;

 constructor(a: number) {
   this.a = a;
   this.b = "test";
  }
}

noImplicitThis

class NoImplicitThisClass {
  id: number = 1;

 printAfterWait() {
   let callback = function () {
     console.log(`this.id : ${this.id}`);   <--issue this is undefined
   }
  setTimeout(callback, 1000);
 }
}


Fix- use arrow functions

class NoImplicitThisClass {
  id: number = 1;

  printAfterWait() {
     let callback = () => {
        console.log(`this.id : ${this.id}`);
     }
     setTimeout(callback, 1000);
  }

 let callback = () => {
        console.log(`this.id : ${this.id}`);
  }

arrow function

let sum = (x: number, y: number): number => {
    return x + y;
}

sum(10, 20); //returns 30


RXJS
This pipe function takes a variable number of functions as parameters and
will execute these functions on each value that is emitted by the Observable

Subscribing to Observables

returnIdValue.subscribe(
   // called for each observable value
  (value: number | null) => {
    console.log(`received ${value} `);
  },

  // called if an error occurs
  (error: unknown) => {                      <------------- unknown
    console.log(`error : ${error}`);
  },

  // complete function
  () => {
    console.log(`complete`);
  }
);



try {
			throw new Error("this is an error");
			} catch (error: unknown) {   <-------------- unknown

			console.log(`error : ${error}`);      <-- can even do this

			if(error instanceof Error) {  //type guard
			   console.log(error.message);
			}
		}




const returnIdValue = objEmit.pipe(
  map((value: INestedObj) => {
    return value!.id!.value;
  }),


pg 235 -> Mastering Typescript
  catchError((error: unknown) => {           <---------------catchError unknown type
     console.log(`stream caught : ${error}`);
        return of(null);
     })
);



tsconfig target vs lib difference: https://www.claritician.com/typescript-lib-vs-target-what-s-the-difference
polyfill.ts file

e.g

tsconfig
1) "target": "es5"  => means any JavaScript syntax that is not supported in ES5 would be transpiled by TypeScript to ES5. For example, if in your code you use const and arrow functions (which are part of ES6): const add = (a: number, b: number) => a + b; The TypeScript compiler would transpile them to var and function: var add = function(a, b) {
  return a + b;
};

Second, you would not be allowed to use JavaScript APIs that are not supported in an ES5 environment. For example, Promise is only supported in ES2015 (or ES6), so you cannot use promises because TypeScript will not generate polyfills for them.

2) add polyfill

3) lib: "es2015" oe es6. will provide declarations file to write code for es6 in typescript.

what is a polyfill: https://developer.mozilla.org/en-US/docs/Glossary/Polyfill




-------------------------------------CSS Selectors--------------------------

:root  => selects the html element. Only that its specificity is higher.
The :root CSS pseudo-class matches the root element of a tree representing the document. In HTML, :root represents the
<html> element and is identical to the selector html, except that its specificity is higher.

https://developer.mozilla.org/en-US/docs/Web/CSS/:root

CSS Specificity
https://web.dev/learn/css/specificity/

CSS - Sass @extend Directive
https://www.w3schools.com/sass/sass_extend.php

The @extend directive lets you share a set of CSS properties from one selector to another.
.button-basic  {
  border: none;
  padding: 15px 30px;
  text-align: center;
  font-size: 16px;
  cursor: pointer;
}

.button-report  {
  @extend .button-basic;
  background-color: red;
}

overflow-wrap: break-word; (line break with e.g. space)
word-break: break-all; (line break even if have no space)

word-wrap: break-word;  (legacy for overflow-wrap. deprecated)

https://stackoverflow.com/questions/3058866/how-to-force-a-line-break-in-a-long-word-in-a-div
https://www.geeksforgeeks.org/what-is-the-difference-between-word-break-break-all-versus-word-wrap-break-word-in-css/

TO see placeholder text css style:
https://irishdotnet.dev/how-to-view-input-placeholder-styles-in-chrome

css difference between + and > operator
https://www.w3schools.com/cssref/css_selectors.asp
https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048

https://www.toptal.com/css/interview-questions

https://www.w3schools.com/cssref/css_selectors.php

X + Y {
  color: red;
}

1) * {}      => Selects All children
2) #block {} => target by Id
3) .error {} => target by class
4) x {}      => target by type (or element type)
  p.intro    => Selects all <p> elements with class="intro"
  div, p     => Selects all <div> elements and all <p> elements

.class1.class2 => Selects all elements with both class1 and class2 set within its class attribute

.class1 .class2 => Selects all elements with class2 that is a descendant of an element with class1

5) li a {}   => select all a elements inside li elements  (all anchors that are descendant of li - descendant selector)

   div p  {} => Selects all <p> elements inside <div> elements

6) div + p {}  => Selects the first <p> element that is placed immediately AFTER <div> elements  (p is after div element and not inside it)


7) p ~ ul {}  =>  Selects every <ul> element that is preceded by a <p> element  (ul is after p element and not inside it)

8) div > p {} =>  Selects all <p> elements where the parent is a <div> element   (p is inside div element)

a[title] {  =>   this will only select the anchor tags that have a title attribute

a:link { color: red; }
a:visited { color: purple; }

X:checked =>  input[type=radio]:checked {  => This pseudo class will only target a user interface element that has been checked like a radio button or checkbox.

X:after or X:before.   They simply generate content around the selected element.

X:hover => div:hover { => if you mouse hover over a div

X:not(selector)

div:not(#container) {  => Let's say I want to select all divs, except for the one which has an id of container
   color: blue;
}

X::pseudoElement
::before (e.g. insert content before)
::after  (e.g. insert content after)

p::first-line { => We can use pseudo elements (designated by ::) to style fragments of an element, such as the first line or the first letter
p::first-letter {

What's the difference between : and :: in CSS?
https://dev.to/whitep4nth3r/whats-the-difference-between-and-in-css-23p4

 PseudoClasses
: refers to pseudo-classes, such as :disabled or :hover
  Pseudo-classes allow you to select elements in CSS based on information outside of the HTML written on the page, such as user
  interaction or information stored in the browser.

All CSS Pseudo Classes (https://www.w3schools.com/css/css_pseudo_elements.asp)
:active		a:active	Selects the active link
:checked	input:checked	Selects every checked <input> element
:disabled	input:disabled	Selects every disabled <input> element
:empty		p:empty	Selects every <p> element that has no children
:enabled	input:enabled	Selects every enabled <input> element
:first-child	p:first-child	Selects every <p> elements that is the first child of its parent
:first-of-type	p:first-of-type	Selects every <p> element that is the first <p> element of its parent
:focus		input:focus	Selects the <input> element that has focus
:hover		a:hover	Selects links on mouse over
:in-range	input:in-range	Selects <input> elements with a value within a specified range
:invalid	input:invalid	Selects all <input> elements with an invalid value
:lang(language)	p:lang(it)	Selects every <p> element with a lang attribute value starting with "it"
:last-child	p:last-child	Selects every <p> elements that is the last child of its parent
:last-of-type	p:last-of-type	Selects every <p> element that is the last <p> element of its parent
:link	a:link	Selects all unvisited links
:not(selector)	:not(p)	Selects every element that is not a <p> element
:nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)	p:nth-of-type(2)Selects every <p> element that is the second <p> element of its parent
:only-of-type	p:only-of-type	Selects every <p> element that is the only <p> element of its parent
:only-child	p:only-child	Selects every <p> element that is the only child of its parent
:optional	input:optional	Selects <input> elements with no "required" attribute
:out-of-range	input:out-of-rangeSelects <input> elements with a value outside a specified range
:read-only	input:read-only	Selects <input> elements with a "readonly" attribute specified
:read-write	input:read-writeSelects <input> elements with no "readonly" attribute
:required	input:required	Selects <input> elements with a "required" attribute specified
:root		root		Selects the document's root element
:target		#news:target	Selects the current active #news element (clicked on a URL containing that anchor name)
:valid		input:valid	Selects all <input> elements with a valid value
:visited	a:visited	Selects all visited links

:: is for pseudo-elements, such as ::before (e.g insert content before), ::after
   Pseudo-element selectors allow you to use CSS to style a specific part of a DOM element.

Pseudo Elements

All CSS Pseudo Elements (https://www.w3schools.com/css/css_pseudo_elements.asp)

Selector        Example         Example description
::after	        p::after	Insert something after the content of each <p> element
::before	p::before	Insert something before the content of each <p> element
::first-letter	p::first-letter	Selects the first letter of each <p> element
::first-line	p::first-line	Selects the first line of each <p> element
::marker	::marker	Selects the markers of list items
::selection	p::selection	Selects the portion of an element that is selected by a user


Nth Child and Type Selectors

X:nth-child(n) = > target a specific child. not 0 based. 1 based. to target specific elements

li:nth-child(3) { to target 3rd list item
   color: red;
}

X:first-child => This structural pseudo class allows us to target only the first child of the element's parent.
ul li:first-child {
   border-top: none;
}

X:last-child



A CSS pseudo-class is a keyword, preceded by a colon (:), added to the end of selectors to specify you want to style the selected elements, and only when they are in certain state.
:active
:hover
:checked
:nth-child()
:first


ol > li {
  color: red;
}
https://css-tricks.com/almanac/selectors/c/child/
It means  select elements that are direct descendants only


Bootstrap Flex : https://getbootstrap.com/docs/5.2/utilities/flex/

left align   -> <div class="d-flex justify-content-start">...</div>
right align  -> <div class="d-flex justify-content-end">...</div>
center align -> <div class="d-flex justify-content-center">...</div>


2 items right float. Flex item 2 & Flex item 3 are floated to right

<div class="d-flex mb-3">
  <div class="me-auto p-2">Flex item 1</div>  me: margin right same as:  <div class="p-2" style="margin-right:auto">Flex item</div>
  <div class="p-2">Flex item 2</div>
  <div class="p-2">Flex item 3</div>
</div>

2 items left float. Flex item 1 & Flex item 2 are floated to left
<div class="d-flex mb-3">
  <div class="p-2">Flex item 1</div>
  <div class="p-2">Flex item 2</div>
  <div class="ms-auto p-2">Flex item 3</div>   ms: margin left  same as:  <div class="p-2" style="margin-left:auto">Flex item</div>
</div>

Difference beween Flexbox layout and CSS Grid layout
https://blog.angular.io/modern-css-in-angular-layouts-4a259dca9127

Flexbox layout:  display: flex; (1 dimensional)
CSS Grid layout: display: grid; (2 dimensional) <--- Like Bootstrap Grid System. However, Bootstrap Grid system is responsive

A simple question to ask yourself when deciding between grid or flexbox is:
do I only need to control the layout by row or column   use a flexbox
do I need to control the layout by row and column   use a grid

When you use CSS Grid Layout you create a layout and then you place items into it (Like Bootstrap Grid System. However, Bootstrap Grid system is responsive)
Flexbox Good for 1 row (not combination of row and columns)


*****Just use Bootstrap Grid System for row and columns (multi-line) and within row(1 line) if needed use flexbox. <----*****

--------------------CSS Layout Summary-------------------
CSS Layouts
Boostrap Grid      -> Responsive. Use
Bootstrap Flexbox  -> Responsive. Use if flexbox needs to be responsive
Flexbox            -> Not responsive by default. Use if responsive is not needed.
Css Grid           -> Not responsive. Use Boostrap Grid instead since its also responsive

Angular is promoting flexbox and grid based layouts.Angular is deprecating their own css layout. https://blog.angular.io/modern-css-in-angular-layouts-4a259dca9127


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Dan Wahlin - Angular JumpStart - Angular 14


Combined Routing


/customers/:id  -> CustomerModule
        customers/:id/orders
        customers/:id/details
	customers/:id/edit

/customers

/orders

/login

/about


https://rxjs.dev/

updated Aug 19, 2022

eslint rules: https://eslint.org/docs/latest/rules/prefer-arrow-callback

Book code: https://github.com/Apress/pro-angular-5ed

https://github.com/nodejs/help/issues/1592

Delete old npm folders  npm or npm-cache  from C:\Users\Dan\AppData\Roaming or C:\Users\Dan\AppData\Local

install node js from website= LTS version

***************Node Js Nodejs Fresh Install*********************

******Check Admin priviliges to install new node. Run msi and see any pop-up******

1) Install Node 20.7.0 on laptop



Completely uninstall node and npm and then install Node 20.7.0
https://stackoverflow.com/questions/20711240/how-to-completely-remove-node-js-from-windows

https://nodejs.org/download/release/v20.7.0/
Double click on node-v20.7.0-x64.msi

install node js

**Leave the checkbock unchecked**

2) Install NX globally on laptop

npm install --global nx@16.9.0

3) Create new branch from main - Github

Switch to that branch

4) Run npm install

rimraf node_modules  (delete node_modules)
npm cache clean --force
npm cache verify
npm install

if error or package-lock.json update, try installing again by deleting node_modules.
else completely uninstall node and npm: https://reactgo.com/uninstall-node-npm-from-windows/
and try installing fresh

5) Run UI locally


Environment Variable:
C:\Users\dalokman\AppData\Roaming\npm

System Variable
C:\Program Files\nodejs\

nx --version
16.9.0

node -v
v20.7.0

npm -v
10.1.0

node -v
npm -v
ng v or ng version


ng v or ng version   <---


To create a new angular project: ng new todo --routing false --style css --skip-git --skip-tests

Javascript object reference:
Array: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
All: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
lodash docs: https://lodash.com/docs/4.17.15

null, undefined: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html
tsconfig reference: https://www.typescriptlang.org/tsconfig#strictNullChecks
false values for checking purposes: page 67. boolean value can be false, 0 value is false, "" empty string is false,
null is false, undefined is false, NAN (Not a number) is false

https://blog.angular.io/with-best-practices-from-the-start-d64881a16de8
https://www.carlrippon.com/controlling-type-checking-strictness-in-typescript/
We're happy to announce that we'll be enabling strict mode by default for all new projects starting from Angular version 12


Angular CLI: 14.1.3
Node: 16.17.0
Package Manager: npm 8.15.0
OS: win32 x64

Angular:
...

Package                      Version
------------------------------------------------------
@angular-devkit/architect    0.1401.3 (cli-only)
@angular-devkit/core         14.1.3 (cli-only)
@angular-devkit/schematics   14.1.3 (cli-only)
@schematics/angular          14.1.3 (cli-only)


How to Add Eslint to project (TSlint is deprecated)
*To encourage coding best practices Angular CLI provides built-in linting*
https://www.telerik.com/blogs/angular-basics-using-eslint-boost-code-quality
ng lint  (to check code best practices)


Dev
  ng build --configuration=development
  cd dist
  ng build --configuration=development --base-href=/todo/ (to run from dist)
Prod
  ng build --configuration=production --base-href=/todo/
  cd dist
  ng serve --configuration=production --base-href=/todo/ (to run from dist)


  ng build --prod --base-href /SamplesUI/


ng serve --port 3000 --open --live-reload false

Grant IIS Permission to Directory
IIS AppPool\DefaultAppPool
IUSR


   **Dev**
   npm install  (install node_modules)
   ng build or ng build --dev for Dev build (creates dist folder with bundles)
   cd dist
   ng serve (to run from dist)

   **Prod** (see below. ng serve deleted dist directory)
   ng build --prod    (default aot enabled with uglifying and tree-shaking functionality for prod .with All builds make use of bundling, and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality)
   cd dist
   ng serve --prod (to run from dist)
   ng build --prod --base-href /SamplesUI/   ---dooooo


ng serve --port 3000 --open --live-reload false(for localhost)
ng serve --port 3000 --open
ng build --configuration=dev (for dev server)
ng build --configuration=uat
ng build --configuration=production

--------------------------
using Node.js:
node -v
v16.10.0

npm -v     (https://stackoverflow.com/questions/51238643/which-versions-of-npm-came-with-which-versions-of-node)
8.19.2

git --version
git version 2.37.3.windows.1

ng v or ng version
Angular CLI: 14.2.7   <------
Node: 16.10.0
Package Manager: npm 8.19.2
OS: win32 x64

Angular:
...

Package                      Version
------------------------------------------------------
@angular-devkit/architect    0.1402.7 (cli-only)
@angular-devkit/core         14.2.7 (cli-only)
@angular-devkit/schematics   14.2.7 (cli-only)
@schematics/angular          14.2.7 (cli-only)
---------------------------------------------------------------------------------

Prepare Angular Environment on your local computer

How to completely uninstall Node.js and npm from Windows
https://stackoverflow.com/questions/20711240/how-to-completely-remove-node-js-from-windows
https://reactgo.com/uninstall-node-npm-from-windows/

Environment Variable:
C:\Users\dalokman\AppData\Roaming\npm

System Variable
C:\Program Files\nodejs\


1)	Install pre-requisite software on your local computer e.g. Git for windows

a)	Install Node.js - version 10.16.3
Install windows version of node.js version 10.16.3 from https://nodejs.org/download/release/v10.16.3/ by downloading node-v10.16.3-x64.msi and installing it. Installing node should automatically install npm as well.

Verify installation by running the following at the DOS command line
node -v  (to verify node version)
npm -v (to verify npm version).


b)	Install Angular CLI   version 14.2.7  globally
npm install -g @angular/cli@14.2.7

or install latest
npm install -g @angular/cli@latest

npm install --save lodash@latest
npm install --save-dev @types/lodash@latest

Verify installation by running the following at the dos command line
ng v (to verify Angular Cli version)


c)	Install Visual Studio Code for Windows (VS Code) 64 bit
This will be used to open up the codebase to make changes (i.e. text editor)
https://code.visualstudio.com/

3)Run npm install (to download modules for Angular project- Concept Selection)

Open Dos command prompt, and cd to C:\XXX\source\UI and then run the following command: npm install

This command should install all the software dependencies needed to build the project. A  node_modules folder should be created at the following path
C:\Users\XXX\source\cs-repo\ConceptSelection_UI\node_modules
This completes the Angular environment and project setup.
To run Angular UI, while under C:\Users\XXX\source\UI> type the following: ng serve --port 3000 --open --live-reload false

----------------------------------------------

--------------------------------------------------------

Angular CLI: 7.1.2
Node: 10.14.1
OS: win32 x64
Angular:
...

Package                      Version
------------------------------------------------------
@angular-devkit/architect    0.11.2
@angular-devkit/core         7.1.2
@angular-devkit/schematics   7.1.2
@schematics/angular          7.1.2
@schematics/update           0.11.2
rxjs                         6.3.3
typescript                   3.1.6

--------------------------------------------------------

Update Angular 7 to 14

https://update.angular.io/?l=3&v=7.0-14.0

--------------------------------------------------------

Difference between package.json Vs package-lock.json
https://medium.com/dlt-labs-publication/package-json-vs-package-lock-json-c8d5deba12cb

Difference between "~" and "^" in package.json
https://vibhas1892.medium.com/difference-between-tilde-and-caret-in-package-json-76701e514445


what is "dev": true in package-lock.json
https://stackoverflow.com/questions/49809490/what-is-dev-true-in-package-lock-json-for#:~:text=So%20answering%20your%20first%20question,when%20running%20in%20production%20mode.
So answering your first question, "dev": true in package-lock.json means this dependency won't be
installed by npm install/npm ci when running in production mode.


python cors setting
#Local Host Setting
cors = CORS(app, origins="http://localhost:3000", supports_credentials=True)
#Dev Server Setting
#cors = CORS(app, origins="http://dev-server.com", supports_credentials=True)

Bypass CORS on localhost:

Chrome properties
Target
"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" --disable-web-security --user-data-dir="C:\Apps\Test"

Deprecated:
/deep/, >>> and ::ng-deep -> https://angular.io/guide/deprecations#deep--and-ng-deep-component-style-selectors



Browser Size Vs Screen Resolution
https://helpx.adobe.com/analytics/kb/comparing-browser-width-height-and-resolution.html


to center- vertically and horizontally: <div class="row h-100 justify-content-center align-items-center">

angular material icons: https://material.io/tools/icons/?style=baseline

To disable animations. Disables animations on mat-tab-group
<div class="row"  [@.disabled]="true" >
   <mat-tab-group style="width: 100%">


Proxy install on VM:
https://www.decalage.info/en/proxy_git_pip
regular command:pip install mod_wsgi
command behind company proxy server: pip install --proxy http://proxy-server.com:8080 mod_wsgi

Exporting Data to XLSX in Angular
https://blog.bitsrc.io/exporting-data-to-excel-in-angular-1d1194e8be29

primeng lts
https://primefaces.org/primeng/#/lts

Ivy Engine Vs View Engine- compiler & runtime -> html to js- default engine in Angular V9. starting v8 (not default).
https://dev.to/mquanit/the-future-of-angular-with-ivy-17d?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_319


***Learning Rank- Project Evaluation***

Misc:


Angular Elements


Web Components
  Re-usable components that you can embed in any front-end website-> Angular, React, Html page
  Base re-usable component (Web Component) can be created as an Angular Element or React Component wrapped/converted to be a Web Component



References:
   https://blog.bitsrc.io/using-angular-elements-why-and-how-part-1-35f7fd4f0457   (GOOOD!!)
   https://vaadin.com/learn/tutorials/using-web-components-in-angular

Did not use: https://angular.io/guide/elements




TODO

Modify Elements in DOM via typescript usinfg Renderer2 eg adding classes to a DOM element:
https://alligator.io/angular/using-renderer2/


Angular In-line Min-Max Validation - Shared Min Directive, Max Directive
https://www.concretepage.com/angular-2/angular-4-min-max-validation

custom directive - add input attribute:
https://malcoded.com/posts/angular-custom-directives/


PrimeNG 9.0.0 is here with first class Angular 9 and Ivy Support
hotmail: Feb 26, 2020

6 Concepts to Master to be an Angular Architect
https://blog.bitsrc.io/6-concepts-to-master-to-be-an-angular-architect-807314e31ef3

Top New Features of Angular 9
https://auth0.com/blog/angular-9-whats-new/
https://www.telerik.com/blogs/top-new-features-of-angular-9?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_321
https://www.infoq.com/news/2020/02/angular-9-ivy-rendering-engine/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_323


Entry components
https://angular.io/guide/entry-components

Angular 9 changes to Entry components
https://www.newline.co/@NishuGoel/bye-bye-entrycomponents--3f4bd4eb?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_330

RxJS Terms You MUST know in Angular
https://levelup.gitconnected.com/rxjs-terms-you-must-know-in-angular-8265309c8f94

6 Useful Angular Decorators
https://blog.bitsrc.io/6-useful-decorators-to-use-in-your-angular-projects-777e9b4c8c62

10 Tricks to Optimize Your Angular App
https://blog.bitsrc.io/10-tricks-to-optimize-your-angular-app-44208f616bf0

TakUntil- Unsubscribe
https://alligator.io/angular/takeuntil-rxjs-unsubscribe/



Angular: How to support IE11
https://dev.to/coly010/angular-how-to-support-ie11-4924?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_321

Push Notification with Angular & .Net Core using Firebase
https://itnext.io/push-notification-with-angular-net-core-a2280d18eda1

Deploying Angular & .Net Core Api to Azure
https://towardsdatascience.com/net-core-api-for-the-angular-tour-of-heroes-app-5895a36d2129

According to Stephen Fluin, developer relations lead at Google, about 90% of Angular applications are actually  behind the firewall.
https://sdtimes.com/webdev/angular-powers-business-apps-in-the-enterprise/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_319

Httpclient api calls:
https://levelup.gitconnected.com/the-correct-way-to-make-api-requests-in-an-angular-application-22a079fe8413

Typescript:
see email on Oct 29, 9:48am, 5 Popular TypeScript Features
install types for third party libraries that were created without static typing(eg javascript where types may not be declared) like arcgis
declaration files available from DefinitelyTyped: https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types

Kendo UI with Angular: https://www.telerik.com/blogs/getting-started-with-nx-in-angular?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_311

A thorough exploration of Angular Forms
https://dev.to/angular/a-thorough-exploration-of-angular-forms-21pi?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_322

Dynamically Load CSS:
https://juristr.com/blog/2019/08/dynamically-load-css-angular-cli/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_311

PErformance:
https://blog.angular.io/angular-tools-for-high-performance-6e10fb9a0f4a
10 Tricks to Optimize Your Angular App: https://blog.bitsrc.io/10-tricks-to-optimize-your-angular-app-44208f616bf0
https://blog.bitsrc.io/top-reasons-why-your-angular-app-is-slow-c36780a0a289
https://hackernoon.com/13-angular-app-optimization-tips-for-frontend-developers-z392329t?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_328

Error Handling: https://dev.to/angular/tracking-errors-in-angular-with-sentry-4oo0?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_310

animation:
animate js
https://threejs.org/examples/#webgl_animation_cloth

environment configuration(staging etc) + app_initializer
https://juristr.com/blog/2018/01/ng-app-runtime-config/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_309

ngSwitchCase, OR operator not working
https://stackoverflow.com/questions/43775796/angular-2-ngswitchcase-or-operator-not-working
https://github.com/angular/angular/issues/12174

My Top Favorite Tools for Angular Developers
https://blog.bitsrc.io/my-top-favorite-tools-for-angular-developers-c2ed96397f6b
Angular Playground, Stackblitz

angular currency pipe:
https://www.angularjswiki.com/angular/angular-currency-pipe-formatting-currency-in-angular/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_322

https://blog.angularindepth.com/use-cases-ng-content-83127165a95f
https://www.c-sharpcorner.com/article/create-simple-chips-in-angular-without-material-design/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_313
https://alligator.io/angular/infinite-scroll/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_313

JSON.stringify
https://javascript.info/json

Implement Google Sign-In(OAuth) in your Angular App in under 15 minutes
https://dev.to/angular/implement-google-sign-in-oauth-in-your-angular-app-in-under-15-minutes-1ebo?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_328

angular lifecycle hooks: https://itnext.io/understanding-angular-life-cycle-hooks-91616f8946e3
using webcomponents- bw angular & react: https://blog.angularindepth.com/how-to-talk-with-web-components-in-react-and-angular-8deb7d2fb92a
https://blog.bitsrc.io/the-principles-for-writing-awesome-angular-components-10e45f9ae77e
https://blog.bitsrc.io/how-to-write-better-components-in-angular-7dd0721b56fb
https://medium.com/@michal.a.ptaszek/ngfor-hidden-powers-can-the-input-setters-be-replaced-with-the-ngfor-directive-in-angular-f56b945e9622
https://www.zeptobook.com/angular-best-practices-for-building-single-page-application/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_303
Detect Responsive Screen Sizes
https://scotch.io/tutorials/detect-responsive-screen-sizes-in-angular?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_305

Deploy an Angular application on AWS using serverless
https://itnext.io/deploy-an-angular-application-on-aws-using-serverless-5e099a851e92


Create a Valid SSL in Localhost for Angular Applications
https://levelup.gitconnected.com/create-a-valid-ssl-in-localhost-for-angular-applications-ed05054ec2e7

7 ways to use http interceptors (authorization, logging) - intercept requests to web server or responses from web server
https://blog.bitsrc.io/7-ways-to-leverage-httpinterceptors-in-angular-59436611844d
1) Header Modification
2) Request body modification
3) HttpRequest body
4) Authentication/Authorization <------ jwt token example
5) Backend Mock
6) Caching
7) Logging                      <------


Getting started with Http and Observable Service In Angular
https://codesource.io/getting-started-with-http-and-observable-service-in-angular/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_326

Angular 8:
https://www.newline.co/@kievsash/mastering-angular-8:-five-things-that-are-good-to-know-to-save-your-time.--6302e8aa?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_315
https://dev.to/decipherzonesoft/top-features-of-angular-8-what-s-new-9a6?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_311
https://www.c-sharpcorner.com/article/angular-8-0-whats-new-and-how-to-upgrade/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_308
https://www.youtube.com/watch?v=5_IC_ZJrVMg
https://blog.angularindepth.com/embrace-yourself-angular-8-is-coming-1bf187c8f0bf
https://alligator.io/angular/angular-8/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_304
?? https://www.loom.com/share/d25724f20ee44dd1b572a0a2e96e8280?inf_contact_key=4cb6ea7d3c9d610a2698e60e7b030f65d18a532c4142cb79caf2b269de1401fa
https://www.techiediaries.com/angular-features/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_317

Routing:
https://medium.com/@tomastrajan/how-to-get-route-path-parameters-in-non-routed-angular-components-32fc90d9cb52

Authentication:
chsakell - email details - hotmail - Sun 7/28/2019 9:24 AM - OAuth 2.0
https://chsakell.com/2019/03/11/asp-net-core-identity-series-oauth-2-0-openid-connect-identityserver/

https://fullstackmark.com/post/13/jwt-authentication-with-aspnet-core-2-web-api-angular-5-net-core-identity-and-facebook-login?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_236
https://www.c-sharpcorner.com/article/angular-4-authentication-with-auth0/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_208
https://medium.com/@blacksonic86/angular-2-authentication-revisited-611bf7373bf9
https://dzone.com/articles/building-and-securing-koa-and-angular-2-with-jwt?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_185
https://medium.com/@blacksonic86/authentication-in-angular-2-958052c64492
https://medium.com/@ozgurgul/angular-6-login-and-router-tutorial-ac5fc5d3027f
http://jasonwatmore.com/post/2018/10/29/angular-7-user-registration-and-login-example-tutorial?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_277
http://www.gistia.com/authentication-in-angular-with-ngrx-part-i/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_272
https://www.baeldung.com/spring-security-login-angular?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_268

TensorFlow.js & Angular
https://rubikscode.net/2019/09/09/integration-of-tensorflow-model-into-angular-application/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_312

Other:
Angular Project Setup:
https://www.telerik.com/blogs/a-practical-guide-to-angular-environment-and-project-setup?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_312
https://dev.to/angular/angular-environment-setup-safe-testable-33c0?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_318
PReloading lazy routes: https://juristr.com/blog/2019/08/ngperf-preloading-lazy-routes/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_312
Angular Dependency Injection: https://codeburst.io/angular-dependency-injection-tips-ddb24b8244be

https://itnext.io/angular-search-pagination-41572ef0078f
https://blog.angularindepth.com/fastest-way-to-cache-for-lazy-developers-angular-with-rxjs-444a198ed6a6
https://blog.nrwl.io/building-angular-and-react-applications-together-with-nx-78b5578de598
https://blog.usejournal.com/lessons-from-building-large-angular-apps-managing-subscriptions-fe3aca839e35
https://www.bennadel.com/blog/3579-using-pure-pipes-to-generate-ngfor-trackby-identity-functions-in-angular-7-2-7.htm?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_296
https://medium.freecodecamp.org/how-to-get-the-best-performance-out-of-your-angular-apps-d5132a6c3335
https://www.bennadel.com/blog/3579-using-pure-pipes-to-generate-ngfor-trackby-identity-functions-in-angular-7-2-7.htm?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_296

https://www.talkingdotnet.com/7-simple-hacks-supercharge-web-applications-angular-7/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_287
https://blog.angularindepth.com/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0
https://blog.angularindepth.com/when-to-subscribe-a83332ae053
https://blog.angularindepth.com/debug-angular-apps-in-production-without-revealing-source-maps-ab4a235edd85
https://netbasal.com/spend-your-xmas-break-catching-up-on-the-hottest-trends-in-angular-a09c0f2b0303
https://malcoded.com/posts/angular-best-of-2018?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_285
https://blog.angularindepth.com/5-tips-to-improve-user-experience-of-your-angular-app-with-ngrx-6e849ca99529
https://dev.to/eyassh/data-and-page-content-refresh-patterns-in-angular-434i?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_284
https://blog.angularindepth.com/new-in-angular-v7-1-updates-to-the-router-fd67d526ad05
https://vitaliy-bobrov.github.io/blog/angular-smart-404-page/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_283
https://codeburst.io/getting-started-with-angular-7-and-bootstrap-4-styling-6011b206080
https://blog.angularindepth.com/keeping-browser-tabs-in-sync-using-localstorage-ngrx-and-rxjs-87de3bca4e2c
https://developer.okta.com/blog/2018/11/30/web-app-with-express-angular-graphql?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_282
https://itnext.io/how-to-optimize-angular-applications-99bfab0f0b7c
https://www.c-sharpcorner.com/article/how-to-use-service-in-angular/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_281
https://dzone.com/articles/developing-pwa-using-angular-7?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_281
https://blog.angularindepth.com/building-interactive-lists-with-the-new-angular-7-drag-and-drop-tool-5f2402f8cb27
https://medium.com/@blacksonic86/authentication-in-angular-2-958052c64492
https://www.bennadel.com/blog/3529-understanding-the-limitations-of-template-syntax-desugaring-in-angular-7-0-4.htm?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_280
https://dzone.com/articles/content-projection-in-angular-element-with-slot-in?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_278
https://www.telerik.com/blogs/diving-into-the-kendo-ui-grid-with-angular?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_278
https://www.infoq.com/news/2018/11/angular-7?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_277
https://blog.bitsrc.io/understanding-change-detection-strategies-in-angular-d4ca7744085a
http://jasonwatmore.com/post/2018/10/29/angular-7-user-registration-and-login-example-tutorial?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_277
https://alligator.io/angular/angular-7/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_276
https://blog.angularindepth.com/angular-question-rxjs-subscribe-vs-async-pipe-in-component-templates-c956c8c0c794
https://itnext.io/3-common-mistakes-when-using-angular-ngrx-firebase-9de4e241d866
https://netbasal.com/why-its-important-to-unsubscribe-from-rxjs-subscription-a7a6455d6a02
https://theinfogrid.com/tech/developers/angular/role-based-authorization-in-angular-route-guards/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_273
http://www.gistia.com/authentication-in-angular-with-ngrx-part-ii/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_273
https://codeburst.io/smart-tables-with-angular-131bde34f1d9
https://www.c-sharpcorner.com/article/angular-material-part-one/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_272
https://theinfogrid.com/tech/developers/angular/ngfor-working-large-lists-angular/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_271
https://medium.com/ag-grid/get-started-with-angular-grid-in-5-minutes-83bbb14fac93
https://scotch.io/bar-talk/game-changing-features-of-angular-v6?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_267
https://blog.angularindepth.com/boosting-performance-of-angular-applications-with-manual-change-detection-42cb396110fb
https://medium.com/grano/optimizing-angular-application-load-performance-6bb796b1a7c1
https://blog.bitsrc.io/boosting-angular-app-performance-with-local-change-detection-8a6a3afa8d4d
https://netbasal.com/rxjs-eight-operators-worth-getting-to-know-2b6c18e601d
https://www.angularjswiki.com/angular/what-is-the-difference-between-constructor-and-ngoninit-in-angular/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_261
https://dzone.com/articles/4-common-bugs-in-angular-and-how-to-fix-them?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_260
https://auth0.com/blog/real-time-charts-using-angular-d3-and-socket-io/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_257

NGRX- https://blog.angularindepth.com/how-to-start-flying-with-angular-and-ngrx-b18e84d444aa

https://www.djamware.com/post/5d8d7fc10daa6c77eed3b2f2/angular-8-tutorial-rest-api-and-httpclient-examples?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_314

angular material dark theme
https://www.materialpalette.com/
https://github.com/angular/material2/blob/master/src/lib/core/theming/_palette.scss
https://material.io/design/color/the-color-system.html#color-theme-creation
https://material.angular.io/guide/theming
https://github.com/tomastrajan/angular-ngrx-material-starter/blob/master/src/themes/black-theme.scss
https://medium.com/covalent-ui/angular-material-2-theme-tutorial-2f7e6c344006
https://medium.com/wineofbits/how-to-change-angular-material-theme-in-just-5-minutes-d8719d1f026
https://www.google.com/search?rlz=1C1GCEV_en&biw=1280&bih=578&tbm=isch&sa=1&ei=krSBXOiZB5HatAXa-p6ABg&q=mat-dark-theme+angular+material&oq=mat-dark-theme+angular+material&gs_l=img.3...5125.11677..11827...4.0..1.847.1862.15j6-1......1....1..gws-wiz-img.......0i24.kaWbe52MP8I#imgrc=Hn4fhMV3Z7yiMM:
https://medium.com/@tomastrajan/the-complete-guide-to-angular-material-themes-4d165a9d24d1
https://tomastrajan.github.io/angular-ngrx-material-starter#/settings


-----------------------------------------------------Javascript/Typescript----------------------------------------------------------

Javascript Style Guide: https://github.com/airbnb/javascript

javascript/typescript (Pass by Value Vs Pass by Reference)

https://daveceddia.com/javascript-references/?ck_subscriber_id=28911398
https://dzone.com/articles/angular-components-pass-by-reference-or-pass-by-va

primitive types like string, number, boolean -> pass by value
*****objects &  arrays -> pass by reference (can change original object)**************
to input decorators in components Or assigning an array

@Input() data: any;   (if object or array passed - then passed by reference- can be modified)

oldarray: string[]    (array is passed by reference)
newarray = oldarray;
newarray[1] = 2 -> modifies oldarray


false value => could be '', 0, null or undefined

Angular Material reference:
https://www.concretepage.com/angular-material/angular-material-slide-toggle#change

template form validation
https://angular.io/guide/form-validation

Angular  - Html Template - null-safe operator available - '?.'
In Component.ts-> this is available starting typescript 3.7  '?.'

Typescript Null Coalescing operator in Typescript available starting typescript 3.7- ??  - Currently using typescript 3.1
let x = foo ?? bar();
this is a new way to say that the value foo will be used when it s  present ; but when it s null or undefined, calculate bar() in its place.
https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing

Javascript Null Coalescing operator - ?? - JS ES2020 - Upcoming- not yet-- soon
The nullish coalescing operator returns the results of the right hand-side expression if the left hand-side expression is either null or undefined.


JS ES2020 Features: https://medium.com/javascript-in-plain-english/new-features-in-es2020-you-should-check-b4974d9d7edc
globalThis
Promise.allSettled()
null coalesce operator- ?? (typescript already has it)
option chaining - '?.'


JSON.stringify (convert object to json notation)

export class PtParam {
	input_attrs: PtData;
	loadJson: boolean;
}

export class PtData {
	prospects: any[];		   // array of key/value Pt Data
	excludedFs: string[];  // applies to all Prospects
}

/* Sample Equivalent Json accomplished via JSON.stringify(PtParam)
{
	"input_attrs":
                            {
                                "prospects": [
                                                {"Name": "pt 1 name", "Radius":30,   },
                                                {"Name": "pt 2 name", "Radius":40,  }
                                            ],
                                "excludedFs":["Field 1", "Field 2"]
                            },
	"loadJson":true
}
*/

DevExtreme Angular Template:
https://github.com/DevExpress/devextreme-angular-template

--------------------------------------------------------------ScrollBar-----------------------------------


scroll - background-color: #191c28; (should be card color)
scroll color: #5d617c

.scrollbar {
  width: 4px;
  height: 112px;
  border-radius: 2.7px;
  background-color: var(--slate-grey);
}


Scrollbar

Reference urls:
https://scotch.io/tutorials/customize-the-browsers-scrollbar-with-css
https://codepen.io/akinjide/pen/BpggrZ
https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_custom_scrollbar2
https://www.quackit.com/css/css_scrollbars.cfm
https://www.quackit.com/html/html_editors/scratchpad/?example=/css/css_scrollbars_webkit
https://www.quackit.com/html/codes/html_scrollbars.cfm
https://www.quackit.com/html/html_editors/scratchpad/?example=/html/codes/html_scrollbars_webkit_thin_green_shadow_inset_rounded_corners
https://css-tricks.com/the-current-state-of-styling-scrollbars/
https://codepen.io/team/css-tricks/pen/QWWXQzE
https://medium.com/spemer/customize-websites-scrollbar-with-css-270ca436d6c1
https://webdesign.tutsplus.com/articles/quick-tip-styling-scrollbars-to-match-your-ui-design--webdesign-9430
https://deliciousthemes.com/customize-browser-scrollbars-using-css3-jquery/


::-webkit-scrollbar the background of the bar itself.
::-webkit-scrollbar-button the directional buttons on the scrollbar.
::-webkit-scrollbar-track the empty space  below  the progress bar.
::-webkit-scrollbar-track-piece the top-most layer of the the progress bar not covered by the thumb.
::-webkit-scrollbar-thumb the draggable scrolling element resizes depending on the size of the scrollable element.
::-webkit-scrollbar-corner the bottom corner of the scrollable element, where two scrollbar meet.
::-webkit-resizer the draggable resizing handle that appears above the scrollbar-corner at the bottom corner of some elements.


#style-2::-webkit-scrollbar {
	width: 12px;
	background-color: #F5F5F5;
}

#style-1::-webkit-scrollbar-thumb {
	border-radius: 10px;
	-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
	background-color: #555;
}











----------------------------------------------------------ScrollBar End-----------------------------------------------------



***Importing/Exporting CSV files***
https://github.com/hjalmers/angular-generic-table
https://github.com/javiertelioz/angular2-csv
	---> forked --> https://github.com/alexcaza/export-to-csv
	---> forked --> https://github.com/alhazmy13/angular-csv
https://github.com/alberthaff/ngx-papaparse  https://www.papaparse.com/
  https://alberthaff.dk/projects/ngx-papaparse/docs/v3/introduction

https://github.com/SheetJS/js-xlsx
https://github.com/mrodrig/json-2-csv


Angular Udemy Courses
1) NGRX - Section 24
2) Offline Capabilities - Section 27

Apress book ng-6 changes
SportsStore ng-6

Apress book ng-7 changes
SportsStore ng-7



Login/Logout Example:
 https://loiane.com/2017/08/angular-hide-navbar-login-page/ ( 2 ways)
 http://www.dotnetmob.com/angular-5-tutorial/angular-5-login-and-logout-with-web-api-using-token-based-authentication/

Angular Top 50: What you should have read in 2017
https://malcoded.com/posts/angular-top-2017?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_231



TODOOOOOOOO:

Search google & youtube:
"azure pipelines ci/cd angular example"  <--- 1st
"azure pipelines ci/cd"



---------------------------------------------------------------GIT------------------------------------------------------------

Git pull is actually a Git fetch followed by an additional action(s) typically a Git merge.
https://www.gitkraken.com/learn/git/problems/git-pull-vs-fetch
in VS clicking on the refresh button just does a fetch

Switch to Develop branch in VS Code. Do a git pull



Start out with only main and dev branches.  feature-branch, release branch


Git command reference: https://learn.microsoft.com/en-us/azure/devops/repos/git/command-prompt?view=azure-devops


How to resolve Azure Devops PR Merge Conflicts

Get latest of both main and other branches

git status

--> Merge Main to Feature Branch  (have merge conflict. Same File modified both branches)

In VSCode Terminal

refresh "main" branch under "remotes" in VS code
refresh "main" branch under "branches" in VS code

git checkout feature-branch
git merge main                     (merges main branch to feature-branch)

git add .                          (stages files)
git commit -m "fixed merge issues" (commit file)
git push                           (pushes feature-branch back to server)


Create Pull request on Azure Devops to merge Feature Branch back to Main



resolving merge conflicts:
https://www.youtube.com/watch?v=kBIMGOxqqnk

TODO:

list files local and remote

Git Fundamentals:
done..  Git Fundamentals:https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m0&clip=0&mode=live
        How Git Works:    https://app.pluralsight.com/library/courses/how-git-works/table-of-contents
        Advanced Git Tips and Tricks:    (Branching) https://app.pluralsight.com/library/courses/git-advanced-tips-tricks/table-of-contents,
				   (Branching) https://app.pluralsight.com/library/courses/advanced-git/table-of-contents

Git for Visual Studio:
       https://app.pluralsight.com/library/courses/git-visual-studio-developers/table-of-contents
       https://www.visualstudio.com/en-us/docs/git/overview


git cheatsheet/reference:
https://git-scm.com/docs
https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf
https://scotch.io/bar-talk/git-cheat-sheet
https://www.git-tower.com/blog/git-cheat-sheet/

-------------------------



git status (to check status)
git log (view history)


git add -u     -  Stage modified and deleted files (not new)  -   git add file1.txt
git commit -m "Updated Read Me.txt"

view change between 2 commits
commit a-> a15ec67b...
commit b-> dd68199d...
git diff dd6819..a15ec6

'HEAD' pointer pointing to master or your branch  <-- https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell

HEAD  <----
HEAD~1 <---

git diff HEAD~1..HEAD (same as above)- difference  OR
git diff HEAD~1..


rm file2.txt (regular os system commands)
git status

git delete local and remote branches
$ git branch -d <branch_name>        (local)
$ git push -d origin <branch_name>   (remote)


------------------------------command reference----------------------------------------
https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m1&clip=8&mode=live

HEAD
You can think of the HEAD as the "current branch". When you switch branches with git checkout, the HEAD revision changes to point
to the tip of the new branch.

You can see what HEAD points to by doing:
cat .git/HEAD

PS C:\Users\z49DXL\Documents\SunocoPortal\UI> cat .git/HEAD
ref: refs/heads/UI-Bug-Fixes-Dan   (Head pointing to Local Branch)


git branch -a  (show both local and remote branches)
git status (to check status)
git log (view commit history- local repo)

git checkout BranchA -> Switches to BranchA as the working tree branch

Create Branch
git checkout -b Name  (-b creates a new branch from local branch and switches to that branch)
Vs <=> same as
git branch Name
git checkout Name

***Process for Merging LocalBranch to RemoteBranch>Origin/Master***
git pull origin master (merge remote/origin master with Local Repository)  (check status- git status or git pull origin master again)
resolve merge issues ***$TODO....
git push (push back Local Repository to Remote Respository)
create pull request while on branch (vs online) - set auto complete
pull request will [merge my LocalBranch/Dan_UI_Changes with RemoteBranch/remotes/origin/master]
after approve, complete

*** git fetch, git merge => git pull (pull from remote) ***

				   ---Pull-->
				   <--Push---
Local Branch & Remote Respository              Local Repository (VS Code). Stage/Unstage/Discard
  master
  Dan_UI_Changes  			       Dan_UI_Changes


Remote Branch
  remotes/origin/master
  remotes/origin/Dan_UI_Changes


Pluralsight course: Git Fundamentals
https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m2&clip=10&mode=live


Merge Changes and Check in
Stage changes
commit
push

git add .
git commit -m "fixed merge issues"
git push


1) Working with local repository--(Stage, Unstage, Discard changes)

local repository UI
   git add -A                          Stage Changes. put in working copy- (add changes from all tracked and untracked files)
   git reset HEAD                      Unstage Changes  (HEAD pointing to current branch)
   git reset --hard                    Discard Unstaged Changes
   git reset --soft HEAD~1             not used often - (undo last commit to local Repository and show in staged changes)
   git reset --hard HEAD~1             not used often - (rollback last commit)
   git commit -m "Updated Read Me.txt"  Commit all staged changes

remote repository UI
   git push   (push local to remote repository)
   git pull   (pull from remote to local repository)

2) Working with remote repository-- (Push, Pull...)

   git log   (view commits)
   git log --oneline  (view commits - 1 line)
   git log --oneline --graph  (show branches and merges)
   git log --oneline --graph -all --decorate  (details - show branches and merges)

   git remote (where source came from)
   git remote -v (push and fetch urls)

   git branch    (show local branches)
   git branch -r (show remote branches)
   git branch -a (show both local and remote branches)

   git fetch, git merge => git pull (pull from remote)

tags to setup stable build points(like beta etc)
   git tag       (how tags)
   git tag v1.0   (tag a branch. last commit)
   git tag -a v1.0_with_message  (tag with message)
   git tag -s v1.0_with message (signing a tag, with password)

3) Local/Remote Branches, Merging and Rebasing

   Stash Changes that you may not want to commit right now but save for later

   Delete Branch
   git branch -d branchA
   git branch -D branchA

   Stashing Changes (half thought ideas - not ready to stage changes...
		    like shelveset. holding area for pending changes- only difference is that pending changes are rolled back in stashing
		    unlike shelveset)
   git stash   (to apply)
   git stash apply (to reapply)

   Rebasing(not used often)
   changes made in feature branch replay in master branch as if changes were made there



   git show HEAD  (last changes to HEAD)

TODO--
How Git Works:    https://app.pluralsight.com/library/courses/how-git-works/table-of-contents


somearray[
  { prop1:'sdsdf', prop2:'wwe'},
  { prop1:'gdgrf', prop2:'qed'}
]

observable.pluck can be used to extract array of prop1

Observable.from(array).pluck('PropToExtract').distinct((t: typeA) => {return t.id} )
			.subscribe((otypeA: typeA) => {
				this.someobj.push(otypeA:);
			});


------------------------------------------------------VSTS-------------------------------------------------------------------
VSTS -

youtube:

"vsts pipeline build tutorial angular 4"
"vsts pipeline build tutorial angular 2"
"vsts pipeline tutorial angular 2"
"vsts pipeline tutorial angular 4"
"vsts pipeline release tutorial angular 2"


Pipeline

  Builds

  Releases

CI/CD (Continuous Integration/Continuous Development)

Tags - Dev Release

Links:
https://www.youtube.com/watch?v=rjkCjPhznvc
https://johnpapa.net/deploy-angular-to-azure-vsts-angular-cli/
https://itnext.io/easy-way-to-deploy-a-angular-5-application-to-azure-web-app-using-vsts-pipelines-4a288b9deae1
https://medium.com/@flu.lund/setting-up-a-ci-pipeline-for-deploying-your-angular-application-to-azure-using-visual-studio-team-f686c8f190cf
https://www.youtube.com/watch?v=9NT_dG_0qLo


VSTS Build:


VSTS Release:



https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-and-publish-build-artifacts?view=azure-devops


ConceptSelection_UI\dist\Concept-Selection


--------------------------------------------------------------------------------------------------------------------------

Charts Charting:
D3, Highcharts


primeng 7.0 releases: https://www.primefaces.org/primeng-7-0-0-released/

ng serve --port 3000 --open

angular cli- dev, qa, prod:
https://theinfogrid.com/tech/developers/angular/environment-variables-angular/

ng serve --port 3000 --open (for localhost)
ng build --configuration=dev (for dev server)
ng build --configuration=uat
ng build --configuration=prod

Upgrading laptop to Angular 7 (different than upgrading project)
-download and install nodejs v10(previousl ver 8) from website (nodejs installs npm)
  node -v
  v10.14.1

-update npm to 6.5 (from 6.4) via  npm install npm@latest -g
  6.5.0

-upgrade angular cli to latest globally
npm uninstall -g @angular/cli
npm cache clean or npm cache verify (if npm > 5)
npm install -g @angular/cli@latest   <-----

npm install -g @angular/cli@7.1.2

ng --version
angular cli: 7.1.2
node: 10
rxjs: 6.3.3
typescript: 3.1.6


Update Guide:
https://update.angular.io/
https://alligator.io/angular/angular-7/

Angular 7 Dependencies
                      Current       Recommended      Personal laptop
node	                v8.11        v8.x or v10.x     v10
npm			v6.4         v6               v6.5
angular cli             v6.1         v7.1             v7.1
typescript              v2.9.2       v3.1.6           v3.1.6
Rxjs                    v6.3.2       v6.3.3           v6.3.3

delete
remove directory recursively:  rmdir c:\test /s /q

**Checl Angular 7 compatibility**
angular material--      v6.4.7       v7.1.1          project specific- upgrade or install
use on existing project level to upgrade-> ng up
v7.1.1 of angular material should be compatible

Copy "FindAll" existing folder. Upgrade that copy and all dependencies. Test- verify primeng compatibility
Upgrade that copy: UPdate guide. run from project folder
ng update @angular/cli @angular/core

***install from outside company network***

dont do---->ng update @angular/material
uninstall version 7.2.0
npm uninstall @angular/material
npm uninstall @angular/cdk
install version 7.1.0
npm install @angular/material@7.1.0
npm install @angular/cdk@7.1.0

"primeflex": "1.0.0-rc.1"

run 'npm audit' to check for package issues

$TODO-------> Check which version compatible with Angular 7 and test to see if any issues
'npm update'  (to update all packages eg lodash, moment etc)
codelyzer  --> leave to version 4.2.1
ng update --save codelyzer@latest  ( Package "@angular/compiler-cli" has an incompatible peer dependency to "typescript" (requires ">=3.1.1 <3.2", would install "3.2.2").)

ng bootstrap  --->  ng update --save @ng-bootstrap/ng-bootstrap@latest     -- 4.0.1
lodash   --> 4.17.11
moment   --> 2.23.0
toastr   --> keep 'as is' - 2.1.4
jquery   --> keep 'as is'  "^3.3.1
primeng
uninstall version 6.1
npm uninstall primeng --save
npm install primeng@7.0.0 --save


--------------------------------------------------------

Angular Material New Features CDK-
Drag and Drop etc
https://material.angular.io/cdk/drag-drop/overview

Angular: JWT token Authentication
https://medium.com/@blacksonic86/authentication-in-angular-2-958052c64492

Test Website on large desktops:
http://quirktools.com/screenfly/#u=http%3A//localhost%3A3000/geo-reference&w=1440&h=900&a=1


Pro Angular 6 - Apress
Source code for Angular 6: https://github.com/Apress/pro-angular-6
Source code and Update for Angular 7 (Go over ReadMe file on the link): https://github.com/Apress/pro-angular-6/tree/master/Update%20for%20Angular%207

Update for Angular 5: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%205
Angular 2: https://github.com/Apress/pro-angular-2ed


ng serve --port 3000 --open

ng build --prod --base-href /Findall/
cd dist
ng serve --prod

install URL Rewrite Module on IIS: https://www.microsoft.com/en-us/download/details.aspx?id=47337
https://blog.angularindepth.com/deploy-an-angular-application-to-iis-60a0897742e7


ng serve --host 0.0.0.0 --port 3000
Open your browser and then go to this address: http://localhost:3000

C:\Users\Dan>node -v
v8.11.4

C:\Users\Dan>npm -v
6.4.0

C:\Users\Dan>npm install -g npm@6.4.0
C:\Users\Dan\AppData\Roaming\npm\npx -> C:\Users\Dan\AppData\Roaming\npm\node_modules\npm\bin\npx-cli.js
C:\Users\Dan\AppData\Roaming\npm\npm -> C:\Users\Dan\AppData\Roaming\npm\node_modules\npm\bin\npm-cli.js
+ npm@6.4.0
added 391 packages in 22.087s

C:\Users\Dan>npm -v
6.4.0

2 version updates per year

April 2018    : Angular 6
October 2018  : Angular 7  <---upgrade
April 2019    : Angular 8
October 2019  : Angular 9

Optimizing Angular Applications
https://itnext.io/how-to-optimize-angular-applications-99bfab0f0b7c

When to Unsubscribe in Angular
https://netbasal.com/when-to-unsubscribe-in-angular-d61c6b21bad3

Role Based Authorization in Angular   Route Guards
https://theinfogrid.com/tech/developers/angular/role-based-authorization-in-angular-route-guards/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_273

Keeping browser tabs in sync using localStorage, NgRx, and RxJS
https://blog.angularindepth.com/keeping-browser-tabs-in-sync-using-localstorage-ngrx-and-rxjs-87de3bca4e2c

************Angular 7 New Features****************
Official Blog:
https://blog.angular.io/version-7-of-angular-cli-prompts-virtual-scroll-drag-and-drop-and-more-c594e22e7b8c
https://appdividend.com/2018/10/22/angular-7-features-and-updates/

1) Virtual Scrolling - > Next time you have a potentially large list of items for your users to scroll, stick it in a cdk-virtual-scroll-viewport
2) Drag and Drop ->



C:\Users\Dan>npm install -g @angular/cli@6.1.4

user settings

attribution open source- home page

https://www.quora.com/When-I-use-open-source-JavaScript-code-for-my-website-do-I-have-to-put-credits-only-in-the-js-file-or-also-at-the-bottom-of-my-website

  <!-- This application uses Open Source components such as Angular, Angular Material, Bootstrap, PrimeNg, Jquery. You can find the source code of their open source projects along with license information below. We acknowledge and are grateful to these developers for their contributions to open source.
		https://github.com/angular/angular
		https://github.com/angular/material2
		https://github.com/twbs/bootstrap
		https://github.com/primefaces/primeng
		https://github.com/jquery/jquery
   -->

node
{
	"workbench.sideBar.location": "right",
    "window.zoomLevel": 0,
    "files.exclude": {
        "**/*.js": true,
        "**/*.js.map": true
    },
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": false,
	"editor.renderIndentGuides": false,
    "extensions.autoUpdate": false,
    "editor.insertSpaces": false,
	"editor.detectIndentation": false,
	"typescript.check.tscVersion": false,
	"vsicons.presets.angular": true,
	"team.showWelcomeMessage": false,
	"workbench.statusBar.visible": true,
	"workbench.activityBar.visible": true,
	"editor.renderWhitespace": "none",
	"editor.renderControlCharacters": false,
	"files.trimTrailingWhitespace": true,
	"workbench.colorTheme": "Default Light+",
	"gitlens.keymap": "alternate",
	"gitlens.advanced.messages": {
		"suppressShowKeyBindingsNotice": true
	},
}

Variable hoisting applies to both var and let
for 'var', declaration is moved to top of function (hiding another global variable of the same name). for 'let'
declaration is moved to top of block scope-curly braces (not function)


Add "debugger;" line to debug in chrome console. Will automatically hit. to debug subscription issues (if unsubscribe needed) takeuntil(unsub)
Last Event: {{ object | json }}


VS Code- Include/Exclue: **/*shipent*.html

postman - trial
make api calls for testing

api linq sql output:  Output>Debug window

*************TODO Apress NG 5 Updates:  https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%205*************

official ng 5 changes:  https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced
ng 5 changes:  https://auth0.com/blog/whats-new-in-angular5/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_227
ng 5 Forms Update: https://codingthesmartway.com/angular5-forms-update/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_227

Udemy Angular courses: https://www.udemy.com/angular-4-front-to-back/

ng-5- use *ngFor in regular html... use [ngForOf] with <ng-template>

Highlights Ng 5
 - Use HttpClient instead of Http  (https://angular.io/guide/http)
 - Use NgForOf instead of NgFor  (confirm Jordan! use in html vs with <template  ngfor)  ( in html can still use *ngFor ?- only in <template tags make use of NgforOf  -?? official blog didnt say anything
 - Number, Date, Currency Pipes updated (https://github.com/angular/angular/blob/master/CHANGELOG.md#i18n-pipes)
 - Faster compilation - use "ng serve --aot" instead of just "ng serve" as below- ahead of time compilation - https://auth0.com/blog/whats-new-in-angular5/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_227
   will become default in angular-cli (--aot) - must tryout!

npm issues: https://github.com/npm/npm/issues/13528

change directory to package directory (under which we have node_modules)
delete package-lock.json
delete node_modules
npm install

run 'npm audit' to check for package issues

Error:
git pull origin master

 * branch                master     -> FETCH_HEAD
error: The following untracked working tree files would be overwritten by merge:
        package-lock.json
Please move or remove them before you merge.
Aborting
Resolution: delete package-lock.json. do a git pull origin master followed by npm install

Angular 2 UI Libraries: https://blog.bitsrc.io/11-angular-component-libraries-you-should-know-in-2018-e9f9c9d544ff

ng serve --env=local --live-reload false   (plus dont save to avoid recompiling)

ng serve --aot --env=local --live-reload false (in ng 5)-- assuming TypeScript 2.3

ng serve  --env=local
ng serve --open --env=local

- ng lint  (run from UI folder. not UI/src)
- npm run build --prod

git pull origin master (to get)- merge and
git push (to push)

git pull origin master
git merge origin master (in command prompt after closing vs code)
open VS to see conflicts if any

Delete Branch (either way works)
First Delete Local git Branch
then Delete Remote git Branch

delete folder and get latest
-delete folders
-git status
-git reset --hard
-npm install

view git history even after merge: git log -m --oneline --full-history --follow [filepathincludingname]
view file changes in a commit: git show [commit#]


git reset --hard
git clean -f -d

per jrdn) - get latest branches
git fetch --all


to clean up local branches ( per jrdn) - get latest branches
git fetch --all --prune

git status
git pull origin xxx  (pull and merge origin/xxx branch with your local repository)
git push xxx (push to your remote repository/local branch )
git checkout -b bug-fixes-ui-sep-5
publish branch(VS Code) Or push branch(VS)

Visual Team Services = origin = server
git push origin branchname (same as 'git push branchname' )
git pull origin branchname  (to pull branchname from the server/origin)

C# code execute online: https://dotnetfiddle.net


Resources Functions: Array, Lodash, RXJS
Arrays: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
Lodash: https://lodash.com/docs/4.17.4#find
Rxjs:
   https://www.learnrxjs.io/operators/transformation/mergemap.html
   http://reactivex.io/rxjs/manual/overview.html#transformation-operators
   https://angular-2-training-book.rangle.io/handout/observables/observables_array_operations.html
   https://www.learnrxjs.io/operators/multicasting/share.html
   http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/share.html
   https://github.com/Reactive-Extensions/RxJS/tree/master/doc
   http://reactivex.io/rxjs/manual/overview.html#transformation-operators
   https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators


odata- $top=15 appends order by 'primary key asc'

By default, git push expands to git push origin <current-branch>
https://stackoverflow.com/questions/29021008/does-git-push-expand-to-git-push-origin-master

git merge origin/incentive_request_ui  -- git pull should prompt for merge

Rollback Commit
Visual Studio:
 -View History on Branch
 -Assuming Rolling back last commit. Rigth click, 2nd last commit, create new branch from. A new branch will be created without that last commit
 -push this new branch to server
 -delete the other branch

@Inject(NG_VALIDATORS)
Code: https://github.com/clbond/form-example
Documentation: http://blog.rangle.io/angular-2-ngmodel-and-custom-form-components/


default push/pull to origin/server

ng serve --open --env=local

Expand:  Ctrl + K, Ctrl + J
Collapse: Ctrl + K, Ctrl + 0


RXJS:
  https://www.learnrxjs.io/operators/transformation/mergemap.html
  http://reactivex.io/rxjs/manual/overview.html#transformation-operators
  https://angular-2-training-book.rangle.io/handout/observables/observables_array_operations.html
  https://www.learnrxjs.io/operators/multicasting/share.html
  http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/share.html
  https://github.com/Reactive-Extensions/RxJS/tree/master/doc
  http://reactivex.io/rxjs/manual/overview.html#transformation-operators

Lodash (array + obj + JS language features):
  https://lodash.com/docs/4.17.4#find

Array functions:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find

VsCode- john papa course
1) Ctrl + Shift + P => Command Pallette
2) Command pallette- "@:" to see all functions, properties by category
3) In command pallete - remove everything, type filename and click enter, open up 3 panes side by side and navigate backa nd forth
4) Ctrl + 1 to open 1 window
   Ctrl + 2 to open 2nd window
   Ctrl + 3 to open 3rd window
   Ctrl + W on the active window to close that window
   open command pallette and type filename for file you want to open

5) update variable name in a file. multiple places
   multi-cursor
   highlight plus Ctrl + F2    (left arrow to rename part of it)

6) prefix multiple lines with the same word/phrase
   Alt plus click on each line
   then enter text

   (can also extract 1 column). multi-cursor . shift + right arraw. plus copy and then paste

7) delete content from multiple lines starting at the same place
highlight + [Ctrl + D press multiple times] plus shift + end  and delete

8)json file check latest version:
"@angular/animations": "4.2.4",   (delete 4.2.4 and press Ctrl + Space)

9) View References( 2 Options)
  highlight plus shift + f12 to view references   <--  Vs Search in all files
  (doesn't show import on module or actual method calls within a file- high level to check where its being used)

10) Right click on classname and select view all references Vs Search all files

11) Rename function name and all references to it. highlight and hit f2 - type and press enter

12) to view errors:
  1) click bottom
  2) F8 multiple times
  press esc to exit

13)Move function up or down  <--
highlight function. alt + down key

14) Ctrl + Space to view options/dropdown

15) Ctrl + P to type in filename


{
	"workbench.sideBar.location": "right",
    "window.zoomLevel": 0,
    "files.exclude": {
        "**/*.js": true,
        "**/*.js.map": true
    },
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": false,
	"editor.renderIndentGuides": false,
    "extensions.autoUpdate": false,
    "editor.insertSpaces": false,
	"editor.detectIndentation": false,
	"typescript.check.tscVersion": false,
	"vsicons.presets.angular": true,
	"team.showWelcomeMessage": false,
	"workbench.colorTheme": "Default Light+",
	"workbench.statusBar.visible": true,
	"workbench.activityBar.visible": true,
	"editor.renderWhitespace": "none",
	"editor.renderControlCharacters": false,
	"files.trimTrailingWhitespace": true
}









TODO:  VS Code
https://app.pluralsight.com/library/courses/visual-studio-code/table-of-contents

TODO Todd Motto course:
https://ultimateangular.com/angular-pro

Port 4200 is already in use. Use '--port' to specify a different port.

C:\Users\z49DXL\Documents\SunocoPortal\UI>netstat -ano | findstr :4200
  TCP    127.0.0.1:4200         0.0.0.0:0              LISTENING       6732
  TCP    127.0.0.1:4200         127.0.0.1:51762        ESTABLISHED     6732
  TCP    127.0.0.1:51762        127.0.0.1:4200         ESTABLISHED     13604

C:\Users\z49DXL\Documents\SunocoPortal\UI>taskkill /PID 6732
ERROR: The process with PID 6732 could not be terminated.
Reason: This process can only be terminated forcefully (with /F option).

VS Code: folder level search- below inside 'draft-search':

files to include: **/financial/draft-search/**

C:\Users\z49DXL\Documents\SunocoPortal\UI>taskkill /PID 6732 /F
SUCCESS: The process with PID 6732 has been terminated.

Rxjs flatmap Good!:  https://blog.thoughtram.io/rx/2016/08/01/exploring-rx-operators-flatmap.html

RXJS functions:  https://www.sitepoint.com/rxjs-functions-with-examples/

VsCode



f6 toggle bookmark
commandpalette: Bookmarks: List from All Files


Bookmarks: List
Bookmarks: List from All Files
Ctrl + Alt + K  (Add/Delete Bookmark)
Ctrl + Alt + L  (Next Bookmark)
Ctrl + Alt + J  (Previous Bookmark)
Bookmarks:Clear


Bookmarks: Toggle                  Mark/unmark lines with bookmarks
Bookmarks: Jump to Next Move the cursor forward, to the bookmark below
Bookmarks: Jump to Previous Move the cursor backward, to the bookmark above
Bookmarks: List                    List all bookmarks in the current file
Bookmarks: List from All Files     List all bookmarks from all files
Bookmarks: Clear remove all bookmarks in the current file
Bookmarks: Clear from All Files remove all bookmarks from all files


vscode default settings:
settings.json global:     C:\Users\z49DXL\AppData\Roaming\Code\User
settings.json workspace:  C:\Users\z49DXL\Documents\SunocoPortal\UI\.vscode

Rxjs: https://github.com/Reactive-Extensions/RxJS/tree/master/doc

user settings
{
    "workbench.sideBar.location": "right",
    "window.zoomLevel": 0,
    "files.exclude": {
        "**/*.js": true,
        "**/*.js.map": true
    },
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": false,
    "editor.renderIndentGuides": false,
	"workbench.colorTheme": "Default Light+",
    "extensions.autoUpdate": false,
    "editor.insertSpaces": false,
	"editor.detectIndentation": false,
	"typescript.check.tscVersion": false,
	"vsicons.presets.angular": true,
	"team.showWelcomeMessage": false
}


****If you are a Visual Studio user (the full Visual Studio project, rather than Visual Studio Code) then the process for working with Angular projects is more complicated, especially if you want to add Angular to an ASP.NET Core MVC project. I I plan to prepare a separate update
   for using Angular in Visual Studio, which you will be able to download for free from the GitHub repository for this book.
    https://github.com/Apress/pro-angular-2ed

angular-cli reference: https://github.com/angular/angular-cli/wiki

rxjs observables operators like forkjoin
https://www.learnrxjs.io/

ng build --prod --base-href /SamplesUI/

ng serve --port 3000 --open

ng serve/build- approx time 60 seconds

sunoco sample website api: http://localhost:3500/calls


Template form Usage Scenarios:
1) Small form
2) Small form with minimal Validation


Reactive form Usage Scenarios:
1) Advanced Validation or
2) Large Form with Validation (each field block in html can become large in template form)


**Preference- 1)
1) route navigation component to component make webapi call to keep page data fresh
2) keep repository layer like sports store for cache. (data could get stale for update/delete/ read?)

Test ES7, ES6 Project-> C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test\angularProj
Use to test transpiling (es6 to es5): https://es6console.com/, https://babeljs.io/repl

plunker examples from https://angular.io/guide
angular style guide: https://angular.io/guide/styleguide
angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular blog: http://angularjs.blogspot.com/2017/04/
angular release schedule:
  https://angular.io/guide/releases
  https://github.com/angular/angular/blob/master/docs/RELEASE_SCHEDULE.md

angular cli:
https://www.sitepoint.com/ultimate-angular-cli-reference/
https://github.com/angular/angular-cli/wiki

vscode: search Ctrl+Shift+J

angular best practices: https://codeburst.io/angular-best-practices-4bed7ae1d0b7

AOT & TreeShaking: Angular cli does both out of the box (limited tree-shaking)

AoT is more secure- compiled code: http://www.gistia.com/optimize-angular-2-applications/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_210

Tree Shaking***
Think of your application like this massive tree. It s composed of hundreds of branches (dependencies). But all the branches aren t connected
(all dependencies aren t used).

So what do we do to get rid of these unnecessary branches?

We shake the tree!

Bundlers can analyse the imports and exports in our files to reveal exported modules that aren t imported. We can then get rid of these branches
and reduce the size of our application.


git clone:  $ git clone https://github.com/dlokman/angular.git

git repository angular documentation
C:\Users\Dan\angular


Angular
  angular components: https://github.com/angular/angular/tree/master/aio/src/app
   C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\aio\src


angular material 2 demo app source code: https://github.com/angular/material2/blob/master/src/demo-app

Angular Material: https://github.com/angular/material2/tree/master/src
  C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Material_Demos_Documentation\material2-master\src
  Demo-app
  material examples


no nested menu in angular material yet: https://github.com/angular/material2/issues/1429

prep:
https://github.com/Yonet/Angular-Interview-Questions
http://www.code-sample.com/2016/06/angular-2-interview-questions-and.html
https://gogetinfo.files.wordpress.com/2014/06/asp-net-mvc-interview-questions-answers-by-shailendra-chauhan.pdf
angularjs: https://myprofessionalhub.files.wordpress.com/2015/06/angularjs-interview-questions-answers-by-shailendra-chauhan.pdf

adding external js: https://weblog.west-wind.com/posts/2016/Sep/12/External-JavaScript-dependencies-in-Typescript-and-Angular-2

Use to test transpiling (es6 to es5): https://es6console.com/
typescript to javascript: https://www.typescriptlang.org/play/index.html#src=function%20f(input%3A%20boolean)%20%7B%0D%0A%20%20%20%20let%20a%20%3D%20100%3B%0D%0A%20%20%20%20alert(a)%3B%0D%0A%0D%0A%20%20%20%20if%20(input)%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2F%20Still%20okay%20to%20reference%20'a'%0D%0A%20%20%20%20%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20let%20a%20%3D%202%3B%0D%0A%20%20%20%20%20%20%20%20alert(a)%3B%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%7D%0D%0A%0D%0Af(true)%3B

angular 2 change detection- onpush:
https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html
https://www.gistia.com/angular-performance-optimization-change-detection/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_299

angular api: https://angular.io/api

tsconfig target es6 and es7. "lib": [ "es2015", "es2016", "dom" ],

Debugging: https://www.telerik.com/blogs/tips-for-debugging-your-angular-applications?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_298


Debugging

console.table(table) for large data sets
console.log(item) for regular

code: debugger statement or chrome development console breakpoints debugging.
addToCart(item) {
    debugger;
    this.store.dispatch(new AddToCart(item));
    this.inCart = true;
 }
html: The json pipe is particularly helpful for debugging bindings:
view debugging -
<div>{{currentHero | json}}</div>

         <!--  {{statusLookup | json}}

                <br/><br/>
                    {{userLookup | json}}
                <br/><br/>
                    {{allSamples | json}}
                <br/><br/>
                    {{samplesByStatus | json}}
                    <br/><br/>
                {{samplesByUser | json}}
                <br/><br/> -->



code debugging
let from = JSON.stringify(changedProp.previousValue);
        log.push(`${propName} changed from ${from} to ${to}`);

font-awesome files production: http://codingstill.com/2013/01/set-mime-types-for-web-fonts-in-iis/


angular cli template file (bottom): http://www.codemag.com/article/1705091


Visual Studio (Git Or TFS)
  Project 1 - Asp.net Webapi  (Visual Studio Build- Api Build) - Host Webapi in IIS
  Project 2 - Angular 2 UI    (Angular CLI Build- Front End Build)   - Host UI in IIs
   (Angular CLI out of the box- bundling, minification, cache busting, lazy loading)



Version control is visual studio:
Git is default for new projects  (github) - open source (http://www.tshooter.com.br/en/2016/03/07/eight-reasons-to-prefer-git-to-invs-tfvc/)


*Use 1 Version Control System. Small projects. for full stack development. not good.

GIT (default for new projects) Utilize github as well. Open Source
  a) Can use with both Visual Studio 2017(WebApi) and Vs Code(UI)
  b) Visual Studio 2017 (both Webapi and UI)


TFVC
  a) Webapi - Visual Studio 2017
  b) UI - Use Visual Studio 2017 as well. Seperate Project.
	Options:
	   1) Can work via VS 2017 or
	   2) VS Code (integration with TFVC via extension is slow). Make your changes offline, then connect to TFVC and check in- if using               VSCode

---------------------------------------------------------------------------------------------




1 Team Project can contain both TFVC or Git Repos

In a Team Project created with TFVC, you can add a Git Repository as well (instead of TFVC Repo)

https://www.visualstudio.com/en-us/docs/git/team-projects
TFVC created Team Project can contain both TFVC repo as well as Git repo
Git created Team Project can contain both Git repo as well as TFVC repo


Vs code:  TFVC(TFS) Vs Git(default) : https://www.visualstudio.com/en-us/docs/tfvc/comparison-git-tfvc

Git in  (VSCode and Visual Studio)  - Git is the default version control provider for new projects (https://www.visualstudio.com/en-us/docs/tfvc/comparison-git-tfvc)

TFVC in (VSCode and Visual Studio)


VS Code: TFVC: https://github.com/Microsoft/vsts-vscode/blob/master/TFVC_README.md
Connecting VS code to TFS (TFVC):https://blog.codeinside.eu/2017/05/29/using-vscode-and-tfvc/

Visual Studio Code
>scm:switch scm provider  (switch between Git and TFVC)
>team:Signin    Dan-PC\Dan   password-laptop (sign in to TFVC)



https://marketplace.visualstudio.com/items?itemName=ms-vsts.team
https://www.visualstudio.com/en-us/docs/tfvc/overview
-------------------------------



retrieving params:

   (if url changes)- default
1) this.route.snapshot.params["id"]  or this.route.parent.snapshot.params["id"]   (get param from parent route- calling from child route)

   (only if there is component on UI and only url changes with new data- component doesn't get re-instantiated pg 669 apress) - 06_Dan_Wahlin_Angular_Jumpstart> customer>customer-edit.component
2) this.route.params.subscribe((params: Params) => {  OR  this.route.parent.params.subscribe((params: Params) => {
   localhost:3000/form/edit/2
   localhost:3000/form/edit/3
   localhost:3000/form/edit/4


3) this.route.params.switchMap((params: Params) => this.heroService.getHero(+params['id'])).subscribe
   https://angular.io/tutorial/toh-pt5#revise-the-herodetailcomponent
   If a user re-navigates to this component while a getHero request is still processing, switchMap cancels the old request and then calls HeroService.getHero() again.
-------------------------------

typescript test code: https://www.typescriptlang.org/play/
angular source code: https://github.com/angular/angular/blob/bebedfed24d6fbfa492e97f071e1d1b41e411280/packages/common/src/directives/ng_for_of.ts
local source code: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\packages\core

tsconfig reference: https://angular.io/guide/typescript-configuration

angularJs to Angular cheatsheet: https://angular.io/guide/ajs-quick-reference
<tr ng-repeat="movie in movieList | filter: {title:listFilter}">  no filter in angular 2 - https://angular.io/guide/ajs-quick-reference#filter
<tr ng-repeat="movie in movieList | limitTo:2:0"> becomes <tr *ngFor="let movie of movies | slice:0:2"> paging
<tr ng-repeat="movie in movieList | orderBy : 'title'"> no orderby in angular 2 - https://angular.io/guide/ajs-quick-reference#orderby


cheatsheet" https://angular.io/guide/cheatsheet   <--good summary

Imp***
How do I restrict service scope to a module?  https://angular.io/guide/ngmodule-faq#how-do-i-restrict-service-scope-to-a-module

TAKEAWAY--- if need to limit a service to a module- then
1) configure the module as lazy loaded and use the service in the providers property of the module
2) If you must load the module eagerly, when the application starts, provide the service in a parent/top component instead.(not in app.module)
   all child components will get the same instance
   *Be sure to create module components as children of this module's top component.*

Shared Module: https://angular.io/guide/ngmodule-faq#sharedmodule
Core Module: https://angular.io/guide/ngmodule-faq#coremodule

No filter or OrderBy Pipes in Angular due to performance reasons: https://angular.io/guide/pipes#appendix-no-filterpipe-or-orderbypipe
1) expose these via component as filteredHeroes or sortedHeroes property
2) filtering/sorting service and inject into the component (if shared bw the app)
3) can create custom pipes
4) or find a custom pipe in the community



Updated way to create a token for service : https://angular.io/guide/dependency-injection-in-action#injectiontoken
Opaquetoken- deprecated - appress pg 501 : https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html
InjectionToken   https://angular.io/guide/dependency-injection-in-action#injectiontoken
reason   - well, maybe someone else has used the same token for a different provider. https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html
{ provide: TITLE,         useValue:   'Hero of the Month' },  -- provide-- token


subscribe/unsubscribe(ondestroy) example: https://angular.io/guide/component-interaction#parent-and-children-communicate-via-a-service

component/directive lifecycle hooks: https://angular.io/guide/lifecycle-hooks

angular 2 projection example. ngaftercontentinit lifecycle hook
https://angular-2-training-book.rangle.io/v/v2.3/handout/components/projection.html
e.g. want to insert "styled html" or a "component" from Parent component to a Child component. Cannot use input property

The json pipe is particularly helpful for debugging bindings:
view debugging
<div>{{currentHero | json}}</div>

code debugging
let from = JSON.stringify(changedProp.previousValue);
        log.push(`${propName} changed from ${from} to ${to}`);


appress book: https://github.com/Apress/pro-angular-2ed
Angular cli configuration schema Reference: https://github.com/angular/angular-cli/wiki/angular-cli

Debugging Data(object) in the view:
Last Event: {{ object | json }}

appress chapter codebase: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master\Angular 2.0\

hide js files- vs code: https://stackoverflow.com/questions/31587949/hide-js-map-files-in-visual-studio-code

-----------------------Directives Summary-----------------------------

'Attribute Directives' modify the 'behavior' or 'appearance'(class/height) of the host element they are applied to
    Built-in: [(ngModel)], routerLink="/form/edit" ?, Custom: [(paModel)]  ngStyle

'Structural Directives' change the layout of the HTML document by 'adding and removing' elements
    Built-in: *ngIf, *ngFor, Custom: *paIf

'Components' are 'directives' that define their own HTML content and, optionally, CSS styles
-------------------------------------------------------------------------------------------

<button class="btn btn-warning btn-sm" (click)="editProduct(item.id)"
routerLink="/form/edit">

check for undefined*** default value undefined for optional argument-any
transform(value: any, rate?: any): number {
let rateNumber = rate == undefined ? this.defaultRate : Number.parseInt(rate);


for transpiling es7/6 to es5, use typescript or babel

***ES7*** (Require polyfill scripts if can't be transpiled to Es5 (assuming target Es5)) -finalized June 2016- can use in tsconfig - Yes
1) Array.prototype.includes*****
2) Exponentiation Operator

sample- app target both es6 and es7
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\04_Official_Tutorial_Tour_of_Heroes\WebApplication1\src\app app.component.ts has example.


https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/


Augury, Batarangle-> to debug Angular 2 in chrome

***ASP.NET Core Webapi for Angular Books***

Essential Angular for ASP.NET Core MVC
http://www.apress.com/us/book/9781484229156


Book - ASP.NET Core and Angular 2
https://www.amazon.com/ASP-NET-Core-Angular-Valerio-Sanctis/dp/178646568X

*********************************


.Net Core Rest Api

CoreModule- singleton services, also single use component/modules(yes!) e.g spinners, toastor/growler, modal dialog(you have unsaved changes), navbar/top menu in the
*****AppComponent template/html- along with router-outlet*****.
https://angular.io/docs/ts/latest/guide/ngmodule.html#!#core-module
dan wahlin: angular jumpstart app - sample app


angular 2 tools:
https://angular.io/resources/#!#Education
blog: http://angularjs.blogspot.com/2017/03/angular-400-now-available.html
angular release schedule: https://github.com/angular/angular/blob/master/docs/RELEASE_SCHEDULE.md


Do is one that should always be followed
Consider guidelines should generally be followed
Avoid indicates something you should almost never do


search google: angular 2/typescript interview questions
-------------------------------------------------------


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)- compiler options


Directives
 Components directives with a template. (with a template view)
 Structural directives change the DOM layout by adding and removing DOM elements. *NgFor and *NgIf.  An asterisk (*) precedes the directive attribute
 Attribute directives change the appearance or behavior of an element, component, or another directive. NgStyle


template input variable:      You declare a template input variable using the let keyword (let hero). The variable's scope is limited to a single instance of the repeated template
template reference variable:  You declare a template reference variable by prefixing the variable name with # (#var). A reference variable refers to its attached element, component

or

directive. It can be accessed anywhere in the entire template

instead of putting ng-if or ngfor on div or span use <ng-container>
The Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM. Instead of using Div which
will be injected into the Dom

<ng-container *ngIf="result">
<ng-container *ngIf="downloading">
<ng-container *ngFor="let itm of results">

******TODO:   https://angular.io/docs/ts/latest/guide/deployment.html  ******


build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md


Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Summary of Changes: C:\Users\Dan\Desktop\Anglr2Stuff\ProAngular2- Apress Changes for Angular 4 and Angular CLI\ProAngular2- Apress - Summary Changes for Angular 4 and Angular CLI

  Apress Book (First Angular App -> Chp 2, SportsStore (including deployment)-> 7,8,9,10)
  Angular 4 Apress Source Code Update: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0/Updated%20Source%20Code
  Angular 4 Chapter Update: C:\Users\Dan\Desktop\Anglr2Stuff\ProAngular2- Apress Changes for Angular 4 and Angular CLI\Apress -Angular 4 -Chapter Updates
  CodeSplitting/LazyLoading Production works
  angular 4  from Angular team : https://www.youtube.com/watch?v=r-a2f0T8CG0

  New SystemJs plugin: systemjs-angular-loader.js. No need to write @Component({ moduleId: module.id })
  replace template with ng-template


  EventEmitter inherits/extends Subject
  Use EventEmitter in [components and directives] for communication between parent & child components: https://angular.io/api/core/EventEmitter
  Use Subject in [services] for communication between parent & child components  : https://angular.io/guide/component-interaction#parent-and-children-communicate-via-a-service


  *****ng-template, ng-container and ngTemplateOutlet : https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/****
  cannot apply ngIf and ngfor to the same div since both spit out ng-template. wrap ngFor with a ng-container

  1)The Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.


  2)ng-template. commonly used in view in else statement:  *ngIf else xxx
<div class="lessons-list" *ngIf="lessons else loading">
  ...
</div>

<ng-template #loading>
    <div>Loading...</div>
</ng-template>

A structural directive puts a <ng-template> . *ngIf or *ngFor

   3) Part 2 just references the template. We can take the #loading template and instantiate it anywhere on the page using ngTemplateOutlet.
      Re-use a template on a page several times and can pass in custom data using context. If the template is only going to be used multiple times on one page
      but no other pages. if a template needs to be used in multiple pages then would create a component
     <ng-container *ngTemplateOutlet="loading"></ng-container>


  Improve NgFor performance when items are added, removed by using trackBy. https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5
  else angular will remove all and re-add all. alot of dom manipulations.
  sample scenario: have a collection for ngfor. get data from server. collection contains more data. instead of removing & readding all. only update dom for the difference



  https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/

  if...else & if, then else. syntax in component HTML templates
  Animation  package has been moved out to a separated package
  Faster and smaller (AOT compilation)

  ngIf with else
  <div *ngIf="races.length > 0; else empty"><h2>Races</h2></div>
  <ng-template #empty><h2>No races.</h2></ng-template>

  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  local folder: C:\Users\Dan\Desktop\Anglr2Stuff\ProAngular2- Apress Changes for Angular 4 and Angular CLI

  angular 4  from Angular team : https://www.youtube.com/watch?v=r-a2f0T8CG0
  angular 4.2 documentation code & content live: https://github.com/angular/angular/tree/master/aio

  http://angularjs.blogspot.com/2017/03/angular-400-now-available.html
  https://scotch.io/tutorials/5-features-to-watch-out-for-in-angular-4

  Ngbook 2:
  https://angular.io/docs/ts/latest/guide/change-log.html




----------------------------------------Sample Apps: **imp**----------------------------------------------------
  Identify and collect sample apps

  Apress SportsStore (RUn UI) - Done  SampleApp
  Code: https://github.com/Apress/pro-angular-2ed (Chp 10-Rollback admin module or Chp 9-maybe try)

  Apress SportsStore (RUn UI) - 01_SportsStore_aManuallyUpgraded_Angl4_CLI1  - target es7

  Angular 2 development with typescript book App: (Skim Code)  StarsComponent good   SampleApp
  Code: https://www.manning.com/books/angular-2-development-with-typescript  (Chapter 10)


  Sample Code/folders- ng-book:   Just Chpater Source code. No Sample App. (Skim Code)
  Code: https://gumroad.com/confirm?destination=download_page&id=9f8fd07eff79bd77676ad44b8ff0d72e


  tour of heroes angular official tutorial (RUn UI)
  url & code: https://angular.io/docs/ts/latest/tutorial/


  install and test vscode extensions:
  https://medium.com/frontend-coach/7-must-have-visual-studio-code-extensions-for-angular-af9c476147fd
  http://devboosts.com/2017/02/08/top-10-vs-code-extensions/
  https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2
  https://weblogs.asp.net/lduveau/vs-code-and-angular-2-my-top-3-favorites-extensions


  john papa - tour of heroes (Skim Code)  lib(es7)
  https://github.com/johnpapa/angular2-tour-of-heroes
  Using angular-cli (no systemjs.config.js  or bs-config  or systemjs-angular-loader.js)
  almost same as (tour of heroes angular official tutorial) - includes error handling- with media queries in css


  ****Good*** folder/file hierarchy per best practices- core/shared folder****  es6
  **dan wahlin: angular jumpstart app  (https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/)
  https://github.com/DanWahlin/Angular-JumpStart (RUn UI - Use npm start on command line)
  Use npm start on command line- not configured for visual studio. to run in VS index.html should be in the same folder as package.json

   growler: toaster
   navbar: top menu
   modal: popup warning(you have unsaved changes)

    no lazyloading or preloading-->apress chapter 10 - deployment issue


  john papa follow up from above:  (so so... concise version of san wahlin eg above). data service layer slightly different
  https://github.com/johnpapa/Angular2-JumpStart (RUn UI - Use npm start on command line)


  angular 4 crud example app **? (RUn UI - Use npm start on command line- see url) - - target es7
  https://github.com/gothinkster/angular-realworld-example-app
  on routes- using  Route resolvers - (from query string param- create an object and provide to the next route- However, one thing that these guards don t allow us to do, is to ensure that certain data is loaded before a route is actually activated
  https://blog.thoughtram.io/angular/2016/10/10/resolving-route-data-in-angular-2.html
  reative forms



  Simple Angular with Asp.net Core Webapi - Using Docker to run though...
  (Skim Code) - try one time with sql server running?
  dan wahlin: integrating angular with asp.net core webapi (https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/)
  (turn off setting to run VS) https://stackoverflow.com/questions/42692472/visual-studio-2017-error-unable-to-start-program-an-operation-is-not-legal-in
  note- Run docker-compose build in docker command prompt after navigating to the directory
  https://github.com/DanWahlin/AspNetCorePostgreSQLDockerApp (just open with Visual Studio)
  http://192.168.99.100:5000/
  https://msdn.microsoft.com/en-us/library/dn220262(v=vs.113).aspx


 asp.net core webapi:
  https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api
  https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/



  ---chsakell*** (breadcrumb..) - IE errors-  This function is not supported on this system.
  angular 2 crud using asp.net core webapi and EF core (updated to angular 4- package.json)
  https://chsakell.com/2016/01/01/cross-platform-single-page-applications-with-asp-net-5-angular-2-typescript/
  source code: https://github.com/chsakell/aspnet5-angular2-typescript
  folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\10_Angular2_CRUD_Asp.net_Core_Webapi


  angular 2 crud using asp.net core webapi and EF core
  https://chsakell.com/2016/06/27/angular-2-crud-modals-animations-pagination-datetimepicker/
  https://github.com/chsakell/angular2-features
  folder:
     C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\12_CRUD_Angular_4_Asp.net_Core_Rest_Api
         Angular4_Typescript
         Asp.net_Core_Rest_Api
  VSCode for UI but VS2015 for .Net Core Rest Api

  "ng2-bootstrap": "^1.1.5",  --> Angular Bootstrao Components
     1) Native Angular directives for Bootstrap (like angular ui directives for bootstrap)- > http://valor-software.com/ngx-bootstrap/#/
     2) Vs Angular components for Bootstrap : https://ng-bootstrap.github.io/#/getting-started
  "ng2-slim-loading-bar": "1.5.1", -->



  same project as above but using angular 4, typescript and asp.net core api
  (run via npm command line -login Or VS run)

  api: http://localhost:your_port/api/users




  Run npm via command prompt.
  Debug in Chrome Or
  attach debugger from VS code


  deboarah- referene material? checkout real quick -  (Skim Code but run UI via instructions in APM-Final-Updated)
  https://github.com/DeborahK/Angular2-GettingStarted
  follow Readme instructions... plus open with visual studio code
  C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\12_Reference_Material_maybe\APM-Final-Updated


  https://www.sitepoint.com/ultimate-angular-cli-reference/ (5 part)

  Misc: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\angular-todo-app-master
  https://github.com/sitepoint-editors/angular-todo-app


   Reference Code for Book: ASP.NET Core and Angular 2 (https://www.amazon.com/ASP-NET-Core-Angular-Valerio-Sanctis/dp/178646568X)
   Chapter 10  (no validation...)
   local folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\ASPdotNET-Core-and-Angular-2-master
   github: https://github.com/PacktPublishing/ASPdotNET-Core-and-Angular-2



----------------------------------------------------------Sample App Notes-------------------------------------------------------------------------


----------------------------------------------------------SportsStore-------------------------------------------------------------------------

1) 01_SportsStore_aManuallyUpgraded_Angl4_CLI1  (Using Angular-cli.json) -(Manually Upgraded 01_SportsStore_Angl4_CLI1 using best practices)
   -lazy loading working
   -paging
   -admin page behind login (canActivate: [AuthGuard])
   -shared cart service
   -folder hierarchy (html, css, js, spec under 1 folder)- css view encapsulation working

   - admin/main/products/create
     admin/main/products/edit/3
     admin/main/products
     admin/main/orders


   - if we change url - simple product list & edit  (admin area)

2) 01_SportsStore_Angl4_CLI1 (Apress Updated code for Angular 4)  (Apress Book one)


confirm dialog/confirm modal
Create global shared component 'confirm-dialog'

Option#1

@Input() confirmConfig: IConfirmModalConfig

export interface IConfirmModalContent {
  title?: string;
  body?: string;
  cancelButtonText?: string;
  continueButtonText?: string;
  param?: any   //can pass or not pass. E.g pass in deletedRowId as param
}

@Output cancelClicked = new EventEmitter();
@Output continueClicked = new EventEmitter<any>(); //pass back param if needed. E.g pass in deletedRowId as param. On continueClicked, pass this back so we can delete the row

On Your Page
<dx-popup [(visible)]="isVisible">
   <ao-shared-confirm-dialog id="cancelxx" [confirmConfig]="confirmConfigCanelxx" (cancelClicked)="closeConfirmModal()" (continueClicked)="deletexx(param)"></ao-shared-confirm-dialog>
<dx-popup>

<dx-popup [(visible)]="isVisible">
   <ao-shared-confirm-dialog id="modifyxx" [confirmConfig]="confirmConfigModifyxx" (cancelClicked)="closeConfirmModal()" (continueClicked)="modifyxx(param)"></ao-shared-confirm-dialog>
<dx-popup>

-----------------------------------------------------------------------------------------------------------------------------------

****MUst REad below

(good for folder hierarchy etc)
06_Dan_Wahlin_Angular_Jumpstart  (good for Angular 4)
 -using angular 4
 -pagination module
 -custom filtering service (several properties)  <---- good since no filter in ng2
 -custom sort shared directive                   <---- good since no sort in ng2
 -TrackByService for ngFor   (validationService, authorizationService). TrackBy only needed if same url to minimize DOM redisplay(on api call, add/remove items). here we change urls.

 -Puts Navbar, Growler(toaster) and Model Components (singleton components) under Core Module- Following style guide. Do gather application-wide, single use components in the CoreModule. https://angular.io/guide/styleguide#style-04-11

 -new customer page behind login (canActivate) - AuthenticationGuard   <-----------------
 -unsaved customer edit exits- (canDeActivate)   - Unsaved Data popup  <-----------------
 -several routes lazy loaded (but preloaded)
 -using systemJs



 - only if a big subtree component. skip change detection for this component s subtree if none of its inputs changed. changeDetection: ChangeDetectionStrategy.OnPush
  Angular Change Detection
  https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html

  change detection starts from root component down everytime. Angular checks every single component by default
  change detection is also always performed from top to bottom for every single component, every single time, starting from the root component.



core>navbar.component.html
 -events raise and catch (eg if user's authentication status has changed)- good example
     -components can subscribe to a shared service event. for instance to keep track of authentication status.. see dan wahlin 06_Dan_Wahlin_Angular_Jumpstart
 -subsribe and unsubcribe (ngdestroy pattern)- to a shared service event

 -uses growler for toaster type popups
 -uses modal component for popup confirmationa

 - routes
    customers/1/details
    customers/1/edit     (SportsStore:   admin/products/edit/2
    customers/1/orders


-----------------------------------------------------------------------------------------------------------------------------------

1)  04_Official_Tutorial_Tour_of_Heroes  (using SystemJs)
      tour of heroes angular official tutorial (RUn UI)
      url & code: https://angular.io/docs/ts/latest/tutorial/

     - testing Es6 and Es7 features - app.component.ts
     - css with media queries
     - search textbox making use of swithmap and observables
     - route param using switchmap (don't really need) hero-detail.component.ts
     - hero service only using promises (no observables since no need)

2)  05_John_Papa_Tour_Of_Heroes (using Angular-CLI.json) (no systemjs.config.js  or bs-config  or systemjs-angular-loader.js)
                                almost same as (tour of heroes angular official tutorial) - includes error handling- with media queries in css
      - target es7
      - hero-detail.component.ts   no switchmap
      - little bit additional value than part 1)



-----------------------------------------------------------------------------------------------------------------------------------

Gene_ByGene_Task   folder


2 Apps
SampleNG2Apps\Gene_ByGene_Task\New  (Angular4)
SampleNG2Apps\Gene_ByGene_Task\Old  (AngularJs)



Restful API

GetAllBooks   get->          BookDTO\BookVM
GetBookById   get->          BookDetailDTO\BookDetailVM
PutBook       put in Body->  BookDB (FluentApi Validations)
PostBook      post in Body-> BookDB (FluentApi Validations)


C:\Users\Dan\Desktop\BookService-master\BookService-master\BookService\Controllers\BookController.cs
https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-2

Webapi- overriding Code First Conventions using Fluent Api (not data annotation)

undo migration: https://stackoverflow.com/questions/11679385/reset-entity-framework-migrations

attribute routing: https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/create-a-rest-api-with-attribute-routing
https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2

chrome postman to test api: Postman
{
  "sampleId": 0,
  "barcode": 123457,
  "createdAt": "2015-4-4 00:00:00.000",
  "createdBy": 1,
  "statusId": 3
}


modelstate error show on client
https://stackoverflow.com/questions/23086664/how-to-render-errors-to-client-angularjs-webapi-modelstate


WebApi url: http://localhost/SamplesWebApi/api/genesamples
fluent validation: https://chsakell.com/2015/01/17/web-api-powerful-custom-model-validation-with-fluentvalidation/

OnModelCreating : dB configuration not validation
validation: use fluent api


Asp.net Webapi...?
1) https://www.asp.net/web-api
2) Notepad webapi section
3) 22_Angular_4_WebApi_CRUD_CodeMagazine (ModelState.IsValid ?)
4) https://chsakell.com/upcoming-events/  (webapi related articles)
   www.apress.com/9781430247258

   Entity Framework Reference: https://msdn.microsoft.com/en-us/data/ee712907(vs.113)
   EF code first - fluent api: Preferred-- https://msdn.microsoft.com/en-us/data/jj591620(v=vs.113)
   EF code first - data annotations:  https://msdn.microsoft.com/en-us/data/jj591583.aspx


https://msdn.microsoft.com/en-us/library/jj591620(v=vs.113).aspx
https://msdn.microsoft.com/en-us/data/jj591617(v=vs.113)


WebApi url: http://localhost/SamplesWebApi/api/genesamples
Angular url:



till above angular 2 reference

-----------------------------------------------------------------------------------------------------------------------------------

10_Angular2_CRUD_Asp.net_Core_Webapi (ng4)

  -No reason to host Angular in asp.net MVC page. Use seperate project for angular 2 with Angular CLI. Use Webapi as just a service/api layer.
  -For Authorization Album. Dont store auth cookie on client like sportsstore. follow this app.
  -Logs Error in Error table on the server
  -Don't use bower (can just use npm or bootstrap, font awesome like SportsStore)
  -uses gulp task to convert typescript to Js files and create the deployment folder for angular with all css, js etc needed under wwwroot/lib
  -gulp needed? if seperate angular and webapi projects? todo..
  -lazy loading not yet possible in entity framework core (https://docs.microsoft.com/en-us/ef/core/querying/related-data)
   which is why chsakell is using includeProperties under Infrastructure/Repositories/Abstract/IEntityBaseRepository.cs
  -Using Systemjs
  -in Layout.cshtml and Index.cshtml- One more thing to notice is the src references that starts with ~/lib which actually point to wwwroot/lib.
  -For each Typescript domain class there will be a corresponding 'ViewModel' class on the server-side
  -EF Core Code First migrations
  -Use Automapper to map Viewmodel to model and vice versa
  -Paging
  -EF core doesn't support lazy loading. Custom lazy loading code.
  -Validation on Webapi done via ViewModels. Models have EF conventions to throw error if not correct

run UI
in Layout.cshtml and Index.cshtml- One more thing to notice is the src references that starts with ~/lib which actually point to wwwroot/lib.
hows the deployment files referenced on page? check

MVC View Vs WWWRoot
https://stackoverflow.com/questions/27648045/what-is-wwwroot-in-asp-net-vnext

-----------------------------------------------------------------------------------------------------------------------------------

12_CRUD_Angular_4_Asp.net_Core_Rest_Api
 -Seperate Angular(still use SystemJs) and Core Api projects
 -Seperate Projects for Repositories and Model
 -No virtual properties(regular properties). no lazy loading. custom load via AllIncluding
 -uses ng2-bootstrap, ng2-slim-loading-bar

-----------------------------------------------------------------------------------------------------------------------------------

22_Angular_4_WebApi_CRUD_CodeMagazine
 -Angular 4 with Webapi sample code

-----------------------------------------------------------------------------------------------------------------------------------


Apress Source Code(both for Angular 2 and Angular 4)

C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master
https://github.com/Apress/pro-angular-2ed (Angular 2 and Angular 4)

-----------------------------------------------------------------------------------------------------------------------------------


02_Angular2_Development_with_typescript_book  (Reference Code)
 -stars component good
 -raise event and catch- search- communicating between components
 -encapsulation:ViewEncapsulation.None
 - ngOnDestroy -unsubscribe


-----------------------------------------------------------------------------------------------------------------------------------

08_Angular_4_CRUD_Example  (reactive forms, components...) else ok



-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------

14_Reference_Material_maybe -- so so (Misc Reference)

-----------------------------------------------------------------------------------------------------------------------------------

03_NG2_book  --- so so (Misc Reference)


-----------------------------------------------------------------------------------------------------------------------------------

SampleNG2Apps\Test\ASPdotNET-Core-and-Angular-2-master --   so..so
(so so- Ng2 with asp.net core. Uses virtual properties for lazy loading
but entity framework core doesn't support lazy loading yet...duh)


-----------------------------------------------------------------------------------------------------------------------------------

09_Dan_Wahlin_Angular_Asp.net_Core_Webapi--- so so



---------------------------------------------------End of Sample Apps Notes--------------------------------------------------------------------------------



usecase oData Webapi: http://www.software-architects.com/devblog/2014/09/12/10-OData-FAQs#header1

--------------------------------------------------webapi/core api---------------------------------------

 Server requirements (Windows Server 2008 R2 SP1)
 https://docs.microsoft.com/en-us/dotnet/core/windows-prerequisites
 https://docs.microsoft.com/en-us/aspnet/core/publishing/iis

 asp.net core webapi:
  https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api
  https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/


asp.net core is the new one (asp.net 5 no longer exists)

asp.net core webapi/ asp.net mvc 6 api ()  (nuthin Angular 2 specific)

  1st:    Main(https://docs.microsoft.com/en-us/aspnet/core/tutorials/index#building-web-apis)
   (Sample Webapi: C:\Users\Dan\Desktop\Anglr2Stuff\Docs-master\Docs-master\aspnetcore\tutorials\first-web-api\sample\TodoApi)

   Create a web API with ASP.NET Core MVC and Visual Studio for Windows:  https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api
   Routing to Controller Actions: https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing


   Getting started with ASP.NET Core and Entity Framework Core using Visual Studio:  (not a webapi- DAL layer for MVC)
     Contoso University (using ASP.NET Core 1.1  and Entity Framework Core 1.1  using Visual Studio 2017)
	https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/index (10 parts) - open c# file
	Sample Apps in C:\Users\Dan\Desktop\Anglr2Stuff\Docs-master\Docs-master\aspnetcore\tutorials\first-web-api\sample\TodoApi
	https://github.com/aspnet/Docs/tree/master/aspnetcore/data/ef-mvc/intro/samples/cu-final

   ASP.NET Core - New database with Visual Studio 2017: https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/new-db
   ASP.NET Core - Existing Database:  https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db

  2nd: Chsakell Sample Webapi-> C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\12_CRUD_Angular_4_Asp.net_Core_Rest_Api\Asp.net_Core_Rest_Api\Scheduler.API\Controllers
	- posts back viewmodel not model (update, create)

  3rd: https://www.codeproject.com/Articles/1112848/Creating-Web-API-in-ASP-NET-Core  (ViewModel Mapper instead of Dapper)

  4th: Reference Code for Book: ASP.NET Core and Angular 2 (https://www.amazon.com/ASP-NET-Core-Angular-Valerio-Sanctis/dp/178646568X)
	Chapter 10 (no validation...)
	local folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\ASPdotNET-Core-and-Angular-2-master
        github: https://github.com/PacktPublishing/ASPdotNET-Core-and-Angular-2



asp.net core webapi/ ASP.NET MVC 6 API service (asp.net core) - GeekQuiz (inherit Controller)
  https://github.com/Microsoft-Web/WebCampTrainingKit/tree/master/HOL/AspNetApiSpa
  same as above but in asp.net 5: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\WebCampTrainingKit-2016.02.09\HOL\AspNetApiSpa\Source\Ex1-CreatingAnAPI\End



Asp.net webapi 2- (Asp.net 4.5) - GeekQuiz (inherit ApiController) - older version
  https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/build-a-single-page-application-spa-with-aspnet-web-api-and-angularjs
  local folder in asp.net 4.5 (no viewmodels though): C:\WebCampsTK\HOL\AspNetWebApiSpa\Source\Ex1-CreatingAWebAPI\End\GeekQuiz\Controllers


  https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/  (10 parts) - posts back model not viewmodel (update, create) - https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-9
  (Sample Webapi- C:\Users\Dan\Desktop\BookService-master)

  22_Angular_4_WebApi_CRUD_CodeMagazine (ng4 with webapi)  ModelState.IsValid?

  Chp 5,6,7 - Asp.net Webapi (skim)
  webapi book source code- > www.apress.com/9781430247258

angular 2 with asp.net core webapi
  TODO.... Later****... See Chsakell or below Books get later


**Template pack for Angular 2 and asp.net core exists- via dos command as well (dotnet new -t)

Order later...
Books
Essential Angular for ASP.NET Core MVC (feb 2018)
http://www.apress.com/us/book/9781484229156

Book - ASP.NET Core and Angular 2  (code on github- https://github.com/PacktPublishing/ASPdotNET-Core-and-Angular-2)
https://www.amazon.com/ASP-NET-Core-Angular-Valerio-Sanctis/dp/178646568X

--------------------------------------------------------------------------------------------------------------------------------------------------------

difference between const and readonly
A const variable cannot be re-assigned, just like a readonly property.
const  is for variables and the readonly is for properties
const x = 5;
class Example {
    public readonly y = 6;
}


****NG2 FORMS- TEMPLATE Vs REACTIVE******


More complex business validations in form then use reactive form (combination of 2 properties etc)


ECMAScript is a 'standard' for client-side scripting languages. The ECMAScript standard is implemented in several languages, and the most popular implementation is JavaScript.
ECMAScript 6 <=> ES6 <=>  ECMAScript 2015. ES6 is  a new JavaScript standard!

most current  browsers only  support ES5. Write code in ES6 or ES7 using new language features and transpile code down to ES5 so browsers can understand it

no systemjs if using angular cli


typescript: TypeScript isn t a completely new language, it s a superset of ES6. If we write ES6 code, it s perfectly
valid and compilable TypeScript code. Here s a diagram that shows the relationship between the
languages

typescript compiles references lib:es6 and es7 (write code using these features) - "lib": [ "es2015", "dom" ],
but transpile down to es5 ->  "target": "es5", (transpile to es5)


es6 features (use in typescript since lib in tsconfig can put as es7):
  Project 1: https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/   (https://github.com/DanWahlin/ES6Samples )
  http://es6-features.org/#Constants
  (good) https://webapplog.com/es6/
  https://medium.com/capital-one-developers/my-12-favorite-es6-es2015-features-76e70397fee0

  (Gooood ES6 Resource!!!!) angular 2 development with typescript book- appendix a  (pg 352 continue) -
	ES5 hoisting good example- pg 353
 	ES6 promises good example- pg 377

	let has block scope wheras var is hoisted to the top of the function

es7 features:
	   https://webapplog.com/es7-es8/
           https://rainsoft.io/must-know-details-about-es2016-features/
           https://node.university/blog/498412/es7-es8
	   http://www.danielmayor.com/javascript-new-features-in-es7
           https://www.quora.com/What-features-will-be-in-ES7-and-ES8



skim: http://learnangular2.com



https://stackoverflow.com/questions/39395359/angular-2-ui-components-which-library
https://colorlib.com/wp/angular-2-components/
grid: https://www.indeed.com/viewjob?cmp=Horizon-Consulting-Inc&t=Angular+Js+Data+Grid&jk=ce047e44d36911e3&q=angular+2%2C+ag-grid


Use current Bootstrap v3.3.7 and ng2-bootstrap (like Chsakell)

------------------------------------------------------------



ng bootstrap  --->  ng update --save @ng-bootstrap/ng-bootstrap@latest     -- 4.0.1
lodash   --> 4.17.11
moment   --> 2.23.0
Font-Awesome
toastr   --> keep 'as is' - 2.1.4
jquery   --> keep 'as is'  "^3.3.1
primeng
uninstall version 6.1
npm uninstall primeng --save
npm install primeng@7.0.0 --save



Can you use Angular 14?

PrimeNg Demos
https://github.com/primefaces/primeng/tree/master/src/app/showcase/components

Angular Material Demo
https://github.com/angular/components/tree/main/src/components-examples/material
https://github.com/angular/components/tree/main/src/dev-app

UI
Angular Material: https://angular.io/docs
PrimeNG: https://www.primefaces.org/primeng/
PrimeIcons
NG Bootstrap : https://ng-bootstrap.github.io/#/home
Bootstrap
Toastr
Font-Awesome


JS
Jquery
lodash
moment


correct order
"src/styles.css",
"node_modules/primeng/resources/themes/bootstrap4-light-blue/theme.css",
"node_modules/primeng/resources/primeng.min.css",
"node_modules/primeflex/primeflex.css",
"node_modules/primeicons/primeicons.css"


            "styles": [
				"src/angular-material-dark-theme.scss",
				"src/styles.css",
				"node_modules/bootstrap/dist/css/bootstrap.min.css",
				 "node_modules/@fortawesome/fontawesome-free/css/all.min.css",
				 "node_modules/primeicons/primeicons.css",
				 "node_modules/primeng/resources/themes/luna-amber/theme.css",
				 "node_modules/primeng/resources/primeng.min.css",
				 "node_modules/primeflex/primeflex.css",
				 "node_modules/toastr/build/toastr.min.css",
				 "node_modules/loaders.css/loaders.min.css"
            ],
            "scripts": [
				"node_modules/jquery/dist/jquery.min.js",
				"node_modules/popper.js/dist/umd/popper.min.js",
				"node_modules/bootstrap/dist/js/bootstrap.min.js",
				"node_modules/moment/min/moment.min.js",
				"node_modules/toastr/build/toastr.min.js",
				"node_modules/lodash/lodash.min.js"
			]
------------------------------------------------------------------------------------------

Bootstrap 4 alpha knowledge (new features),
Current ver Bootstrap v3.3.7

UI components (https://angular.io/resources/)

find grid from here


****grids and forms- test  on mobile/ie****

Core
  Bootstrap 3.3.7-> http://getbootstrap.com/
  Bootstrap v4.0.0-alpha.6 -> https://v4-alpha.getbootstrap.com/
                              http://v4-alpha.getbootstrap.com/components/

  Material Design-> https://github.com/angular/material2 (angular material 2) - https://material.angular.io/ (github stars- 9111)  - good!! no grid  - No Bootstrap dependency

  valor software - (no angular dependency?-
  Boostrap 3 for Angular-> ng2-bootstrap(bootstrap 3- current)  http://valor-software.com/ngx-bootstrap/#/   (github stars- 2777)  - no grid
  Boostrap 4 for Angular->                                      http://valor-software.com/ngx-bootstrap/index-bs4.html#/

  core angular team (Boostrap 4 alpha with Angular 4)- https://www.reddit.com/r/Angular2/comments/4s3kkx/what_is_the_difference_between_ngbootstrap/ - also created angular 1 ui directives for bootstrap -https://angular-ui.github.io/bootstrap/
  Boostrap 4 for Angular 4-alpha --> ng-bootstrap(bootstrap 4) (pass for now) https://ng-bootstrap.github.io/#/home   (github stars- 2963)  - no grid
  https://ng-bootstrap.github.io/#/getting-started

  Font-Awesome

If need some component not available from above. checkout Forms control under both and https://material.angular.io/components/component/input
  Clarity Design System: (Angular 2 Components)      https://vmware.github.io/clarity/get-started  (github stars- 1489)    - got grid
  Teradata covelent (Angular 2 + Material Design)	 https://teradata.github.io/covalent/#/	   (github stars- 905)	   - got grid, form looks better on mobile/ie

  Semantic UI 		 https://semantic-ui.com/					   (github stars- 35,326)  - no grid (so, so?)


  D3 (charts), Chart.js, ng2-charts(https://github.com/valor-software/ng2-charts)


Grid
     Clarity Design System: https://vmware.github.io/clarity/documentation/datagrid/structure		   (github stars- 1489)    - got grid
     Teradata covelent (Angular + Material Design)	 https://teradata.github.io/covalent/#/components/data-table               - got grid

  ***https://github.com/swimlane/ngx-datatable          (github stars- 1245) - TypeScript & Angular >=4.0.0   - grid
     https://github.com/valor-software/ng2-handsontable (github stars- 168) - same author as angular boostrap componenets above - valor-software - grid


     ag-grid (pricing) - can tryout a free one. paid but best though


Round Progress Bar: https://github.com/crisbeto/angular-svg-round-progressbar


Misc:
 fuel-ui (github stars- 256)
 ng-lighting
 https://www.primefaces.org
 https://github.com/angular/flex-layout (flexbox)
 grid:
----------------------------------------Bootstrap 4--------------------------------------------------------

Reference MediaQueries in CSS: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\05_John_Papa_Tour_Of_Heroes\WebApplication1

Bootstrap 4 SASS:
https://www.youtube.com/watch?v=pZD2casdkXM
https://www.youtube.com/watch?v=iYNgxQ9IWnI

Bootstrap 4 SASS Info---

takeaway: Bootsrap.css is generated from a source SASS file bootstrap.scss that has default values configured for certain tags etc
in bootstrap 4: Switched from Less(v3) to Sass(v4) for our [source] CSS files.

Example
node_modules\bootstrap\dist\css\bootstrap.css  defines tags such as body with values
body {
  color: #292b2c;
  background-color: #fff;
}

these actually come from Boostrap source SASS files at node_modules\bootstrap\scss\bootstrap.scss
$body-bg: $white !default;
  $body-color: $gray-dark !default;

compiling sass file bootstrap.scss gives us bootstrap.css with body {
  color: #292b2c;
  background-color: #fff;
} values

-------------------------

Jquery 3.x branch

Bootstrap major changes from v3 to v4: http://v4-alpha.getbootstrap.com/migration/
-Dropped IE8, IE9, and iOS 6 support. v4 is now only IE10+ and iOS 7+. For sites needing either of those, use v3.
-Flexbox is enabled by default
-added xs(extra small) breakpoint - Added a new grid tier for smaller devices at 576px and below (our new xs tier).

Current Bootstrap version: 'v4.0.0-alpha.6' (Chp 4 bootstrap 4 intro)

Release history: https://github.com/twbs/bootstrap/releases

test file: file:///C:/Users/Dan/Desktop/Anglr2Stuff/SampleNG2Apps/Test/index.html

Bootstrap 4- alpha 4:  	       m-t-1 (margin-top-1)
Bootstrap 4- alpha 6(current): mt-1  (margin-top-1)


iphone, ipad, ie/chrome/firefox

Bootstrap 4 alpha knowledge  (new features...)
Current ver Bootstrap v3.3.7 (create sample application using)
check books/apps usage
identify resources/samples

apress book: boostrap 4 alpha '4.0.0-alpha.4'.
angular 2 development with typescript: "bootstrap": "3.3.6"
chsakell 2016 sites: "bootstrap": "3.3.5"   (IE errors


Apps
  SportsStore Apress App:  boostrap 4 alpha '4.0.0-alpha.4'  (mobile responsive. nope)
  06_Dan_Wahlin_Angular_Jumpstart: bootstrap/3.3.7           (mobile responsive. nope)
  10_Angular2_CRUD_Asp.net_Core_Webapi: bootstrap/3.3.6      (mobile responsive. Ie errors)
  12_CRUD_Angular_4_Asp.net_Core_Rest_Api:  "bootstrap": "^3.3.6" + ***ng2-bootstrap***: "^1.6.3"(calendar)  (mobile responsive. Ie errors)


Default MVC Project - Visual Studio- login/Register - mobile responsive - bootstrap 3.0.0
SPA Projects visual studio template...


bootstrap 4 - sample templates/themes/starter kits -mobile responsive (github or online)

responsive, mobile-first

identify resources
Bootstrap 4 alpha knowledge  (new features...)
Bootstrap 3.3.7 knowledge (see previous notepads- links- 1 good one?)
    online
    video: https://www.youtube.com/playlist?list=PLzj7TwUeMQ3hrmEpbse1aBHJg-KZtvN--


Bootstrap v4.0.0-alpha.6 (knowledge- urls?, new features, online documentation, apress chp html &js) -
		next version will be beta-> http://blog.getbootstrap.com/2017/01/06/bootstrap-4-alpha-6/
		bootstrap beta- 95% complete [1-2 months release exp] - https://github.com/twbs/bootstrap/milestone/41

   New Features:
      http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/
      http://developer.telerik.com/featured/whats-new-whats-changed-bootstrap-4/
      http://blog.getbootstrap.com/2017/01/06/bootstrap-4-alpha-6/
      https://blog.templatetoaster.com/bootstrap-4/
      http://www.hongkiat.com/blog/boostrap-4-best-features/
      http://www.dotnetcurry.com/javascript/1327/bootstrap-4-new-features


  apress book: 51-64


  layout -> http://v4-alpha.getbootstrap.com/layout/overview/

  http://v4-alpha.getbootstrap.com/  -full site-  (has starter templates)

.......

Sample Test Bootstrap file: file:///C:/Users/Dan/Desktop/Anglr2Stuff/SampleNG2Apps/Test/index.html
...............................
Bootstrap 4 min css

mobile css... (<576px) Default - Portrait phone (top section) - xs


@media (min-width: 576px) - Landscape phones  - sm
css...

@media (min-width: 768px) - Tablets  -md
css...

@media (min-width: 992px) - Desktops -lg
css...

@media (min-width: 1200px) - Large Desktops -xl
css...


xs - extra small phone
sm - phone   (576px)
md - tablet  (768 px)
lg - desktop (992 px)
xl - wide desktop (1200px)
......................................

e.g. override h1. Default for Portrait phone is font-size: 2.5em in bootstrap.min.css top/default css


<style>
	@media (min-width: 576px) {
	  h1 {
  		font-size: 5em;
	  }
	}

	@media (min-width: 768px) {
		h1 {
			font-size: 9em;
		  }
	}

	@media (min-width: 992px) {
	  h1 {
			font-size: 13em;
		  }
	}

	@media (min-width: 1200px) {
	  h1 {
			font-size: 17em;
		  }
	}

  </style>

-----------------------------------------
  difference between padding and margin
  padding is the space between the content and the border, whereas margin is the space outside the border.

  Bootstrap 4 (As we head to our first beta, we ll be focused on not adding anything new, ideally making as few breaking changes as possible, and emphasizing documentation quality and bug fixes.- https://blog.getbootstrap.com/)
    Internet Explorer 10+ is supported. for  IE8-9 support, use Bootstrap 3
    ***mobile first - Bootstrap is developed mobile first, a strategy in which we optimize code for mobile devices first and then scale up components as necessary using CSS media queries.******
    uses Sass instead of less
    xs css is default- mobile. renamed several classes. Instead of pull, we use float
    Bootstrap 4 is now flexbox by default! (https://blog.getbootstrap.com/)   It comes at the cost of dropping IE9 support,
    added flexbox even though ie 9 doesnt support it. flexbox-based grid system and 'components'. Dropping IE9 'support'. Bootstrap 4 is now flexbox by default!. IE9 does not support Flexbox.- By setting $enable-flex inside _variables.scss, Bootstrap 4 allows you to enable Flexbox support for the grid system, media components and input groups.
    every plugin has been rewritten in ES6

    Bootstrap s JavaScript plugins require jQuery

    utility classes for margin, padding- ignore appress outdated
    -first, the letter m (for margin) or p (for padding), followed by a hyphen, followed by a letter selecting some or all
     element edges (a for all edges, t for top, b for bottom, l for left, or r for right), then a hyphen, and, finally,
     a number indicating how much space should be applied (0 for no spacing, or 1, 2, or 3 for increasing
     amounts).

    .css.map files so debuggers can display css(via less, sass) in a readable format

   -----------*****outdated*****- this applies for Bootstrap 4- alpha 4... See updated Spacing for Bootstrap 4- alpha 6. https://teamtreehouse.com/community/spacing-not-working
   -- originall from apress book that uses Bootstrap 4- alpha 4

    m stands for margin
    p for padding.
    In regards to directions:
        t is for top, r for right, l for left,
        x for left and right, y for top and bottom and a for all.
     Finally, for sizes:
        0 is for zero, auto for auto, md for medium and lg for large. Leave blank for default.
     'display' -> d-* classes allow you to set the 'display' property to either block, inline or inline-block. d-block will set the display property of an element to block, whilst d-inline-block will set it to inline-block
     'width' -> w-* classes, allow you to quickly set the 'width' of an element to the desired %. As such, w-100 would set the width property of an element to 100%, whilst w-50 would set it to 50%
     left margin of an element to 0, one would use the class m-l-0

    p-a-1 - padding all one
    m-a-1 - margin all one
    m-t-1 - margin top one
    m-b-1 - margin bottom one
    m-l-0 - margin left zero

    size modification class (btn-lg, btn-sm)
    <button class="btn btn-lg btn-primary m-t-1">Add</button>
    <button class="btn btn-sm btn-primary m-t-1">Add</button>
    -------------------------------------


    context class = btn-primary
    size class = btn-lg | btn-sm

    for Tooltips and Popovers include Tether js library
    new grid tier with a breakpoint at 480px - xs, sm, md, and lg

    can apply same 'style context' to different 'elements' for consistent appearance.
    e.g 'primary' context applied to h3 as 'bg-primary' and to button as 'btn-primary'

    <h3 class="bg-primary p-a-1">Adam's To Do List</h3>

    <button class="btn btn-primary m-t-1">Add</button>

xs - extra small phone
sm - phone   (576px)
md - tablet  (768 px)
lg - desktop (992 px)
xl - wide desktop (1200px)

$grid-breakpoints: (
   // Extra small screen / phone  -  An extra-small breakpoint for handheld devices that boast a smaller screen than normal (0px)
   xs: 0,
   // Small screen / phone  -  A small breakpoint aimed at phones / handhelds (544px)
   sm: 576px,
   // Medium screen / tablet
   md: 768px,
   // Large screen / desktop
   lg: 992px,
   // Extra large screen / wide desktop
   xl: 1200px
   ) !default;

 col-sm-* Grid cells are displayed horizontally when the screen width is greater than 768 pixels.
 col-md-* Grid cells are displayed horizontally when the screen width is greater than 940 pixels.
 col-lg-* Grid cells are displayed horizontally when the screen width is greater than 1170 pixels.


Bootstrap Breakpoints

iphone 6
  portrait:  375px
  landscape: 667px


chart(http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)

1)Extra Small Phones < 576px. ***No media query. Default*** etc

  < 576px. Small Devices                Portrait phone    (why different breakpoints for http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)

2) @media (min-width: 576px) { ... }.   Landscape phones

   576px <= x < 768px. Medium Devices.  Tablets

3) @media (min-width: 768px) { ... }.   Desktops

  768px <= x < 992px. Large devices

4) @media (min-width: 1200px) { ... }   Large Desktops

   1200px <= x


......................................
Bootstrap 4 min css

mobile css... (<576px) Default - Portrait phone (top section) - xs


@media (min-width: 576px) - Landscape phones  - sm
css...

@media (min-width: 768px) - Tablets  -md
css...

@media (min-width: 992px) - Desktops -lg
css...

@media (min-width: 1200px) - Large Desktops -xl



......................................



Media queries are available via Sass mixins
@include media-breakpoint-up(xs) { ... }
@include media-breakpoint-up(sm) { ... }
@include media-breakpoint-up(md) { ... }
@include media-breakpoint-up(lg) { ... }
@include media-breakpoint-up(xl) { ... }

// Example usage:
@include media-breakpoint-up(sm) {
  .some-class {
    display: block;
  }
}


occasionally use media queries like
// Extra small devices (portrait phones, less than 576px)
@media (max-width: 575px) { ... } Or
@include media-breakpoint-down(xs) { ... }

There are also media queries and mixins
// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) and (max-width: 767px) { ... } Or
@include media-breakpoint-only(xs) { ... }


media queries may span multiple breakpoint widths:
@media (min-width: 768px) and (max-width: 1199px) { ... }


Mobile-first Flexbox grid system


order
(Utilities, Grid, components, Others(media object and below))


***Utilities***

Border
<span class="border-0"></span>       no borders
<span class="border-top-0"></span>   border top 0
<span class="border-right-0"></span>
<span class="border-bottom-0"></span>
<span class="border-left-0"></span>

Border-radius
<img src="..." alt="..." class="rounded">
<img src="..." alt="..." class="rounded-top">
<img src="..." alt="..." class="rounded-right">
<img src="..." alt="..." class="rounded-bottom">
<img src="..." alt="..." class="rounded-left">
<img src="..." alt="..." class="rounded-circle">
<img src="..." alt="..." class="rounded-0">

Easily clear floats by adding .clearfix to the parent element
<div class="bg-info clearfix">
  <button class="btn btn-secondary float-left">Example Button floated left</button>
  <button class="btn btn-secondary float-right">Example Button floated right</button>
</div>


Close icon to dismiss modals and alerts
<button type="button" class="close" aria-label="Close">
  <span aria-hidden="true">&times;</span>
</button>
aria-  Accessible Rich Internet Applications (ARIA) defines ways to make Web content and Web applications (especially those developed with Ajax and JavaScript) more accessible to people with disabilities

<button type="button" class="close">
  <span>&times;</span>
</button>
aria-label="Close"
aria-hidden="true"

*Colors*
Convey meaning through text color
<p class="text-muted">Fusce dapibus, tellus ac cursus commodo, tortor mauris nibh.</p>
<p class="text-primary">Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
<p class="text-success">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</p>
<p class="text-info">Maecenas sed diam eget risus varius blandit sit amet non magna.</p>
<p class="text-warning">Etiam porta sem malesuada magna mollis euismod.</p>
<p class="text-danger">Donec ullamcorper nulla non metus auctor fringilla.</p>
<p class="text-white">Etiam porta sem malesuada ultricies vehicula.</p>

for anchors
<a href="#" class="text-muted">Muted link</a>
<a href="#" class="text-primary">Primary link</a>
<a href="#" class="text-success">Success link</a>
<a href="#" class="text-info">Info link</a>
<a href="#" class="text-warning">Warning link</a>
<a href="#" class="text-danger">Danger link</a>


Background color (context class color e.g bg-primary can apply to different elements)
<div class="bg-primary text-white">Nullam id dolor id nibh ultricies vehicula ut id elit.</div>
<div class="bg-success text-white">Duis mollis, est non commodo luctus, nisi erat porttitor ligula.</div>
<div class="bg-info text-white">Maecenas sed diam eget risus varius blandit sit amet non magna.</div>
<div class="bg-warning text-white">Etiam porta sem malesuada magna mollis euismod.</div>
<div class="bg-danger text-white">Donec ullamcorper nulla non metus auctor fringilla.</div>
<div class="bg-inverse text-white">Cras mattis consectetur purus sit amet fermentum.</div>
<div class="bg-faded">Cras mattis consectetur purus sit amet fermentum.</div>


Show/Hide content via Responsive Utilities (http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)
**here are no explicit  visible / show  responsive utility classes; you make an element visible by simply not hiding it at that breakpoint size.**
You can combine one .hidden-*-up class with one .hidden-*-down class to show an element only on a given interval of screen sizes. For example, .hidden-sm-down.hidden-xl-up shows the element only on medium and large viewports.

.hidden-*-up classes hide the element when the viewport is at the given breakpoint or wider.
.hidden-*-down classes hide the element when the viewport is at the given breakpoint or smaller.

Print classes

Display Property
.d-block, .d-inline, or .d-inline-block to simply set an element s display property to block, inline, or inline-block (respectively).

There are no explicit  visible / show  responsive utility classes
To display: none. use Responsive utilities e.g. .hidden-xl-down (hidden on all devices).

<div class="d-inline-block bg-warning">
  Boot that strap!
</div>
<div class="d-inline-block bg-warning">
  Strap that boot!
</div>

<div class="invisible">...</div> (hides but still leaves placeholder space)


Position (top and bottom fix while scroll)
<div class="fixed-top">...</div>
<div class="fixed-bottom">...</div>

<iframe>, <embed>, <video>, and <object>
Allow browsers to determine video or slideshow dimensions based on the width of their containing block by creating an intrinsic ratio that will properly scale on any device.


FLOAT
<div class="float-left">Float left on all viewport sizes</div><br>
<div class="float-right">Float right on all viewport sizes</div><br>
<div class="float-none">Don't float on all viewport sizes</div><br>

<div class="float-sm-left">Float left on viewports sized SM (small) or wider</div><br>
<div class="float-md-left">Float left on viewports sized MD (medium) or wider</div><br>
<div class="float-lg-left">Float left on viewports sized LG (large) or wider</div><br>
<div class="float-xl-left">Float left on viewports sized XL (extra-large) or wider</div><br>


*Screenreaders
Hide an element to all devices except screen readers with .sr-only  (disabilities)


Sizing (Width, height)

Width=25%...
<div class="w-25 p-3" style="background-color: #eee;">Width 25%</div>
<div class="w-50 p-3" style="background-color: #eee;">Width 50%</div>
<div class="w-75 p-3" style="background-color: #eee;">Width 75%</div>
<div class="w-100 p-3" style="background-color: #eee;">Width 100%</div>

height=25%...
<div style="height: 100px; background-color: rgba(255,0,0,0.1);">
  <div class="h-25 d-inline-block" style="width: 120px; background-color: rgba(0,0,255,.1)">Height 25%</div>
  <div class="h-50 d-inline-block" style="width: 120px; background-color: rgba(0,0,255,.1)">Height 50%</div>
  <div class="h-75 d-inline-block" style="width: 120px; background-color: rgba(0,0,255,.1)">Height 75%</div>
  <div class="h-100 d-inline-block" style="width: 120px; background-color: rgba(0,0,255,.1)">Height 100%</div>
</div>

You can also use max-width: 100%; and max-height: 100%; utilities as needed.

<img class="mw-100" src="..." alt="Max-width 100%">

<div style="height: 100px; background-color: rgba(255,0,0,0.1);">
  <div class="mh-100" style="width: 100px; height: 200px; background-color: rgba(0,0,255,0.1);">Max-height 100%</div>
</div>


Spacing*** Imp** applies to Bootstrap 4- alpha 6 - http://v4-alpha.getbootstrap.com/utilities/spacing/

To apply to all sizes- xs, sm, md, lg, and xl, leave out the breakpoint

Without size

mt-1   margin-top 1
mb-1   margin-bottom 1
ml-1   margin-left 1
mr-1   margin-right 1
mx-1   margin left and right 1
my-1   margin top and bottom 1

m-1   margin all sides 1
p-1   passing all sides 1


With size ({property}{sides}-{size} for xs and {property}{sides}-{breakpoint}-{size} for sm, md, lg, and xl.)
{property}: m, p
{sides}   : t,b,l,r,x,y or blank all sides
{breakpoint}: xs, sm, md, lg, and xl

mt-1  (xs)  - applies to all sizes - xs, sm, md, lg, and xl

mb-sm-1
mt-md-1     applies 'margin top 1' to   md, lg, and xl  (not applied to xs, sm)
mr-lg-1     applies 'margin right 1' to lg, and xl
mx-lg-1
my-lg-1

(xs)
m-1       applies margin 1 to all sizes - xs, sm, md, lg, and xl
p-1       applies padding 1 to all sizes - xs, sm, md, lg, and xl

(sm, md, lg, and xl)

m-1-md   applies 'margin 1 all sides' to   md, lg, and xl
p-1-lg   applies 'padding 1 all sides' to  lg, and xl


**To center div horizontally-
<div class="mx-auto" style="width: 200px;">  (just need to specify width. width is width of 'centered element' and not the div width)
  Centered element
</div>


**align text left, right, center (per size)
<p class="text-left">Left aligned text on all viewport sizes.</p>
<p class="text-center">Center aligned text on all viewport sizes.</p>
<p class="text-right">Right aligned text on all viewport sizes.</p>

text-md-left: left align on md, lg, and xl
text-lg-left: left align on lg, and xl

<p class="text-sm-left">Left aligned text on viewports sized SM (small) or wider.</p>
<p class="text-md-left">Left aligned text on viewports sized MD (medium) or wider.</p>
<p class="text-lg-left">Left aligned text on viewports sized LG (large) or wider.</p>
<p class="text-xl-left">Left aligned text on viewports sized XL (extra-large) or wider.</p>

** bold/ italic
<p class="font-weight-bold">Bold text.</p>
<p class="font-weight-normal">Normal weight text.</p>
<p class="font-italic">Italic text.</p>


**Vertical alignment

<span class="align-baseline">baseline</span>
<span class="align-top">top</span>
<span class="align-middle">middle</span>
<span class="align-bottom">bottom</span>
<span class="align-text-top">text-top</span>
<span class="align-text-bottom">text-bottom</span>


<table style="height: 100px;">
  <tbody>
    <tr>
      <td class="align-baseline">baseline</td>
      <td class="align-top">top</td>
      <td class="align-middle">middle</td>
      <td class="align-bottom">bottom</td>
      <td class="align-text-top">text-top</td>
      <td class="align-text-bottom">text-bottom</td>
    </tr>
  </tbody>
</table>



****Flexbox (http://v4-alpha.getbootstrap.com/utilities/flexbox/)
***all have responsive variations***

1) display as flex:
<div class="d-flex p-2">I'm a flexbox container!</div>

also has responsive variations:
.d-flex
.d-inline-flex
.d-sm-flex
.d-sm-inline-flex
.d-md-flex
.d-md-inline-flex
.d-lg-flex
.d-lg-inline-flex
.d-xl-flex
.d-xl-inline-flex


2) Direction: Set the direction of flex items in a flex container with direction utilities
se .flex-row to set a horizontal direction (the browser default),
***also has responsive variations***

<div class="d-flex flex-row">
  <div class="p-2">Flex item 1</div>
  <div class="p-2">Flex item 2</div>
  <div class="p-2">Flex item 3</div>
</div>


<div class="d-flex flex-column">
  <div class="p-2">Flex item 1</div>
  <div class="p-2">Flex item 2</div>
  <div class="p-2">Flex item 3</div>
</div>



3) Justify content:  to change the alignment of flex items on the 'main axis' (the x-axis to start, y-axis if flex-direction: column).
also has responsive variations
<div class="d-flex justify-content-start">...</div>
<div class="d-flex justify-content-end">...</div>
<div class="d-flex justify-content-center">...</div>
<div class="d-flex justify-content-between">...</div>
<div class="d-flex justify-content-around">...</div>


4) Align items: to change the alignment of flex items on the 'cross axis' (the y-axis to start, x-axis if flex-direction: column).
<div class="d-flex align-items-start">...</div>
<div class="d-flex align-items-end">...</div>
<div class="d-flex align-items-center">...</div>
<div class="d-flex align-items-baseline">...</div>
<div class="d-flex align-items-stretch">...</div>

5)Align self: to individually change their alignment on the 'cross axis' (the y-axis to start, x-axis if flex-direction: column).
<div class="align-self-start">Aligned flex item</div>
<div class="align-self-end">Aligned flex item</div>
<div class="align-self-center">Aligned flex item</div>
<div class="align-self-baseline">Aligned flex item</div>
<div class="align-self-stretch">Aligned flex item</div>


6)justify-content: Easily move all flex items to one side, but keep another on the opposite end by mixing justify-content with margin-right: auto or margin-left: auto.
<div class="d-flex justify-content-end">
  <div class="mr-auto p-2">Flex item</div>
  <div class="p-2">Flex item</div>
  <div class="p-2">Flex item</div>
</div>

7) align-items: move one flex item to the top or bottom of a container by mixing align-items, flex-direction: column, and margin-top: auto or margin-bottom: auto
<div class="d-flex align-items-start flex-column" style="height: 200px;">
  <div class="mb-auto p-2">Flex item</div>
  <div class="p-2">Flex item</div>
  <div class="p-2">Flex item</div>
</div>


-Wrap
<div class="d-flex flex-nowrap">
  ...
</div>

-Order- We only provide options for making an item first or last, as well as a reset to use the DOM order
<div class="d-flex flex-nowrap">
  <div class="flex-last p-2">First flex item</div>
  <div class="p-2">Second flex item</div>
  <div class="flex-first p-2">Third flex item</div>
</div>

-Align content
Use align-content utilities on flexbox containers to align flex items together on the cross axis.


***Bootstrap Grid*** Responsive, Built with Flexbox

Mobile-first Flexbox grid system

5 Responsive Breakpoints: (extra small), small, medium, large, and extra large

*Imp*
-Grid tiers are based on minimum widths, meaning they apply to that one tier and all those above it
(e.g .col-sm-4 applies to small, medium, large, and extra large devices). but does not apply to extra small

limitations and bugs around flexbox: https://github.com/philipwalton/flexbugs

-Bootstrap uses 'ems' or 'rems' for defining most sizes, pxs are used for 'grid breakpoints' and 'container widths'

Default equal width columns

Images- just specify width using media queries. height will auto adjust- images will scale properly <-----------------------------------------


To apply same for every device and viewport(xs to xl)
Dont specify size (default size will be equal-widths) - unit-less classes

<div class="container">
  <div class="row">
    <div class="col">
      1 of 2
    </div>
    <div class="col">
      1 of 2
    </div>
  </div>
</div>



For grids with same column sizes for all devices and viewports (from xs-xl) use .col and .col-* classes with no sizes

xs - extra small phone
sm - phone   (544px)
md - tablet  (768 px)
lg - desktop (992 px)
xl - wide desktop (1200px)

-Thanks to flexbox, grid columns without a set width will automatically layout with equal widths

Can use flexbox vertical or horizontal align
Can use flex-reorder for controlling the visual order of your content.
Can offset columns

--------------

All heading elements e.g., <h1> and <p> are reset to have their margin-top removed. Headings have margin-bottom: .5rem added and paragraphs margin-bottom: 1rem for easy spacing

Reboot - provide an elegant, consistent, and simple baseline to build upon. We use Reboot, a collection of element-specific CSS changes in a single file, to kickstart that.
Reboot builds upon Normalize

FORMS (http://v4-alpha.getbootstrap.com/content/reboot/)

<fieldset>s have no borders, padding, or margin


hide/show

prefer:
.hidden-xl-down or .hidden-xs-up to always hide Or
<input type="text" hidden>  (http://v4-alpha.getbootstrap.com/content/reboot/#html5-hidden-attribute)

alternatives(still leave placeholder space)
<div class="invisible">...</div> (http://v4-alpha.getbootstrap.com/utilities/invisible-content/)


TABLES (http://v4-alpha.getbootstrap.com/content/tables/)
Ok to use tables instead of divs (supposedly best practice). Boostrap providing functionality
apply .table to any <table>


FORM Validation

http://v4-alpha.getbootstrap.com/components/forms/#how-it-works



-------------------------------


*** Rxjs / Observables ***- check online/books(3)
apress book (do important chapters first? - e.g. Rxjs-Using Reactive Extensions-Observables), ng2 book- pg 271
https://gist.github.com/btroncone/d6cf141d6f2c00dc6b35#filter
https://github.com/Reactive-Extensions/RxJS/tree/master/doc

Search 'Rxjs', 'Observables' in books



Angular 2 with TypeScript
Rxjs: RxJS is a set of libraries for composing asynchronous and event-based programs
using observable collections. It allows applications to work with asynchronous data
streams, such as a server-side stream of stock price quotes or mouse move events. With
RxJS, the data streams are represented as observable sequences

Apress:
This is the Reactive Extensions package, which is used to implement the
Angular change-detection system that is used in data bindings

-RxJS supports dozens of operators that you can use with observable streams


Reactive programming is about creating responsive (fast) event-driven applications,
where an 'observable event stream' is pushed to subscribers.
The observable streams can be canceled, they can notify about the end of a stream, and the data pushed to the subscriber can
be 'transformed' on the way from the source to the subscriber by applying various operators (functions)
They implement the push model of data processing

An observer is an object that handles a data stream pushed by an observable function. A cold observable(the one using) starts streaming
data when some code invokes a subscribe() function on it.

subscribes to an observable: let mySubscription: Subscription = someObservable.subscribe(myObserver);
cancel the stream subscription: mySubscription.unsubscribe();

An observable is an object that streams elements from some data source (a socket, an
array, UI events) one element at a time. To be precise, an observable stream knows
how to do three things:
Emit the next element
Throw an error
Send a signal that the streaming is over (that the last element has been served)

Accordingly, an observer object provides up to three callbacks:
The function to handle the next element emitted by the observable
The function to handle errors in the observable
The function to be invoked when the stream of data finishes

Observable Vs Promises
Promise: Only invoke then() function once
Observables: Sequence of then() invocations. one invocation for
each arriving data element

Observable. Produces a stream of data.
Map: Transforms it
Filter: filters it
Observer gets it
stream of Customer objects that s mapped to
another stream containing only the age property of each customer. The first stream
could be filtered to keep only those customer objects where age < 50

Each operator accepts an observable object as an argument and
returns an observable as well. This allows for chaining operators

Iterators use the pull model to retrieve the data, whereas observables push the data to subscribers

functions applied to arrays: map(), filter(), reduce()

mouse click event: dispatched event as a one-time deal
Angular offers another approach where you consider events observable streams of data happening over time

RxJS supports dozens of operators that you can use with observable streams. Have to import the ones that we want to use.

The debounceTime() operator lets you 'specify a delay' in emitting data elements of a stream

E.g-> Search stock symbol in input box. delay .5 seconds and then submit request to the server

benefits of observables over promises is that the former can be canceled

****typo might result in useless server request. so we have to use switchMap() operator. Cancels original server request if a new one is issued.


user types in the input field produces 2 streams:
1) The observable stream produced by the search field
2) The observable stream produced by the HTTP requests issued while the user is typing in the search field

switchMap() operator: cancels pending server requests, if new ones are issued. Canceling pending requests can t be done with promises
If a new request is issued before the response from the previous one comes back, the switchMap() operator cancels the previous request and sends the new one
to this weather service


****in short- observables can cancel old unfinished requests if a new one is issued. using the below pattern. click, click, click (send server requests).
first 2 server requests are cancelled but the last one is allowed to complete. Can't do this with promises.

2 Observables
this.searchInput.valueChanges    ---> (returns an Observable)
.debounceTime(200)
.switchMap(city => this.getWeather(city))   ---> (getWeather makes http.get request that also returns an Observable)
.subscribe(



You use the switchMap() operator instead of subscribe when the function that handles
data generated by observable can also return an observable. Then you use subscribe()
for the second observable.


Turn on throttling in Chrome Developer Tools, emulating a slow internet connection: https://developers.google.com/web/tools/chrome-devtools/network-performance/network-conditions

Asynchronous HTTP requests can be implemented using callbacks, promises, or observables.

promises have the following shortcomings:
- There s no way to cancel a pending request made with a promise.
- When a promise resolves or rejects, the client receives either the data or an
error message, but in either case it ll just be a single piece of data. A promise
doesn t offer a way to handle a continuous stream of chunks of data delivered
over time.


2 ways http.get


1) Better. Can Test (using subscribe)

constructor(private http: Http) {
   this.theDataSource = this.http.get('/products')   <----Doesn t send a GET request to the /products endpoint of the Node server yet, because no one subscribed to it
   .map(res => res.json());   <--The map() operator converts the data into a JSON string and returns an Observable. No server requests are made until a subscribe() method is invoked.

ngOnInit(){
 // Get the data from the server
 this.theDataSource.subscribe(   <-- The subscribe() method initiates the request to the server. The HTTP GET request is sent to the server only when you invoke the subscribe() method and not when you call the get() method
  data => {
     if (Array


2)Alternative(using Async Pipe- no subscribe)

<li *ngFor="let product of products | async">   <-- subscribe to it automatically. No explicit subscribe

difference between extends (inheritance) and implements (can be used with a class as well. normally used with interfaces)
https://stackoverflow.com/questions/38834625/whats-the-difference-between-extends-and-implements-in-typescript
extends means:
The new class is a child. It gets benefits coming with inheritance. It has all properties, methods as its parent. It can override some of these and implement new, but the parent stuff is already included.

implements means:
The new class can be treated as the same "shape", while it is not a child. It could be passed to any method where the Person is required, regardless of having different parent than Person


constructor(private http: Http) {
  this.products = this.http.get('/products')
    .map(res => res.json());
  }



apress - Chp 23 - 569-593

(Created your own Observer/Observable functionality without http.get) - instead of doing docheck
(click edit on product list, populates edit form on right)

observer: collects the events and distributes them to subscribers through an Observable
observable
Subject: provides both Observer and Observable functionality
providers: [{ provide: SHARED_STATE, useValue: new Subject<SharedState>() }]

productlisttable
expects an observer - distributes events

product form(create/edit-> next to productlisttable)
expects an observable - subscribe to it


Chp 24
this.http.get(this.url).map(response => response.json());

response.json()-> Web api json is converted into a Javascript object  - Observable<Product[] >


Core- Rxjs/Observables:
Angular 2 with TypeScript: 152-163,
Angular 2 with TypeScript: skim 163-169
Angular 2 with TypeScript: 237-278(HTTP requests. skim see Rxjs/Observables part)
Apress Chp 23: 569-593
Apress Chp 24: 593-621
Ng2: 271-333 (not good)

Angular 2 with TypeScript: Form Changes produces observables, Http.get produces observables
Apress chp 23: Custom create observables yourself on edit via subject
Apress chp 24: Http.get produces observables
tour of Heroes: use Subject. obserbavles- switchmap without subscribe (https://angular.io/tutorial/toh-pt6#add-the-search-component-to-the-dashboard) Vs
		pg 160 -Angular 2 with TypeScript- switchmap with subscribe
Switchmap above - automatically subcribes to an observable (https://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html)

subscribe returns --- array<product> and not an observable


Error Handling (pg 618)
1) provide error handling for subscribe method (using rxjs catch)
2) override default error handling mechanism


In Reactive Programming our code subscribes to be notified of changes and the streams  push  data to these subscribers

URLS:
http://reactivex.io/ (good)
http://reactivex.io/documentation/operators.html  (good)
unsubcribing(not params)- https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription
http://rxmarbles.com


so..so
(https://github.com/Reactive-Extensions/RxJS)
https://github.com/Reactive-Extensions/RxJS/tree/master/doc
https://github.com/ReactiveX/rxjs/blob/master/doc/subject.md
https://gist.github.com/btroncone/d6cf141d6f2c00dc6b35#filter

Observable Vs Promise: angular online docs

-------------


Typescript** (skim)
    ***TypeScript*** bottom section
    angular 2 development with typescript book- appendix b
    apress book: Chp 1, 2, 3, 4
    https://www.typescriptlang.org/

   ---so...soo.. dont go over. Reference Material---
   https://github.com/DanWahlin/TypeScriptDemos
   Project 3: https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html
   ---so...soo.. dont go over---


--webapi url dev vs production:
https://www.sitepoint.com/angular-rxjs-create-api-service-rest-backend/

angular documentation
http://angularjs.blogspot.com/2017/06/angular-42-now-available.html
https://github.com/angular/angular/tree/master/aio

official api: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\packages
code for online documentation: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\aio\content
code and content at: https://github.com/angular/angular/tree/master/aio




*take notes & identify features*
-Books skim-
apress book
angular 2 with typescript (reference) -extract any good pointers

Online angular docs skim  reference code: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\aio\content\examples (VsCode)
angular 4.2 documentation code & content live: https://github.com/angular/angular/tree/master/aio


skim this notepad in the following order(Angular 4 related changes(search notepad for 'angular 4'- multiple instances, ES6, Es7, Webapi/core.net, Bootstrap 4, rest...)

skim sample apps

-------------------------------------

redo -resume update after demo app? (take out irrelevant stuff. see indeed job descriptions)


angular services from asp.net core or asp.net webapi
use theme? angular 2 bootstrap theme ? too much built-in functionality vs professional look n feel?? https://startbootstrap.com/template-overviews/modern-business/
vs bootstrap starter theme: http://v4-alpha.getbootstrap.com/examples/starter-template/#
file:///C:/Users/Dan/Downloads/bootstrap-4.0.0-alpha.6/bootstrap-4.0.0-alpha.6/docs/examples/starter-template/index.html

****demo app*** identify features. use some ui features from apps/books
search 'enterprise themes bootstrap 4' alpha 6? alpha 4 classes rename.

form & grid controls- use Ui components identified above (angular material, ng2-bootstrap etc)
bootstrap 4 for styling - search job description stacks used (angular 4 new features, output es5 (target lib:es7, es6), bootstrap use v3.3.7, webpack, angular cli(deployment), ui components, grid?, typescript 2.1-2.3) webapi?
cli prod/dev build

demo app:
  this notepad(es7, es6 other stuff around this notepad skim)
  Bootstrap v4.0.0-alpha.6  [bootstrap 4 beta is 95% complete- 1-2 months] - (knowledge- urls?, new features, online documentation, apress chp html &js)
  Angular Material Design (no dependency on bootstrap)
  Boostrap 4 alpha with Angular 4 - UI components -> https://ng-bootstrap.github.io/#/home (angular core team - also created angular 1 ui directives for bootstrap- https://angular-ui.github.io/bootstrap/#!#datepicker
    (more issues outstanding other one)

  Font-Awesome
  ? https://github.com/crisbeto/angular-svg-round-progressbar

  grid:
  Clarity Design System: (Angular 2 Components)   - no bootstrap dependency      https://vmware.github.io/clarity/get-started  (github stars- 1489)    - got grid
  Teradata covelent (Angular 2 + Material Design) - no bootstrap dependency	 https://teradata.github.io/covalent/#/	   (github stars- 905)	   - got grid, form looks better on mobile/ie


angular cli: https://www.sitepoint.com/ultimate-angular-cli-reference/

-----app brainstorming- refine

concepts/features- Refine/Prioritize- needs to be completed within decent timeframe, realistic deliverable



***identify useful features while skimming through technologies***

use boostrap starter theme or regular theme?

Skim resources
Typescript, Angular 2, Angular 4.2 related  changes(including appress)

Core api/ Webapi 2, EF (notepad?)

Skim Notepad only
Bootstrap 4 alpha, Es6, ES7,  Angular CLI, RXJs\Observables, Skim rest of notepad...

-breadcrumb

Skim Sample Apps

Identify any other useful features
- Lazy loading of routes
- re-use component (without instantiating) - pg 669- appress
- observables/Rxjs switchmap (search textbox webapi)
-route guard on page reload(redirect to main page). like pg156 apress.
-child routes- admin section - authorization guard like sportstore admin- login/logout pg 179


- CSS base + component specific css (build)/ View Encapsulation-default

- folder hierarchy/ best practices

Form, Grid(paging, sorting, filtering, edit/update/create), Mobile Responsive, Chrome/IE, Validation

typescript target es5, lib es7, es6 (use es6 & es7 features), use let(block scope) instead of var

Major components

login, child routes, Reactive Vs Template form, Pipes, Attribute Directive, Structural Directives,
Components, services

angular cli build (dev, prod)

UI/CSS frameworks from the list (angular material etc)

unit testing  - (karma, jasmine, protractor)- put in 2/3 tests
Create and maintain Unit and E2E tests

Reactive programming: Rxjs\Observables, TSLint

---------------------

redo -resume update after demo app? (take out irrelevant stuff. see indeed job descriptions)

Sass/protractor e2e testing only study if needed.
-----------------------------------------------------------------------------------------------------------------------


es6 features (use in typescript since lib in tsconfig can put as es7):
  (Gooood ES6 Resource!!!!) angular 2 development with typescript book- appendix a  (pg 352 continue) -
	ES5 hoisting good example- pg 353
 	ES6 promises good example- pg 377

  Project 1: https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/   (https://github.com/DanWahlin/ES6Samples )
  http://es6-features.org/#Constants
  (good) https://webapplog.com/es6/
  https://medium.com/capital-one-developers/my-12-favorite-es6-es2015-features-76e70397fee0


es7 features:
	   https://webapplog.com/es7-es8/
           https://rainsoft.io/must-know-details-about-es2016-features/
           https://node.university/blog/498412/es7-es8
	   http://www.danielmayor.com/javascript-new-features-in-es7
           https://www.quora.com/What-features-will-be-in-ES7-and-ES8

es6 & es7 ****


use es6 and es7 in tsconfig- lib

Use to test transpiling (es6 to es5): https://es6console.com/, https://babeljs.io/repl

if transpile doesnt change code(i.e. doesnt transpile es6 to es5), you'll probably need a polyfill like   <script src="node_modules/core-js/client/shim.min.js"></script>


check es7 - 1) Array.prototype.includes. can transpile to es5?. need polyfill or ok?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes?v=example


To test Es


**ES8** - nOt yet finalized - Avoid!!! - avoid using as library in tsconfig -(Require polyfill scripts if can't be transpiled to Es5 (assuming target Es5))
Object.values/Object.entries****
String padding
Object.getOwnPropertyDescriptors
Trailing commas in function parameter lists and calls
Async Functions ** major- use when time comes

1) Object.values/Object.entries

Object.values->iterating over object key's values
Object.entries-> return an array of object s own enumerable property key-value pairs (as an array) - https://node.university/blog/498412/es7-es8

Es5
let obj = {a: 1, b: 2, c: 3}
Object.keys(obj).forEach((key, index)=>{
  console.log(key, obj[key])
})


Es6
let obj = {a: 1, b: 2, c: 3}
for (let key of Object.keys(obj)) {
  console.log(key, obj[key])
}


Es8
let obj = {a: 1, b: 2, c: 3}
Object.values(obj).forEach(value=>console.log(value)) // 1, 2, 3

or

let obj = {a: 1, b: 2, c: 3}
for (let value of Object.values(obj)) {
  console.log(value)
}
// 1, 2, 3


2) String padding
padStart() returns a string of a given length (targetLength) by inserting pads at the beginning
console.log('react'.padStart(10).length)         // "       react" is 10


3)Object.getOwnPropertyDescriptors
4) Trailing commas in function parameter lists and calls
5)


start here <------------------------------------------------

ES7 and ES6 Cheatsheet-------------------------------

Array functions
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes?v=example

String functions
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

Good Resources
https://webapplog.com/es6/
https://medium.com/capital-one-developers/my-12-favorite-es6-es2015-features-76e70397fee0
(Gooood ES6 Resource!!!!) angular 2 development with typescript book- appendix a  (pg 352 continue) -
	ES5 hoisting good example- pg 353
 	ES6 promises good example- pg 377


ES7 <---
 let countries = ['UK', 'USA', 'Ireland', 'France'];
 countries.includes('UK', 1);

ES6 <---
Block scoping with let and const
Block scope for functions
Template Literals  `You've earned ${region} ${amount}!`
Multiline strings using backtick
"hello".startsWith("ello", 1)
[ 1, 3, 4, 2 ].find(x => x > 3) // 4
[ 1, 3, 4, 2 ].findIndex(x => x > 3) // 2
Object.assign(this.product, repository.getProduct(activeRoute.snapshot.params["id"]));
for of loop (forEach(),  for-in)
arrow functions -  var myArray = [1,2,3,4,5]; myArray.reduce((a,b) => a+b));
classes
Optional parameters and default parameters
Rest and spread operators
Sets    The Set object lets you store unique values of any type, whether primitive values or object references.

Promises
Destructuring Assignment    var [total, tax] = [9.99, .50];
Map object  he Map object holds key-value pairs

const names = ["Alice", "Bob", "Eve"];

for (const item of names) {
}

names.forEach((s) => {
  console.log(s.toUpperCase());
});

1) Default Parameters in ES6
2) Template Literals in ES6
3) Multi-line Strings in ES6
4) Destructuring Assignment in ES6
5) Enhanced Object Literals in ES6
6) Arrow Functions in ES6
7) Promises in ES6
8) Block-Scoped Constructs Let and Const
9) Classes in ES6
10) Modules in ES6

misc
Generators

----cheatsheet end------------------------------




***ES7*** (Require polyfill scripts if can't be transpiled to Es5 (assuming target Es5)) -finalized June 2016- can use in tsconfig - Yes
1) Array.prototype.includes*****
2) Exponentiation Operator

***1- Array.prototype.includes*** https://node.university/blog/498412/es7-es8  - array of strings or #'s. for objects only matches same reference.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes?v=example

let arr = ['react', 'angular', 'vue']

if (arr.includes('react')) {
  console.log('Can use React')
}

let str = 'React Quickly'

if (str.toLowerCase().includes('react')) {  // true
  console.log('Found "react"')
}

let items = ['1', 5, 8];
items.includes(1); // => false
items.includes(8); // => true

the method array.includes(element, [fromIndex]) accepts a second optional parameter fromIndex, which enables searching from a specific index -
let countries = ['UK', 'USA', 'Ireland', 'France'];
countries.includes('UK', 1);      // => false
countries.includes('Ireland', 1); // => true
countries.includes('USA', 6);     // => false




***2- Exponentiation Operator***  - 'Raise to'  https://node.university/blog/498412/es7-es8
let a = 7 ** 12
let b = 2 ** 7
console.log(a === Math.pow(7,12)) // true
console.log(b === Math.pow(2,7)) // true



***ES6*** (Require polyfill scripts if can't be transpiled to Es5 (assuming target Es5))
Don't use var anymore in javascript applications. Use let. if you re developing a new application, don t use var. Use letinstead
Use for-of loops(you can break loop) instead of foreach(cannot break loop but have access to index value) or for-in(iterates through non-data properties as well (pg 368 -  angular 2 development with typescript book- appendix a)
ES6 introduced the keywords class and extends. Superclass, Subclass

ES7*****************



ES6*****************
Top 10 Es6 features:
1) Default Parameters in ES6
2) Template Literals in ES6
3) Multi-line Strings in ES6
4) Destructuring Assignment in ES6
5) Enhanced Object Literals in ES6
6) Arrow Functions in ES6
7) Promises in ES6
8) Block-Scoped Constructs Let and Const
9) Classes in ES6
10) Modules in ES6

Scope of variables:
ES5 - Regardless of where you declare a variable with the keyword var, the declaration is moved to the top of the scope. This is called hoisting
ES6 eliminates this hoisting confusion (discussed in the next section) by introducing the keyword let

Misc: Computed Property Names, Tagged template strings, String Repeating

Promise: First class representation of a value that may be made asynchronously and be available in the future. ->   http://es6-features.org/#PromiseUsage

Promise combination: Combine one or more promises into new promises without having to take care of ordering of the underlying asynchronous operations yourself. -> http://es6-features.org/#PromiseCombination

Resolving several promises at once. Promise.all([getWeather(), getStockMarketNews(), getTraffic()])
.then(renderGUI); pg 380

import/export modules- on top of typescript file
The main difference between a module and a regular JavaScript file is
that when you add a file to a page with a <script> tag, it become part of a
global context, whereas the declarations in modules are local and never
become part of the global namespace. Even exported members are available
only to those modules that import them.


Number Type Checking
Number.isNaN(42) === false
Number.isNaN(NaN) === true

Number Truncation (Es6)
console.log(Math.trunc(42.7)) // 42
console.log(Math.trunc( 0.1)) // 0
console.log(Math.trunc(-0.1)) // -0

String Searching:
Es6
"hello".startsWith("ello", 1) // true  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
"hello".endsWith("hell", 4)   // true
"hello".includes("ell")       // true
"hello".includes("ell", 1)    // true
"hello".includes("ell", 2)    // false

Es5
"hello".indexOf("ello") === 1;    // true
"hello".indexOf("hell") === (4 - "hell".length); // true
"hello".indexOf("ell") !== -1;    // true
"hello".indexOf("ell", 1) !== -1; // true
"hello".indexOf("ell", 2) !== -1; // false

CLasses:
 class definition, class inheritance, Static members, getters, setters   : http://es6-features.org/#ClassInheritance

Array Element Finding
ES6 (use find)
[ 1, 3, 4, 2 ].find(x => x > 3) // 4
[ 1, 3, 4, 2 ].findIndex(x => x > 3) // 2

Es5
[ 1, 3, 4, 2 ].filter(function (x) { return x > 3; })[0]; // 4 (had to use filter)

***Object.Assign***  (Important...)
New function for assigning enumerable properties of one or more source objects onto a destination object.

Object.Assign is only available in Es6. Cannot be transpiled to Es5. so we need to include the below polyfill so that we can get the functionality in the browser
polyfill library add-<script src="node_modules/core-js/client/shim.min.js"></script>

apress: Object.assign(this.product, repository.getProduct(activeRoute.snapshot.params["id"]));

var dst  = { quux: 0 }
var src1 = { foo: 1, bar: 2 }
var src2 = { foo: 3, baz: 4 }
Object.assign(dst, src1, src2)
dst.quux === 0
dst.foo  === 3
dst.bar  === 2
dst.baz  === 4


Loops- The for...of statement creates a loop iterating over iterable objects (including Array, Map, Set, String, TypedArray, arguments object and so on)
For-Of operator
let iterable = [10, 20, 30];
for (let value of iterable) {
  value += 1;
  console.log(value);
}



modules- import or export: Support for exporting/importing values from/to modules without global namespace pollution.

constant**
const PI = 3.141593
PI > 3.0

arrow function
Es6 (preserves lexical this)
nums.forEach(v => {
   if (v % 5 === 0)
       fives.push(v)
})

Es5
nums.forEach(function (v) {
   if (v % 5 === 0)
       fives.push(v);
});
0) Multi-line comments using backtick (spaces preserved)

var message = `Please enter a password that
has at least 8 characters and
includes a capital letter`;

console.log(message);


1) ***Arrow Functions***

Old Way
this.timeout = function() {
        setTimeout(function() {
            console.log(self._seats++);
        }, 1000);
    }
New Way
this.timeout = function() {
        setTimeout(() => {
            console.log(self._seats++);
        }, 1000);
    }

inline functions just replace with arrow functions
$('.btn').click(function(event){
  _this.sendData()
})
$('.btn').click((event) =>{
  this.sendData()
})

2)  ***Classes***
class BaseLog {
    constructor(logName) {
        this.logName = logName;
    }

    log(msg) {
        console.log(this.logName + ': ' + msg);
    }
}

class Logger extends BaseLog {

    constructor(logName) {
        super(logName);
    }

    writeLine(msg) {
        super.log(msg + '\r\n');
    }
}


3) ***Destructuring***
Old Way
var values = [9.99, .50];
var oldTotal = values[0],
    oldTax = values[1];


New Way Destructuring
var [total, tax] = [9.99, .50];
var {total2, tax2} = {total:9.99, tax:.50};

console.log('Destructuring an array.');
console.log('Total: ' + total + ' Tax: ' + tax); OR
console.log(`Total:  ${total}  Tax:  ${tax}`);  (backtick!!)

console.log('\nDestructuring an object literal.');
console.log('Total2: ' + total2 + ' Tax2: ' + tax2);

ES5
var body = req.body, // body has username and password
  username = body.username,
  password = body.password

ES6
var {username, password} = req.body

4) ***Map object***
The Map object holds key-value pairs
var myMap = new Map();
myMap.set('key', "value associated with 'a string'");

myMap.get('key');    // returns value associated with 'a string'



5)***Parameters*** default and ...params

Rest and Spread Parameters in ES6

--Rest parameters syntax and it s defined with ellipses
function(url, options, ...callbacks) {
  var callback1 = callbacks[0]
    var callback2 = callbacks[2]
  // ...
}

--Spread Parameters
function request(url, options, callback) {
  // ...
}
var requestArgs = ['http://capitalone.io', {...}, function(){...}]
request(...requestArgs)

---
class Car {

    //The year parameter is a "default parameter"
    setDetails(make = 'No Make', model = 'No Model', year = this.currentYear(), ...accessories) {
        console.log(make + ' ' + model + ' ' + year);
        if (accessories) {
            for (var i = 0; i < accessories.length; i++) {
                console.log('\n' + accessories[i]);
            }
        }
    }
}

var car = new Car();
//Testing default parameters
car.setDetails('Toyota', 'Tundra');
car.setDetails();

//Testing rest parameters
car.setDetails('Toyota', 'Tundra', 2015, 'sunroof', '4X4', '4-door');


1) Optional parameters

function calcTaxES5(income, state){
}
alcTaxES5(50000);

2) default value parameter
function calcTaxES6(income, state = "Florida") {
}
calcTaxES6(50000);

3) function parameter
function calcTaxES6(income, state = getDefaultState()) {

}
function getDefaultState(){
   return "Florida";
}


6) ***Var Vs Let***- let has block scope- curly braces like c#. var does not.
var age = 55;

for (let i = 0; i < 5; i++) {
    age += 5;
}

try {
    console.log(i); //i is out of scope. age is in scope
} catch (e) {
    console.log('i is out of scope due to using let!');
}


-The super keyword and the super function

-class getters and setters
var Tax = {
  taxableIncome:0,
  get income() {return this.taxableIncome;},
  set income(value){ this.taxableIncome=value},
  calculateTax(){ return this.taxableIncome*0.13}
};



- static variables. define outside of class
class A{
}
A.counter = 0;
var a1 = new A();
A.counter++;
console.log(A.counter);
var a2 = new A();
A.counter++;
console.log(A.counter);


7) ***Sets***
The Set object lets you store unique values of any type, whether primitive values or object references.
var mySet = new Set();

mySet.add(1); // Set { 1 }
mySet.add(5); // Set { 1, 5 }
mySet.add(5); // Set { 1, 5 }
mySet.add('some text'); // Set { 1, 5, 'some text' }

mySet.has(1); // true
mySet.has(3); // false, 3 has not been added to the set


8) ***Template Strings***

class Car {
    constructor(make, model, engine, price) {
        this._make = make;
        this._model = model;
    }

    get make() {
        return this._make;
    }

    get model() {
        return this._model;
    }


    start() {
        //Use a template string
        return `${this.make} ${this.model} with a  ${this.engine} engine is started!`; //backtick
    }

    getTotal() {
        return `Total cost is: ${(this._price * this._taxRate) +
                this._price}`;
    }
}

Old Es5 way (cocatenation)
var customerName = "John Smith";
console.log("Hello" + customerName);

New Es6 way
var customerName = "John Smith";
console.log(`Hello ${customerName}`);  (backtick)

9) **WeakSets and WeakMaps**
similar to sets and maps but with restrictions

Reflection: Make calls corresponding to the object meta-operations.
let obj = { a: 1 }
Object.defineProperty(obj, "b", { value: 2 })
obj[Symbol("c")] = 3
Reflect.ownKeys(obj) // [ "a", "b", Symbol(c) ]



-----------------------------------------------------------------------------------------------------------------------

****NG2 FORMS- TEMPLATE Vs REACTIVE******

 Angular 2 - Regular Forms Vs Reactive Forms--

Resources List:

books
   apress chp 14- forms
   angular 2 with typescript - chp 7  (so, so)
   ng 2 ?? pg 136? (so, so)


urls

    official guide - template driven: https://angular.io/docs/ts/latest/guide/forms.html
    official guide - reactive forms : https://angular.io/docs/ts/latest/guide/reactive-forms.html
    official guide - Validation- template and reactive - https://angular.io/docs/ts/latest/cookbook/form-validation.html (good!!!) https://plnkr.co/edit/?p=preview (demo)


    http://learnangular2.com/forms/
    https://toddmotto.com/angular-2-forms-reactive
    https://toddmotto.com/angular-2-forms-template-driven
    http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/
    http://blog.angular-university.io/introduction-to-angular-2-forms-template-driven-vs-model-driven/
    good? https://blog.thoughtram.io/forms-in-angular-2/  (so so)




pluralsight
     https://app.pluralsight.com/library/courses/angular-2-forms/table-of-contents (so so, reference material)


apps
     Dan Wahlin
    0) Project 6 - https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
                   https://github.com/DanWahlin/Angular-Forms
                   ? https://app.pluralsight.com/library/courses/angular-nodejs-restful-services/table-of-contents

    1) Reference material - Template Vs Reactive Forms. Get source code
       https://app.pluralsight.com/library/courses/angular-nodejs-restful-services/table-of-contents
       local folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\19_AngularForms_DanWahlin_Template_Reactive\Angular-NodeJS-MongoDB-CustomersService-master

    2) chsakell: https://chsakell.com/2016/06/27/angular-2-crud-modals-animations-pagination-datetimepicker/
		 folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\12_CRUD_Angular_4_Asp.net_Core_Rest_Api

    3) pluralsight -(form validation including custom validation) https://app.pluralsight.com/library/courses/angular-2-reactive-forms/table-of-contents

    4) not good - just template form- required- Project 9 - Dan Wahlin  -local folder- Project 10 under https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/

    5) ok-
           (customer-edit is template form and login-component is reactive form)
	   https://github.com/DanWahlin/Angular-JumpStart, C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\06_Dan_Wahlin_Angular_Jumpstart
	   (Using template-driven and reactive forms functionality for capturing and validating data)-


---------------Reactive Form Resources-----------------------------

forms api: https://angular.io/api/forms

1) Template form
2) Template form with validations in code
3) Reactive form

Top Resources
1) Online Documentation  (1st Plunker link sample: https://angular.io/guide/form-validation, 2) Pluker link: https://angular.io/guide/reactive-forms)
2) Dan wahlin's Sample (Forms-Template_Reactive_DanWahlin\src\app\reactiveForm)
3) Dan wahlin's Sample 2 (19_AngularForms_DanWahlin_Template_Reactive\Angular-NodeJS-MongoDB-CustomersService-master\src\public\app\customers\customer-edit-reactive.component.ts)

validation on 2 or more fields using reactive:  https://bertrandg.github.io/angular2-forms-form-group-validation/


angular 2 with typescript book  (so so- formgroup combo validation 2 fields, password and confirm password)
apress book and (so so- validation classes?)


Reactive form Usage Scenarios:
1) Advanced Validation or
2) Large Form with Validation (each field block in html can become large in template form)

Template form Usage Scenarios:
1) Small form
2) Small form with minimal Validation



https://angular.io/api/forms/AbstractControl#errors

how to Identify a Reactive Form:  no ngModel, has formcontrolname or formgroup or
plus can have custom validators as well



Purpose: Redo Template form with Validation with Reactive Form

validators: https://angular.io/api/forms/Validators


Reactive Forms
https://angular.io/guide/reactive-forms


Reactive Forms Validation
https://angular.io/guide/form-validation
official guide - Validation- template and reactive - https://angular.io/docs/ts/latest/cookbook/form-validation.html (good!!!) https://plnkr.co/edit/?p=preview (demo)



Apress Chp 14  (324-336)    (So. So..  go by angular online docs)
Angular 2 with Typescript Chp 7  (215-236)


Sample apps
Form Validation example plunker: https://angular.io/guide/form-validation#form-validation
https://github.com/DanWahlin/Angular-Forms   (project 6- https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/)
08_Angular_4_CRUD_Example  (reactive forms, components...) else ok




--------notes---


debugging reactive form. put after </form> tag
<p>Form value: {{ heroForm.value | json }}</p>
<p>Form status: {{ heroForm.status | json }}</p>


component
'data model'    - model
'form control'  - template


-you create a tree of Angular 'form control' objects in the component class and bind them to 'native form control' 'elements' in the component 'template'

-As the component class has immediate access to both the 'data model' and the 'form control' structure, you can push 'data model' values into the 'form controls'
and pull user-changed values back out.


template forms(complicate development in more advanced scenarios) are asynchronous. reactive forms are synchronous
https://angular.io/guide/reactive-forms#async-vs-sync

-in template driven forms, you may need to use setTimeout()

 Template-driven forms delegate creation of their form controls to directives. To avoid "changed after checked" errors, these directives take more than one cycle to build the entire control tree. That means you must wait a tick before manipulating any of the controls from within the component class.
 For example, if you inject the form control with a @ViewChild(NgForm) query and examine it in the ngAfterViewInit lifecycle hook, you'll discover that it has no children. You must wait a tick, using setTimeout, before you can extract a value from a control, test its validity, or set it to a new value.



The focus of this guide is a reactive forms component that edits a hero

export class Hero {
  id = 0;
  name = '';
  addresses: Address[];
}

export class Address {
  street = '';
  city   = '';
  state  = '';
  zip    = '';
}

{
    id: 1,
    name: 'Whirlwind',
    addresses: [
      {street: '123 Main',  city: 'Anywhere', state: 'CA',  zip: '94801'},
      {street: '456 Maple', city: 'Somewhere', state: 'VA', zip: '23226'},
    ]
  }


export const heroes: Hero[] = [
export const states = ['CA', 'MD', 'OH', 'VA'];

FormControl is a 'directive' that allows you to create and manage a FormControl instance directly

name = new FormControl();
It will be bound in the template to an HTML input box for the hero 'name'


FormControl constructor accepts three, optional arguments:
1) the initial data value,
2) an array of validators, and
3) an array of async validators


****Reactive Forms Core classes****
AbstractControl: 'abstract base' class for the three concrete 'form control' classes: FormControl, FormGroup, and FormArray. It provides their common behaviors
		 and properties, some of which are observable
FormControl: tracks the 'value' and 'validity status' of an individual 'form control'. It corresponds to an HTML form control such as an input box or selector
FormGroup:   tracks the 'value' and 'validity' state of a group of AbstractControl instances
FormBuilder: helps reduce 'repetition' and 'clutter' by handling details of control creation for you

FormArray:   tracks the 'value' and 'validity' state of a numerically indexed array of AbstractControl instances  (eg a list within an object. Heroes.adresses [])
             Use FormArray to present an array of FormGroups

A FormGroup is a named object whose property values are FormControls and other FormGroups

https://angular.io/guide/reactive-forms#add-a-new-lair-to-the-formarray
<button (click)="addLair()" type="button">Add a Secret Lair</button>
<button (click)="addLair()" type="submit">Save Changes</button>      invokes submit action


***just form control***
export class HeroDetailComponent1 {
  name = new FormControl();
}
<input class="form-control" [formControl]="name">          <-----with no formGroup, use [formControl]


// deep copy of form model lairs
  const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(
    (address: Address) => Object.assign({}, address)
  );


***formgroup with form control***
 heroForm = new FormGroup ({
    name: new FormControl()
  });

<form [formGroup]="heroForm" novalidate>
      <input class="form-control" formControlName="name">  <----- with formGroup, use formControlName
</form>


formGroup is a reactive form directive that takes an existing FormGroup instance and associates it with an HTML element


*** with formBuilder*****
export class HeroDetailComponent3 {
  heroForm: FormGroup; // <--- heroForm is of type FormGroup

  constructor(private fb: FormBuilder) { // <--- inject FormBuilder
    this.createForm();
  }

  createForm() {
    this.heroForm = this.fb.group({
      name: '', // <--- the FormControl called "name"
    });
  }
}


The 'hero' from the server is the  'data model'
The 'FormControl' structure is the 'form model'


***User changes flow from the DOM elements to the 'form model', not to the data model. The 'form controls' never update the 'data model'***



*****data model*****
export class Hero {
  id = 0;
  name = '';
  addresses: Address[];
}

export class Address {
  street = '';
  city   = '';
  state  = '';
  zip    = '';
}



*****form model*****
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  address: this.fb.group({
    street: '',
    city: '',
    state: '',
    zip: ''
  }),
  power: '',
  sidekick: ''
});


initialize or reset the values later with the
1) setValue   ->   you assign every form control value at once
2) patchValue methods -> you can assign values to specific controls for just the controls of interest

But unlike setValue, patchValue cannot check for missing control values and does not throw helpful errors




Apress Chp 14  (324-336)  (so,..So



Angular 2 with Typescript Chp 7  (215-236)

Form Group Validators. Validating 2 fields together (Password and confirm Password) pg 225













-----------------------------------------------------------------------

https://toddmotto.com/angular-2-forms-reactive


Reactive Forms
More complex business validations in form then use reactive form (combination of 2 properties etc)
More thorough validations + can unit test- major benefit)


---------------------------------------------------------

template based form input
<form novalidate #form="ngForm" (ngSubmit)="submitForm(form)">

<input class="form-control" [(ngModel)]="newProduct.name"
name="name"
#name="ngModel"
required
minlength="5"
pattern="^[A-Za-z ]+$"/>

reactive/modal forms
<input class="form-control" name="name" [(ngModel)]="newProduct.name"
formControlName="name" />


Template-driven forms: FormsModule  -> NgModel, NgModelGroup, and NgForm Directives (validation in html- validation messages in html or code)
   https://angular.io/docs/ts/latest/cookbook/form-validation.html
   -Can have custom validators
   1) Template forms with validatators in html and validation messages in html as well (simple but longer) -look around coworkers expertise-
   2) Template forms with validatators in html but validation messages in code (relatively more complex but concise) -can unit test?

Reactive forms: ReactiveFormsModule -> FormControl, FormGroup  (dont use ngmodel) - ***more thorough validations + can unit test- major benefit)
   - validatators and validation messages in code. (Not necessarily. reactive e.g. Dan Wahlin with validatators in code but validation messages in html - https://github.com/DanWahlin/Angular-Forms   project 6- https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/)
   - Reactive forms do not use data binding (no ngModel)
   -Can have custom validators

novalidate-> turn off browser's validation

-------------------------------------------------------------------------------------------------

 Angular 2 Breeze template- skim- good? https://github.com/Breeze/temphire.angular
 https://stackoverflow.com/questions/42692472/visual-studio-2017-error-unable-to-start-program-an-operation-is-not-legal-in


angular 2/4 Change Detection: https://www.youtube.com/watch?v=jvKGQSFQf10
john papa (eject angular cli to use webpack):  https://www.youtube.com/watch?v=h7eVZg3j_Lk


NPM   (Node.js modules. includes front end packages as well)
Bower (front end client packages- html, css, js )
Nuget (server side packages)

starter kits
  https://github.com/AngularClass/angular-starter
  https://github.com/preboot/angular2-webpack

this.route.parent -> How do I navigate to a parent route from a child route?


index.ts - > https://stackoverflow.com/questions/37564906/what-are-all-the-index-ts-used-for

dev, prod api url/settings  in environments folder


need a polyfill if a browser/js feature is not in the target es standard.
polyfill will make browser support a feature when its doesnt support it

e.g. Use Object.assign in Typescript which is in es6. Its ok since your library in tsconfig is Es6.
after transpiling to Es5 you will need a polyfill since Object.assign cannot be transpiled to Es5. It doesn't exist.
The polyfill will make Object.assign available in Es5 browser.




ES6 anyway supports Object.assign, so if your target is ES6, you should be able to write it in TypeScript anyhow.
But if you transpile to es5 and below, you'd still need a polyfill, because es5 doesn't have Object.assign*** new feature only in es6 and not in es5


subscribe to observable<response>
.subscribe(success, failure, complete);
https://stackoverflow.com/questions/34671715/angular2-http-get-map-subscribe-and-observable-pattern-basic-understan


angular polyfills: missing features in browser that angular relies upon (Angular is built on the latest standards of the web platform)
https://angular.io/docs/ts/latest/guide/browser-support.html

Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers.


**dan wahlin: angular jumpstart


url reference: https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api

webapi calls have /api/ infront to prevent collision from MVC routing

o find the action, Web API looks at the HTTP method, and then looks for an action whose name begins with that HTTP method name(HttpGet-->GetProduct, HttpDelete-->DeleteProduct).  https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/routing-in-aspnet-web-api

-Webapi 2 uses IHttpActionResult. Webapi 1 used HttpResponseMessage

HTTP Method	URI Path	Action	Parameter
GET	api/products	GetAllProducts	(none)
GET	api/products/4	GetProductById	4
DELETE	api/products/4	DeleteProduct	4
POST	api/products	Post (or PostProduct?)      product send in body  -Create
PUT     api/products/4  Put (or PutProduct)   4     product send in body  -Update

**See Gene by Gene Sample App

 Webapi 2								Webapi 1
 public IEnumerable<Product> GetAllProducts() { }
 public async Task<IHttpActionResult> GetProductById(int id)                 -- public Product GetProductById(int id) { }
 public async Task<IHttpActionResult> DeleteProduct(int id)                  -- public HttpResponseMessage DeleteProduct(int id){ }
 public async Task<IHttpActionResult> Post([FromBody]Product product)        --public HttpResponseMessage Post([FromBody]Product product)
 public async Task<IHttpActionResult> Put(int id, [FromBody]Product product) --public HttpResponseMessage Put(int id, [FromBody]Product product)

 https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/create-a-rest-api-with-attribute-routing
 https://docs.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5

Action	HTTP method	Relative URI

Get a list of all products	GET	/api/products
Get a product by ID		GET	/api/products/id
Get a product by category	GET	/api/products?category=category
Create a new product		POST	/api/products
Update a product		PUT	/api/products/id
Delete a product		DELETE	/api/products/id


api services:

baseUrl- see See Gene by Gene Sample App

 /api/customers/page/:skip/:top
 app.get('/api/customers'
 app.get('/api/customers/:id'

 app.post('/api/customers'  (body)  create
 app.put('/api/customers/:id'       update  http.put(url, entity);
 app.delete('/api/customers/:id'    delete

 app.get('/api/orders/:id'


 app.get('/api/states'
 app.post('/api/auth/login'
 app.post('/api/auth/logout'


Action	HTTP method	Relative URI

Get a list of all products	GET	/api/products
Get a product by ID		GET	/api/products/id
Get a product by category	GET	/api/products?category=category
Create a new product		POST	/api/products
Update a product		PUT	/api/products/id
Delete a product		DELETE	/api/products/id


ui routing:



 media query within each css- e.g. dashboard.component.css in Official- Angular Tour of Heroes

Angular 4 update for Apress book & source code:  Since I wrote the original text, the angular-cli package has become the most common way to create and develop Angular projects.
 https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0

 update sportsstore to use ng4. take out moduleId: module.id, //to support relative urls. dont have to in ng4 --done


Angular CLI + Angular 4  -- Done**
  The Angular CLI makes it easy to create an application that already works, right out of the box. It already follows our best practices!

  Angular CLI deployment Vs Manual Apress (bundling & minification & cache busting) - production specific setting- isprod then use this - todo- package.json scripts section
  (3 books plus online)- checkout source code- 3rd app- Sample Code/folders- ng-book

  create a new project using angular cli- default directory structure- see config settings- come back to sportastore- move index.html
  see above projects- e.g. john papa - tour of heroes uses angular cli


  https://www.npmjs.com/package/angular-cli
  https://cli.angular.io/
  https://github.com/angular/angular-cli/wiki
  https://www.sitepoint.com/ultimate-angular-cli-reference/
  https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  https://scotch.io/tutorials/use-the-angular-cli-for-faster-angular-2-projects
  https://juristr.com/blog/2016/12/configure-aot-with-angular-cli/

  todo*** : print out- apress angular 4 and angular cli changes- book update: https://github.com/Apress/pro-angular-2ed/blob/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0/Summary%20of%20Changes%20for%20Angular%204.pdf


  Using angular-cli means that you don t have to
	1) configure a module loader (systemjs)
        2) TypeScript compiler (tsconfig)
        3) NPM packages or
        4) set up a development HTTP server
        5) No script tags in index.html


   2. The project structure created by angular-cli puts the application functionality into the <project>/src/app folder rather than the <project>/app folder that I used in the original examples.
   3. You don t have to include app in a component s templateUrl property because angular-cli uses a different configuration to resolve file paths.
   4) You can omit the moduleId property from the @Component decorator.

   If you are a Visual Studio user (the full Visual Studio project, rather than Visual Studio Code) then the process for working with Angular projects is more complicated, especially if you want to add Angular to an ASP.NET Core MVC project. I I plan to prepare a separate update
   for using Angular in Visual Studio, which you will be able to download for free from the GitHub repository for this book.

   Since the release of Angular 2, the angular-cli package has become the standard way to create and manage Angular projects.


Angular 4 related  changes
  New SystemJs plugin: systemjs-angular-loader.js. No need to write @Component({ moduleId: module.id })
  replace template with ng-template
  if...else & if, then else. syntax in component HTML templates
  Animation  package has been moved out to a separated package
  Faster and smaller (AOT compilation)
  Functional Code Splitting/Lazy Loading with Angular CLI

  ngIf with else
  <div *ngIf="races.length > 0; else empty"><h2>Races</h2></div>
  <ng-template #empty><h2>No races.</h2></ng-template>



   **Dev**
   npm install  (install node_modules)
   ng build or ng build --dev for Dev build (creates dist folder with bundles)
   cd dist
   ng serve (to run from dist)

   **Prod** (see below. ng serve deleted dist directory)
   ng build --prod    (default aot enabled with uglifying and tree-shaking functionality for prod .with All builds make use of bundling, and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality)
   cd dist
   ng serve --prod (to run from dist)
   ng build --prod --base-href /SamplesUI/   ---dooooo

   angular-cli view encapsulation - global and local working fine out of the box (no need to set viewencapsulation)

   vs code multiple instances:  https://stackoverflow.com/questions/29964825/how-does-one-open-multiple-instances-of-visual-studio-code


  -create a project default directory
  -run ui
  -bundling & minification & cache busting
  -angular-cli.json configuration


  - index.html:  The CLI automatically adds all js and css files when building your app so you never need to add any &lt;script&gt; or &lt;link&gt; tags here manually

  tsconfig.app.json:  TypeScript compiler configuration for the Angular app
  tsconfig.spec.json: For the unit tests

-----------------------------------------------------------------------------------------------------------------------

angular 4

**Imp****** angular Cli - lazy loaded routes modules** works.
 angular team created a webpack plugin to make this happen- https://www.youtube.com/watch?v=r-a2f0T8CG0
no need for webpack.

Angular CLI: can do code splitting(like webpack). lazy loaded modules (https://www.youtube.com/watch?v=r-a2f0T8CG0)
sample admin feature module only load when nvigate to admin: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\01_SportsStore_aManuallyUpgraded_Angl4_CLI1\SportsStore\dist

created for each lazy loaded feature module- angular cli
0.chunk.js bundle
1.chunk.js

<li *ngFor="let user of userObservable | async as users; index as i">
  {{user.name}} (user {{i}} / {{users.langth}})

ngfor: can reference user object, users collection and index i


rename <template> to <ng-template>

TypeScript 2.0 strict null checks: In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void).
angular 4 has support for it - compiler options..


-------------------

angular 4  from Angular team : https://www.youtube.com/watch?v=r-a2f0T8CG0

tsconfig exclude: node_modules- instructing typescript compiler= do not compile node_modules


to get data put dal call to ngOnInit and not in the constructor for best practices. constructor initialization is only for injected variables

component specific service - put in component.ts- providers: [HeroSearchService]

http.get returns Observable

converting Observable to a Promise is often a good choice if you just need to get and display a single chunk of data. When you receive the data, you're done. The calling component can easily consume a single result in the form of a Promise

for request-cancel-new-request, use Observables. like searching via textbox and getting results. repeated HTTP requests for heroes filtered by that name.

The switchMap operator maps the id in the Observable route parameters to a new Observable, the result of the HeroService.getHero() method.
If a user re-navigates to this component while a getHero request is still processing, switchMap cancels the old request and then calls HeroService.getHero() again.

disable the button once the user has submitted the form, preventing
the user from clicking it again until all the validation errors have been resolved


*ngFor="let product of products | async">

products is Observable<Array<string>> so we have to use | async to unwrap the array elements from the observable
if products was just Array<string>, then we won't need it.

ViewEncapsulation: https://medium.com/dev-jam/understanding-angulars-viewencapsulation-5d8638859d4a

Shadow Dom- IE 11 doesn't support : http://caniuse.com/#feat=shadowdom
ViewEncapsulation: angular 2 with typescript pg 85
default: ViewEncapsulation.Emulated (seperate component css from other css)
         ViewEncapsulation.None (put css in the dom's head. apply it on application level so you can have it applied to the whole application)

moduleId: module.id, //to support relative urls. dont have to in ng4

safe navigation property: In this example, I have applied the ?
character after the errors property, which means Angular won t try to read the required, pattern, or
minlength properties if the error property hasn t been defined.
<li *ngIf="name.errors?.required">
   You must enter a product name
</li>



Template reference variables are a form of template variable that can be used to refer to elements within the template,
<input #product class="form-control" (input)="false" />

<tr *ngFor="let item of getProducts(); let i = index"
(mouseover)="product.value=item.name"
[class.bg-info]="product.value==item.name">

breezejs
https://github.com/AngularClass/awesome-angular (go through compoenents section, custom pipes orderby--)  ******must skim
https://jobs.systemoneservices.com/VuLDAU/software-engineer-information-technology-houston-texas-114499?originalsource=Indeed.com
Create Skeleton Solution- files/folders hierarchy with deployment (angular cli or webpack - bundling, minification, lazy loading modules.  ahead-of-time (AOT) compilation: pre-

EventEmitter.subscribe : subscribe(generatorOrNext?: any, error?: any, complete?: any) : any

EventEmitter - Use by directives and components to emit custom Events

angular 4 semantic versioning:  2.3.1
2 (major breaking change)
3 (minor. new features. not breaking)
1 (patch, bug fixes. not breaking)

angular version changes-- https://github.com/angular/angular/blob/master/CHANGELOG.md
https://www.youtube.com/watch?v=zc5oRbP6t2E&t=868s
aot compilation - precompile
tree shaking- targets only js code- rollup- e.g. reference angular forms but not use it. it will not include it


systemjs config:  https://github.com/systemjs/systemjs/blob/master/docs/config-api.md


angular 4. need atleast typescript 2.1 or 2.2 (latest 2.3)

compiled


*******systemjs configuration*******:

api:  https://github.com/systemjs/systemjs/blob/master/docs/config-api.md

Relative to systemjs.config.js location

System.config({
   baseURL ->
	in systemjs.config.js setting:  SystemJS.config({ baseURL: '/modules'});
	in index.html command:  System.import('x');  implies load x module from /modules/x


   paths:  ***Paths serve as alias***

	   Paths allow creating mappings that apply after map configuration. Paths is applied after map and creates an absolute url considering Baseurl.

           paths: { "@angular/*": "node_modules/@angular/*" }

           paths: { 'npm:': '../node_modules/' }


   map   ***map tells the System loader where to look for things. Location***

           '@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',
	   (npm will be resolved from path above)


   packages  **// packages tells the System loader how to load when no filename and/or no extension**

    packages: {
  app: {
        main: './main.js',
        defaultExtension: 'js',

    System.import('app/main')  --> app/main.js ?


****bs-config.js***************
https://github.com/johnpapa/lite-server

api:  https://browsersync.io/docs/options/

lite-server configuration

Browsersync browser testing

Server configuration:

"server": {
    "baseDir": "src",   // Serve files from the src directory. thats where index.html is
    "routes": {
      "/node_modules": "node_modules"  //implying that node_modules is in the same directory as bs-config.js. in index.html you can just have  <script src="node_modules/zone.js/dist/zone.js"></script>
    }
  }

https://github.com/johnpapa/lite-server/issues/52

sourcemap = true: generate map files so you can debug typescript files
.map files are source map files that let tools map between the emitted JavaScript code and the TypeScript source files that created it. Many debuggers (e.g. Visual Studio or Chrome's dev tools) can consume these files so you can debug the TypeScript file instead of the JavaScript file.


2 way binding to a component variable- [(ngModel)]="hero.name"


version of the application- Smaller Angular framework download size, Detect template errors earlier. Tree shaking)
Rollup expects application source code to use ES2015/ES6 modules. see below******

Angular 2 with Asp.net webapi
angular cli- default folder strcuture
Second comment: https://github.com/ngrx/example-app/issues/52
evaluate other sample app's folder hierarchy & structure
sample angular 2 official app - > https://angular.io/docs/ts/latest/tutorial/
style guide- folder hierarchy (skim all)->
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-06
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10

follow sample TOF app folder hierarchy: C:\Users\Dan\Documents\Visual Studio 2017\Projects\Solution3\WebApplication1\app\hero

questions.sort((a, b) => a.order - b.order)

TypeScript is a typed superset of ES6 JavaScript.

BrowserModule also re-exports CommonModule from @angular/common, which means that components in the AppModule module also have access to the Angular directives every app needs, such

as NgIf

and NgFor

light-server: (vs http-server)
A lightweight cli static http server and it can watch files, execute commands and trigger livereload.

TSLint is an extensible static analysis tool that checks TypeScript code for readability, maintainability, and functionality errors.
VS code- automatic
VS- extension..

dont need to reference component in the ts if only use in html - as long as that module is imported that contains
the component as exported.

***(Initialization logic) defd

pg 669- appress  (won't instantiate the component again - re-use- only data different)
-component already on the page- instantiated once- change underlying data- e.g. back/next
-without leaving the page- rebind new data to the form. eg next/previous product
ngOnInit(): void {

    this.sub = this._route.params.subscribe(

        params => {

		let id = +params['id'];

		this.getProduct(id);

	 });
}


Vs (component instantiated again)- url navigated to another page
constructor(private _route: ActivatedRoute,

	    private _router: Router,

	    private _productService: ProductService) {


        this.getProduct(_route.snapshot.params["id"]);

  }




getProduct(id: number) {
        this._productService.getProduct(id).subscribe(
            product => this.product = product,
            error => this.errorMessage = <any>error);
    }





third party controls for consistent experience like bootstrap (e.g. date control)


Unsubcscribing from observables:
guide suggests unsubscribing
apress book never uses it.

when in doubt unsubcscribe. params dont need to

as long as you dont have a reference to it i guess.. : https://angular.io/docs/ts/latest/guide/router.html
"this.sub =" <--- hold a reference to subscription. need to ubsubcribe then only??

 this.sub = this._route.params.subscribe(

	params => {

		let id = +params['id'];

		this.getProduct(id);

    });

 //no need to unsubscribe?
 this._route.params.subscribe(

	params => {

		let id = +params['id'];

		this.getProduct(id);

    });

subscribe completion- may or may not happen: http://paqmind.com/posts/rxjs-error-and-completed-events-demystified/


rxjs subscrive doc: https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/subscribe.md




rxjs(filter, map, reduce) vs array operators (filter, map, reduce)
https://gist.github.com/btroncone/d6cf141d6f2c00dc6b35#filter
https://www.sitepoint.com/rxjs-functions-with-examples/

filtering an observable array Vs filtering regular array:
You'll want to filter the actual array and not the observable wrapped around it. So you'll map the content of the Observable (which is an Epic[]) to a filtered Epic.
getEpic(id:number): Observable<Epic> {
  return this.getEpics()
     .map(epics => epics.filter(epic => epic.id === id)[0]);
}


Action	HTTP method	Relative URI

Get a list of all products	GET	/api/products
Get a product by ID		GET	/api/products/id
Get a product by category	GET	/api/products?category=category
Create a new product		POST	/api/products
Update a product		PUT	/api/products/id
Delete a product		DELETE	/api/products/id

When you import a module, Angular adds the module's service providers (the contents of its providers list) to the 'application' root injector.


testing:
http://www.gistia.com/guide-end-end-testing-angular-2/
http://www.gistia.com/e2e-testing-right-way/?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_202
 These end to end tests simulate a production like environment. It s as simple as testing your application from start to finish   just like a user
Protractor: Protractor is the testing framework we ll be using for our Angular 2 applications.
Jasmine: Jasmine is the framework we ll be using for writing tests.


Register application-wide providers in the root AppModule, not in the AppComponent

SharedModule:  components, directives, and pipes that you use everywhere in your app.
CoreModule : singleton services for both eager loaded modules and lazy loaded modules. Import CoreModule in the root AppModule only.

'orderby' and 'filter' not availbale in ng-repeat for performance reasons: https://angular.io/docs/ts/latest/guide/pipes.html#!#no-filter-pipe
write own service and inject it in a component: filtering/sorting service and injected into the component
If these performance and minification considerations don't apply to you, you can always create a pipe.
Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.

A component can use the NgIf and NgFor directives only because its parent module imported the Angular CommonModule (perhaps indirectly by importing BrowserModule).

http://angularjs.blogspot.com/2016/04/5-rookie-mistakes-to-avoid-with-angular.html


For performance reasons, no orderBy exists in Angular 2. Instead, use component code to order or sort results. ***If you need the same ordering or sorting code in several templates,

consider building a custom pipe. ***

Route resolvers allow us to provide the needed data for a route, before the route is activated

change detection on add
same array, no change, no display update even if you add an item to an array. replace the array reference  to trigger change detection
Replacing the array is an efficient way to signal Angular to update the display. When do you replace the array? When the data change.
That's an easy rule to follow in this example

where the

only way to change the data is by adding a hero

<input [(ngModel)]="favoriteHero" />
(ngModel) -> event binding (from the view to the component)
[ngModel] -> property binding (from the component to the view)

<tr *ngFor="let movie of movies">
let keyword identifies movie as an input variable

<h3 [hidden]="!favoriteHero">
Angular uses property binding (HTML hidden property of h3); there is no built-in show directive

<img [src]="movie.imageurl">
Angular uses property binding; there is no built-in src directive.

filters in AngularJs (1) are renames as Pipes in Angular (2)

singleton services in core folder ( not exposed or consumed via module) - just inject in constructor- same instance across application
shared directives, components, pipes in the shared folder (will be instantiated every time with module import)

singleton services:
register provider at the root level Appmodule to re-use across application- singleton.
every instance of the component gets its own, private instance of the service

lifecycle hooks: https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html#!#afterview

routeguards:
Perhaps the user is not authorized to navigate to the target component.
Maybe the user must login (authenticate) first.
Maybe you should fetch some data before you display the target component.
You might want to save pending changes before leaving a component.
You might ask the user if it's OK to discard pending changes rather than save them.


https://angular.io/docs/ts/latest/guide/server-communication.html
call service to get data in ngOnInit and not in the constructor. this is the best practice.
RxJS is a third party library, endorsed by Angular, that implements the asynchronous Observable pattern
The RxJS library is large. Only import the operators you need.

example typing on searchbox and getting results from server (like google search) in dropdown via observables and webapi
https://angular.io/docs/ts/latest/guide/server-communication.html

constructors initialize variables

package.json
Modules your module needs to run go in dependencies. Modules you need to develop your module go in devDependencies.
Thus, if you've worked with every 1.x version of the host package, use
"^1.0" (1.0-1.99) versions compatible but not 2.0    e.g.: ^1.2.3 := >=1.2.3 <2.0.0
or "1.x" to express this

~1.2.3 will match all 1.2.x versions but will miss 1.3.0.

to retrieve a parameter from a route
activeRoute: ActivatedRoute
activeRoute.snapshot.params["mode"]

<input [(ngModel)]="username">  **same as**
<input [value]="username" (input)="username = $event.target.value">
[value]="username"  -> property binding.      username value being applied to input value
(input)="username = $event.target.value"  -> event binding.  username being set



use @Input decorator to pass input to either a component or a directive
use @Output decorator to raise events from a component or a directive

[class.hidden]="onEdit"
[style.color]="'brown'"
[disabled]="edittedUser.schedulesCreated === 0"


<auction-stars [(rating)]="product.rating">

2 way binding
<auction-stars [rating]="product.rating">   --  @Input() rating
<auction-stars (ratingChange)="product.rating = $event.target.value">  --   @Output() ratingChange: EventEmitter<number> = new EventEmitter<number>();
 same as

<auction-stars [(rating)]="product.rating">  (2 way binding)
@Input() rating
@Output() ratingChange: EventEmitter<number> = new EventEmitter<number>();


but if you have an input property
(such as rating) and an output property that has the same name plus the suffix
Change (such as ratingChange), you re allowed to use the [()] [(rating)] syntax with
such properties.


first ngOnChanges() => ngOnInit() =>  ngOnChanges()

https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html
ngoninit() => initialize directive/component. good place to get data
ngOnChanges() => Respond when Angular (re)sets data-bound input properties
ngDoCheck() => Detect and act upon changes that Angular can't or won't detect on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit()
      called too many times. e.g. 20 before the user can even do anything. Implementation must be very lightweight or the user experience suffers


NgModule identifies the module's own components, directives, and pipes, making some of them public so external components can use them
NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common

collection of

utilities
Modules are a great way to provide services for 'all' of the module's components
BrowserModule imports CommonModule and re-exports it. The net effect is that an importer of BrowserModule gets CommonModule directives automatically
  such as Ngif
A feature module delivers a cohesive set of functionality focused on an application business domain, user workflow, facility (forms, http, routing), or collection of related

utilities
feature modules help you partition the app into areas of specific interest and purpose
angular 2 feature modules are just like modules in angular 1

Never call RouterModule.forRoot in a feature-routing module.
Always call RouterModule.forChild in a feature-routing module.

Angular 4 If, Else and Then Conditionals

SharedModule exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.

Do not specify app-wide singleton providers in a shared module. A lazy-loaded module that imports that shared module makes its own copy of the service. (only applicable if no providedIn: root)
But if providedIn is root then still adds to the root injector- available application wide

The npm run tsc:w compiles your TypeScript and then watches for changes


component level service:
https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html

do not export from a shared module. you can keep it there. since each module will be instantiated seperately and singleton
needs to be instantiated only once. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
Why? You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the SharedModule provides a service.
no dependency between modules for the singleton service
just list in providers of a module and use in components and directives via import.
keep singleton service in the CORE module folder. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-11
no dependency of service via modules. since each modules will be instantiated seperately


package.json:
scripts
npm run tsc -w   (starts typescript compiler and watches for changes)
npm run lite-server (runs lite server) Lightweight development only ''node server that serves a web app, opens it in the 'browser', refreshes when html or javascript change
npm run json-server data.js -p 3500 -m authMiddleware.js  (run a full fake REST API via json-server)

"start": "concurrently \"npm run tscwatch\" \"npm run lite\" \"npm run json\" ",
1) starts typescript compiler and watches for changes  - npm run tscwatch
2) opens browser and watches for changes -  npm run lite
3) run a fake rest api - npm run json

npm run  ngc  (starts aot)- ahead of time compilation. pre compile angular app. For each module, component, and directive in the app folder, there will be corresponding files in the aot folder,
npm run  roll (shaking the tree- create 1 minified(ugify) bundle file. remove unused dependencies).



trigger scripts command via command line: npm run XXX

"scripts": {
    "start": "concurrently \"npm run tscwatch\" \"npm run lite\" \"npm run json\" ",
    "tsc": "tsc",
    "tscwatch": "tsc -w",
    "lite": "lite-server",
    "json": "json-server data.js -p 3500 -m authMiddleware.js",
    "typings": "typings",
    "postinstall": "typings install",
    "ngc": "ngc -p tsconfig-aot.json",
    "roll": "rollup -c rollup-config.js",
    "startbundle": "concurrently \"npm run lite\" \"npm run json\" "
  }

tsconfig.json  (configures typescript compiler)
tsconfig-aot.json (configures Aot compiler which is a wrapper around typescript compiler). main.ts modified to use aot compiler and aot generated files.
systemjs.config.js (module loader - loads node_modules to help in resolving imports)
typings.json   (TypeScript definitions. It uses typings.json)
rollup-config.js  (configuration used by npm run  roll)
package.json - npm packages. npm is the package manager for Node.js.


good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html

CoreModule provides the UserService. Angular registers that provider with the app root injector, making a singleton instance of the UserService available to any component that needs

it,

whether that component is eagerly or lazily loaded.

Angular accumulates all imported providers before appending the items listed in @NgModule.providers. This sequence ensures that whatever you add explicitly to the AppModule providers

takes

precedence over the providers of imported modules.

The dependencies are essential to running the application.
The devDependencies are only necessary to develop the application.

https://github.com/AngularClass/awesome-angular

Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


vs code with snippets to create angular


seems to be good: https://angular-2-training-book.rangle.io/handout/modules/lazy-loading-module.html

Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------

Directives and components lifecycle hooks:
ngOnChanges: when an input/output binding value changes.
ngOnInit: after the first ngOnChanges.
ngDoCheck: developer's custom change detection.


Observable=> Observables are similar to promises but with major differences that make them better.
https://scotch.io/tutorials/angular-2-http-requests-with-observables
To use observables, Angular uses a third-party library called Reactive Extensions (RxJS)


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)

A 'provider' creates a new instance of a dependency for the dependency injection system

Angular http.get returns an RxJS Observable

Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


  ***asp.net webapi core- Supplemental later- skip***

  https://www.codeproject.com/Articles/1161804/ASP-NET-Core-Angular-EF-Web-API-Using-Template-Pac
  https://www.codeproject.com/Articles/1151474/CRUD-in-ASP-NETCore-MVC-with-Angular-and-Web-API
  https://www.codeproject.com/Articles/1164078/ASP-NET-Core-Angular-Master-Detail-HTML-Grid-using
  https://www.codeproject.com/Articles/1124864/ASP-NET-Core-and-Angular-Code-Venture-Part
  https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
  https://www.codeproject.com/Articles/1172349/SPA-using-ASP-Net-Core-plus-Angular-part
  https://www.codeproject.com/Articles/1171129/SPA-using-ASP-Net-Core-plus-Angular-part





Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------













  ****Trim List****
  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/
  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  https://github.com/gothinkster/angular-realworld-example-app
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  https://chsakell.com/2016/06/27/angular-2-crud-modals-animations-pagination-datetimepicker/
  https://chsakell.com/2016/01/01/cross-platform-single-page-applications-with-asp-net-5-angular-2-typescript/

  Angular 2 using typescript with Asp.net Webapi
  https://www.codeproject.com/Articles/1161804/ASP-NET-Core-Angular-EF-Web-API-Using-Template-Pac
  https://www.codeproject.com/Articles/1181888/Angular-in-ASP-NET-MVC-Web-API-Part
  https://www.codeproject.com/Articles/1151474/CRUD-in-ASP-NETCore-MVC-with-Angular-and-Web-API
  https://www.codeproject.com/Articles/1164078/ASP-NET-Core-Angular-Master-Detail-HTML-Grid-using
  https://www.codeproject.com/Articles/1124864/ASP-NET-Core-and-Angular-Code-Venture-Part
  https://www.codeproject.com/Articles/1172349/SPA-using-ASP-Net-Core-plus-Angular-part
  https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
  https://www.codeproject.com/Articles/1171129/SPA-using-ASP-Net-Core-plus-Angular-part




From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 6:38 PM
To: Dan Lokman
Subject: Re: angular resources

TODO:   https://angular.io/docs/ts/latest/guide/style-guide.html



From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 4:09 PM
To: Dan Lokman
Subject: Re: angular resources

build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:


Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below

good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html



Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------


Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Monday, May 22, 2017 9:14 AM
To: Dan Lokman
Subject: Re: angular resources

angular 2 tools:
https://angular.io/resources/#!#Education


Do is one that should always be followed
Consider guidelines should generally be followed
Avoid indicates something you should almost never do


search google: angular 2/typescript interview questions
-------------------------------------------------------


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)- compiler options


Components directives with a template. (with a template view)
Structural directives change the DOM layout by adding and removing DOM elements. NgFor and NgIf
Attribute directives change the appearance or behavior of an element, component, or another directive. NgStyle

******TODO:   https://angular.io/docs/ts/latest/guide/deployment.html  ******


build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:
  https://angular.io/docs/ts/latest/guide/change-log.html

Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below



Create Skeleton Solution- files/folders hierarchy with deployment
Angular 2 with Asp.net webapi
Second comment: https://github.com/ngrx/example-app/issues/52
evaluate other sample app's folder hierarchy & structure
sample angular 2 official app - > https://angular.io/docs/ts/latest/tutorial/
style guide- folder hierarchy (skim all)->
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-06
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10

follow sample TOF app folder hierarchy: C:\Users\Dan\Documents\Visual Studio 2017\Projects\Solution3\WebApplication1\app\hero

singleton services in core folder ( not exposed or consumed via module) - just inject in constructor- same instance across application
shared directives, components, pipes in the shared folder (will be instantiated every time with module import)

singleton services:
register provider at the root level Appmodule to re-use across application- singleton.
every instance of the component gets its own, private instance of the service

lifecycle hooks: https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html#!#afterview

https://angular.io/docs/ts/latest/guide/server-communication.html
call service to get data in ngOnInit and not in the constructor. this is the best practice.
RxJS is a third party library, endorsed by Angular, that implements the asynchronous Observable pattern
The RxJS library is large. Only import the operators you need.

example typing on searchbox and getting results from server (like google search) in dropdown via observables and webapi
https://angular.io/docs/ts/latest/guide/server-communication.html

constructors initialize variables

first ngOnChanges() => ngOnInit() =>  ngOnChanges()

https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html
ngoninit() => initialize directive/component. good place to get data
ngOnChanges() => Respond when Angular (re)sets data-bound input properties
ngDoCheck() => Detect and act upon changes that Angular can't or won't detect on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit()
      called too many times. e.g. 20 before the user can even do anything. Implementation must be very lightweight or the user experience suffers


NgModule identifies the module's own components, directives, and pipes, making some of them public so external components can use them
NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common

collection of utilities
Modules are a great way to provide services for 'all' of the module's components
BrowserModule imports CommonModule and re-exports it. The net effect is that an importer of BrowserModule gets CommonModule directives automatically
  such as Ngif
A feature module delivers a cohesive set of functionality focused on an application business domain, user workflow, facility (forms, http, routing), or collection of related

utilities
feature modules help you partition the app into areas of specific interest and purpose
angular 2 feature modules are just like modules in angular 1

Never call RouterModule.forRoot in a feature-routing module.
Always call RouterModule.forChild in a feature-routing module.

SharedModule exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.

Do not specify app-wide singleton providers in a shared module. A lazy-loaded module that imports that shared module makes its own copy of the service.


component level service:
https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html

do not export from a shared module. you can keep it there. since each module will be instantiated seperately and singleton
needs to be instantiated only once. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
Why? You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the SharedModule provides a service.
no dependency between modules for the singleton service
just list in providers of a module and use in components and directives via import.
keep singleton service in the CORE module folder. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-11
no dependency of service via modules. since each modules will be instantiated seperately


good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html

CoreModule provides the UserService. Angular registers that provider with the app root injector, making a singleton instance of the UserService available to any component that needs

it, whether that component is eagerly or lazily loaded.

Angular accumulates all imported providers before appending the items listed in @NgModule.providers. This sequence ensures that whatever you add explicitly to the AppModule providers

takes precedence over the providers of imported modules.

The dependencies are essential to running the application.
The devDependencies are only necessary to develop the application.


Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html

seems to be good: https://angular-2-training-book.rangle.io/handout/modules/lazy-loading-module.html

Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------

Directives and components lifecycle hooks:
ngOnChanges: when an input/output binding value changes.
ngOnInit: after the first ngOnChanges.
ngDoCheck: developer's custom change detection.


Observable=> Observables are similar to promises but with major differences that make them better.
https://scotch.io/tutorials/angular-2-http-requests-with-observables
To use observables, Angular uses a third-party library called Reactive Extensions (RxJS)


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)

A 'provider' creates a new instance of a dependency for the dependency injection system

Angular http.get returns an RxJS Observable

Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 6:38 PM
To: Dan Lokman
Subject: Re: angular resources

TODO:   https://angular.io/docs/ts/latest/guide/style-guide.html



From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 4:09 PM
To: Dan Lokman
Subject: Re: angular resources

build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:


Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below

good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html



Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------


Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Monday, May 22, 2017 7:17 PM
To: Dan Lokman
Subject: Angular resources

angular 2 tools:
https://angular.io/resources/#!#Education
blog: http://angularjs.blogspot.com/2017/03/angular-400-now-available.html
angular release schedule: https://github.com/angular/angular/blob/master/docs/RELEASE_SCHEDULE.md


Do is one that should always be followed
Consider guidelines should generally be followed
Avoid indicates something you should almost never do


search google: angular 2/typescript interview questions
-------------------------------------------------------


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)- compiler options


Directives
 Components directives with a template. (with a template view)
 Structural directives change the DOM layout by adding and removing DOM elements. *NgFor and *NgIf.  An asterisk (*) precedes the directive attribute
 Attribute directives change the appearance or behavior of an element, component, or another directive. NgStyle


template input variable:      You declare a template input variable using the let keyword (let hero). The variable's scope is limited to a single instance of the repeated template
template reference variable:  You declare a template reference variable by prefixing the variable name with # (#var). A reference variable refers to its attached element, component or

directive. It can be accessed anywhere in the entire template

instead of putting ng-if or nffor on div or span use <ng-container>
The Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM.


******TODO:   https://angular.io/docs/ts/latest/guide/deployment.html  ******


build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  New SystemJs plugin: systemjs-angular-loader.js. No need to write @Component({ moduleId: module.id })
  if...else syntax in component HTML templates
  Animation  package has been moved out to a separated package
  Faster and smaller (AOT compilation)

  ngIf with else
  <div *ngIf="races.length > 0; else empty"><h2>Races</h2></div>
  <ng-template #empty><h2>No races.</h2></ng-template>


  http://angularjs.blogspot.com/2017/03/angular-400-now-available.html
  https://scotch.io/tutorials/5-features-to-watch-out-for-in-angular-4
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:
  https://angular.io/docs/ts/latest/guide/change-log.html
  http://angularjs.blogspot.com/2017/03/angular-400-now-available.html



Sample Apps: **imp**
  Identify and collect sample apps

  starter kits
   https://github.com/AngularClass/angular-starter
   https://github.com/preboot/angular2-webpack


  ****Trim List****
  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/
  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  https://github.com/gothinkster/angular-realworld-example-app
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  https://chsakell.com/2016/06/27/angular-2-crud-modals-animations-pagination-datetimepicker/
  https://chsakell.com/2016/01/01/cross-platform-single-page-applications-with-asp-net-5-angular-2-typescript/

  Angular 2 using typescript with Asp.net Webapi
  https://www.codeproject.com/Articles/1161804/ASP-NET-Core-Angular-EF-Web-API-Using-Template-Pac
  https://www.codeproject.com/Articles/1181888/Angular-in-ASP-NET-MVC-Web-API-Part
  https://www.codeproject.com/Articles/1151474/CRUD-in-ASP-NETCore-MVC-with-Angular-and-Web-API
  https://www.codeproject.com/Articles/1164078/ASP-NET-Core-Angular-Master-Detail-HTML-Grid-using
  https://www.codeproject.com/Articles/1124864/ASP-NET-Core-and-Angular-Code-Venture-Part
  https://www.codeproject.com/Articles/1172349/SPA-using-ASP-Net-Core-plus-Angular-part
  https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
  https://www.codeproject.com/Articles/1171129/SPA-using-ASP-Net-Core-plus-Angular-part
-----------------------------------------------------------------------------------------------------------------------


  check sample apps below

  webpack lazy loading: http://www.syntaxsuccess.com/angular-2-samples/#/about

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


es7, es6

angular blog: http://angularjs.blogspot.com/2017/04/
angular release schedule: https://github.com/angular/angular/blob/master/docs/RELEASE_SCHEDULE.md

skim typescript, apress book plus online angular real quick (to refresh folder hierarchy (see below), best practices)
grid, d3, angular 2 ui components identify*****, angular 2 bootstrap components, : https://angular.io/resources/#!#UI%20Components, https://github.com/crisbeto/angular-svg-round-progressbar
https://teradata.github.io/covalent/#/components
https://stackoverflow.com/questions/39395359/angular-2-ui-components-which-library, https://colorlib.com/wp/angular-2-components/
breeze
grid: https://www.indeed.com/viewjob?cmp=Horizon-Consulting-Inc&t=Angular+Js+Data+Grid&jk=ce047e44d36911e3&q=angular+2%2C+ag-grid
dice search: angular 2, ag-grid

angular cli: https://www.sitepoint.com/ultimate-angular-cli-reference/


starter kits
  https://github.com/AngularClass/angular-starter
  https://github.com/preboot/angular2-webpack

demo app - search job description stacks used (angular 4, output es5 (target lib:es7, es6), bootstrap 4, webpack, angular cli, ui components, grid?, typescript 2.1-2.3) webapi? breezejs
https://github.com/AngularClass/awesome-angular (go through compoenents section, custom pipes orderby--)  ******must skim
https://jobs.systemoneservices.com/VuLDAU/software-engineer-information-technology-houston-texas-114499?originalsource=Indeed.com
Create Skeleton Solution- files/folders hierarchy with deployment (angular cli or webpack - bundling, minification, lazy loading modules.  ahead-of-time (AOT) compilation: pre-compiled

version of the application- Smaller Angular framework download size, Detect template errors earlier. Tree shaking)
Rollup expects application source code to use ES2015/ES6 modules. see below******

Angular 2 with Asp.net webapi
Second comment: https://github.com/ngrx/example-app/issues/52
evaluate other sample app's folder hierarchy & structure
sample angular 2 official app - > https://angular.io/docs/ts/latest/tutorial/
style guide- folder hierarchy (skim all)->
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-06
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10

follow sample TOF app folder hierarchy: C:\Users\Dan\Documents\Visual Studio 2017\Projects\Solution3\WebApplication1\app\hero

questions.sort((a, b) => a.order - b.order)

TypeScript is a typed superset of ES6 JavaScript.

BrowserModule also re-exports CommonModule from @angular/common, which means that components in the AppModule module also have access to the Angular directives every app needs, such as NgIf

and NgFor

When you import a module, Angular adds the module's service providers (the contents of its providers list) to the application root injector.

Register application-wide providers in the root AppModule, not in the AppComponent

SharedModule:  components, directives, and pipes that you use everywhere in your app.
CoreModule : singleton services for both eager loaded modules and lazy loaded modules. Import CoreModule in the root AppModule only.

'orderby' and 'filter' not availbale in ng-repeat for performance reasons: https://angular.io/docs/ts/latest/guide/pipes.html#!#no-filter-pipe
write own service and inject it in a component: filtering/sorting service and injected into the component
If these performance and minification considerations don't apply to you, you can always create a pipe.
Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.

A component can use the NgIf and NgFor directives only because its parent module imported the Angular CommonModule (perhaps indirectly by importing BrowserModule).

http://angularjs.blogspot.com/2016/04/5-rookie-mistakes-to-avoid-with-angular.html


For performance reasons, no orderBy exists in Angular 2. Instead, use component code to order or sort results. ***If you need the same ordering or sorting code in several templates,

consider building a custom pipe. ***

Route resolvers allow us to provide the needed data for a route, before the route is activated

change detection on add
same array, no change, no display update even if you add an item to an array. replace the array reference  to trigger change detection
Replacing the array is an efficient way to signal Angular to update the display. When do you replace the array? When the data change. That's an easy rule to follow in this example where the

only way to change the data is by adding a hero

<input [(ngModel)]="favoriteHero" />
(ngModel) -> event binding (from the view to the component)
[ngModel] -> property binding (from the component to the view)

<tr *ngFor="let movie of movies">
let keyword identifies movie as an input variable

<h3 [hidden]="!favoriteHero">
Angular uses property binding (HTML hidden property of h3); there is no built-in show directive

<img [src]="movie.imageurl">
Angular uses property binding; there is no built-in src directive.

filters in AngularJs (1) are renames as Pipes in Angular (2)

singleton services in core folder ( not exposed or consumed via module) - just inject in constructor- same instance across application
shared directives, components, pipes in the shared folder (will be instantiated every time with module import)

singleton services:
register provider at the root level Appmodule to re-use across application- singleton.
every instance of the component gets its own, private instance of the service

lifecycle hooks: https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html#!#afterview

routeguards:
Perhaps the user is not authorized to navigate to the target component.
Maybe the user must login (authenticate) first.
Maybe you should fetch some data before you display the target component.
You might want to save pending changes before leaving a component.
You might ask the user if it's OK to discard pending changes rather than save them.


https://angular.io/docs/ts/latest/guide/server-communication.html
call service to get data in ngOnInit and not in the constructor. this is the best practice.
RxJS is a third party library, endorsed by Angular, that implements the asynchronous Observable pattern
The RxJS library is large. Only import the operators you need.

example typing on searchbox and getting results from server (like google search) in dropdown via observables and webapi
https://angular.io/docs/ts/latest/guide/server-communication.html

constructors initialize variables

first ngOnChanges() => ngOnInit() =>  ngOnChanges()

https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html
ngoninit() => initialize directive/component. good place to get data
ngOnChanges() => Respond when Angular (re)sets data-bound input properties
ngDoCheck() => Detect and act upon changes that Angular can't or won't detect on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit()
      called too many times. e.g. 20 before the user can even do anything. Implementation must be very lightweight or the user experience suffers


NgModule identifies the module's own components, directives, and pipes, making some of them public so external components can use them
NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of

utilities
Modules are a great way to provide services for 'all' of the module's components
BrowserModule imports CommonModule and re-exports it. The net effect is that an importer of BrowserModule gets CommonModule directives automatically
  such as Ngif
A feature module delivers a cohesive set of functionality focused on an application business domain, user workflow, facility (forms, http, routing), or collection of related utilities
feature modules help you partition the app into areas of specific interest and purpose
angular 2 feature modules are just like modules in angular 1

Never call RouterModule.forRoot in a feature-routing module.
Always call RouterModule.forChild in a feature-routing module.

SharedModule exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.

Do not specify app-wide singleton providers in a shared module. A lazy-loaded module that imports that shared module makes its own copy of the service.


component level service:
https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html

do not export from a shared module. you can keep it there. since each module will be instantiated seperately and singleton
needs to be instantiated only once. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
Why? You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the SharedModule provides a service.
no dependency between modules for the singleton service
just list in providers of a module and use in components and directives via import.
keep singleton service in the CORE module folder. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-11
no dependency of service via modules. since each modules will be instantiated seperately


good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html

CoreModule provides the UserService. Angular registers that provider with the app root injector, making a singleton instance of the UserService available to any component that needs it,

whether that component is eagerly or lazily loaded.

Angular accumulates all imported providers before appending the items listed in @NgModule.providers. This sequence ensures that whatever you add explicitly to the AppModule providers takes

precedence over the providers of imported modules.

The dependencies are essential to running the application.
The devDependencies are only necessary to develop the application.

https://github.com/AngularClass/awesome-angular

Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html

seems to be good: https://angular-2-training-book.rangle.io/handout/modules/lazy-loading-module.html

Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------

Directives and components lifecycle hooks:
ngOnChanges: when an input/output binding value changes.
ngOnInit: after the first ngOnChanges.
ngDoCheck: developer's custom change detection.


Observable=> Observables are similar to promises but with major differences that make them better.
https://scotch.io/tutorials/angular-2-http-requests-with-observables
To use observables, Angular uses a third-party library called Reactive Extensions (RxJS)


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)

A 'provider' creates a new instance of a dependency for the dependency injection system

Angular http.get returns an RxJS Observable

Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 6:38 PM
To: Dan Lokman
Subject: Re: angular resources

TODO:   https://angular.io/docs/ts/latest/guide/style-guide.html



From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 4:09 PM
To: Dan Lokman
Subject: Re: angular resources

build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:


Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below

good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html



Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------


Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Monday, May 22, 2017 9:14 AM
To: Dan Lokman
Subject: Re: angular resources

angular 2 tools:
https://angular.io/resources/#!#Education


Do is one that should always be followed
Consider guidelines should generally be followed
Avoid indicates something you should almost never do


search google: angular 2/typescript interview questions
-------------------------------------------------------


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)- compiler options


Components directives with a template. (with a template view)
Structural directives change the DOM layout by adding and removing DOM elements. NgFor and NgIf
Attribute directives change the appearance or behavior of an element, component, or another directive. NgStyle

******TODO:   https://angular.io/docs/ts/latest/guide/deployment.html  ******


build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:
  https://angular.io/docs/ts/latest/guide/change-log.html

Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below



Create Skeleton Solution- files/folders hierarchy with deployment
Angular 2 with Asp.net webapi
Second comment: https://github.com/ngrx/example-app/issues/52
evaluate other sample app's folder hierarchy & structure
sample angular 2 official app - > https://angular.io/docs/ts/latest/tutorial/
style guide- folder hierarchy (skim all)->
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-06
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10

follow sample TOF app folder hierarchy: C:\Users\Dan\Documents\Visual Studio 2017\Projects\Solution3\WebApplication1\app\hero

singleton services in core folder ( not exposed or consumed via module) - just inject in constructor- same instance across application
shared directives, components, pipes in the shared folder (will be instantiated every time with module import)

singleton services:
register provider at the root level Appmodule to re-use across application- singleton.
every instance of the component gets its own, private instance of the service

lifecycle hooks: https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html#!#afterview

https://angular.io/docs/ts/latest/guide/server-communication.html
call service to get data in ngOnInit and not in the constructor. this is the best practice.
RxJS is a third party library, endorsed by Angular, that implements the asynchronous Observable pattern
The RxJS library is large. Only import the operators you need.

example typing on searchbox and getting results from server (like google search) in dropdown via observables and webapi
https://angular.io/docs/ts/latest/guide/server-communication.html

constructors initialize variables

first ngOnChanges() => ngOnInit() =>  ngOnChanges()

https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html
ngoninit() => initialize directive/component. good place to get data
ngOnChanges() => Respond when Angular (re)sets data-bound input properties
ngDoCheck() => Detect and act upon changes that Angular can't or won't detect on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit()
      called too many times. e.g. 20 before the user can even do anything. Implementation must be very lightweight or the user experience suffers


NgModule identifies the module's own components, directives, and pipes, making some of them public so external components can use them
NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of utilities
Modules are a great way to provide services for 'all' of the module's components
BrowserModule imports CommonModule and re-exports it. The net effect is that an importer of BrowserModule gets CommonModule directives automatically
  such as Ngif
A feature module delivers a cohesive set of functionality focused on an application business domain, user workflow, facility (forms, http, routing), or collection of related utilities
feature modules help you partition the app into areas of specific interest and purpose
angular 2 feature modules are just like modules in angular 1

Never call RouterModule.forRoot in a feature-routing module.
Always call RouterModule.forChild in a feature-routing module.

SharedModule exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.

Do not specify app-wide singleton providers in a shared module. A lazy-loaded module that imports that shared module makes its own copy of the service.


component level service:
https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html

do not export from a shared module. you can keep it there. since each module will be instantiated seperately and singleton
needs to be instantiated only once. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-10
Why? You don't want each module to have its own separate instance of singleton services. Yet there is a real danger of that happening if the SharedModule provides a service.
no dependency between modules for the singleton service
just list in providers of a module and use in components and directives via import.
keep singleton service in the CORE module folder. https://angular.io/docs/ts/latest/guide/style-guide.html#!#04-11
no dependency of service via modules. since each modules will be instantiated seperately


good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html

CoreModule provides the UserService. Angular registers that provider with the app root injector, making a singleton instance of the UserService available to any component that needs it, whether that component is eagerly or lazily loaded.

Angular accumulates all imported providers before appending the items listed in @NgModule.providers. This sequence ensures that whatever you add explicitly to the AppModule providers takes precedence over the providers of imported modules.

The dependencies are essential to running the application.
The devDependencies are only necessary to develop the application.


Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html

seems to be good: https://angular-2-training-book.rangle.io/handout/modules/lazy-loading-module.html

Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------

Directives and components lifecycle hooks:
ngOnChanges: when an input/output binding value changes.
ngOnInit: after the first ngOnChanges.
ngDoCheck: developer's custom change detection.


Observable=> Observables are similar to promises but with major differences that make them better.
https://scotch.io/tutorials/angular-2-http-requests-with-observables
To use observables, Angular uses a third-party library called Reactive Extensions (RxJS)


ECMAScript 5 => ES5
ECMAScript 6 => ES6, ES2015, ECMAScript 2015   (2015)
ECMAScript 7 => ES7, ES2016, ECMAScript 2016   (2016)
(use ES7 & ES6 features LIB while targeting ES5(most browser have this)

A 'provider' creates a new instance of a dependency for the dependency injection system

Angular http.get returns an RxJS Observable

Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

















From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 6:38 PM
To: Dan Lokman
Subject: Re: angular resources

TODO:   https://angular.io/docs/ts/latest/guide/style-guide.html



From: Dan Lokman <dan.lokman@hotmail.com>
Sent: Thursday, May 18, 2017 4:09 PM
To: Dan Lokman
Subject: Re: angular resources

build and deployment :

Webpack: code splitting

Bundling: Rollup  Vs Webpack2  Vs Angular CLI(uses webpack behind the scenes)
Minification: Rollup plugin Vs Webpack plugin
Use Webpack for websites and Rollup for libraries
https://medium.com/webpack/webpack-and-rollup-the-same-but-different-a41ad427058c


ProAngular Apress Book
Chp 1-10 Refresher including Typescript
Chp 11-22 Core
Chp 23-29 Advanced
(chp 7-10 Sports Store Application)

bharat application

module loader: SystemJS used in book

bootstrap utilities: https://v4-alpha.getbootstrap.com/utilities/borders/

Node.js-> NPM
Node.js 6.9.1 release: https://nodejs.org/dist/v6.9.1
When you install Node.js, make sure you select the installer option to add the Node.js executables to the
path.
but part of the initial process is updating the version of NPM that was installed with Node.js, which is done by running the
following command: npm install -g npm@3.10.9

create a todo folder, Now create a todo/app folder
I created a file called tsconfig.json in the todo folder



Identify Jumpstarter  List

https://johnpapa.net/17-minute-angular-2-app/
http://learnangular2.com/

apress book errors: https://github.com/Apress/pro-angular-2ed/blob/master/errata.md



Books:
  Pro Angular Apress (book ordered Amazon) + bought ebook
  Ng-2 Book - *Skimm*
  Ng-2 Book + Videos + SampleApp -check email MAr 9, 1:02pm
       https://www.ng-book.com/2/#features (bought) with sample app and videos $79
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App


  Angular 2 Development with TypeScript (book ordered Amazon)

  Official documentation and Tutorial: https://angular.io/docs/ts/latest/


Angular 4 related  changes
  Apress book: https://github.com/Apress/pro-angular-2ed/tree/master/Update%20for%20Angular%204.0%20and%20angular-cli%201.0
  Ngbook 2:


Sample Apps: **imp**
  **search again -asp.net**
  Official documentation and Tutorial: https://angular.io/docs/ts/latest/

  tour of heroes tutorial: https://angular.io/docs/ts/latest/tutorial/

  Sample App-  Angular 2 using typescript with Asp.net Webapi - check
  Ng book - App code: C:\Users\Dan\Desktop\Anglr2Stuff\zNg-Book2- App
  Apress App
  Angular 2 development with typescript book app
  www.ng-book.com/2 Sample App
  https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
  dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
  john papa: https://github.com/johnpapa/Angular2-JumpStart
  john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
  deborah:  https://github.com/DeborahK/Angular2-GettingStarted

  check sample apps below

good links:
https://angular.io/docs/ts/latest/guide/template-syntax.html
https://angular.io/docs/ts/latest/guide/cheatsheet.html



Tutorials:
  https://channel9.msdn.com/Events/Ignite/2016/BRK2193
  https://chsakell.com/category/angular/
  https://thinkster.io/tutorials/learn-angular-2
  https://www.sitepoint.com/angular-2-tutorial/


courses
   https://www.udemy.com/angular-2-tutorial-for-beginners/
   https://toddmotto.com/ ,  https://ultimateangular.com/courses/

The Ultimate Guide to Forms in Angular 2: http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

StarterKits (file organization etc)
  https://github.com/AngularClass/angular2-webpack-starter
  https://github.com/preboot/angular2-webpack
  https://github.com/angular/quickstart ??

angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
typescript coding guidelines"
   https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines
   http://definitelytyped.org/guides/best-practices.html


Misc List
https://johnpapa.net/angular-2-styles/  old
https://github.com/jmcunningham/AngularJS2-Learning
https://github.com/AngularClass/awesome-angular2


https://github.com/johnpapa/pbp-a2-ward ?
https://github.com/wardbell/code-with-us-angular-quickstart ?
https://johnpapa.net/angular-2-quickstart-with-ward-bell/ ?
https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents ?
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript ??
https://github.com/angular/quickstart ?
http://blog.mgechev.com/ ?
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/ ?
https://www.youtube.com/watch?v=R5gXgPzPR_U ?
http://www.angular2.com/ ?



********Pro Angular Apress book skim once again plus skim related chp in Angular 2 with typescript book?**********

****dont forget typescript resources- other notepad***


-----------------------------------------------------------------------------------------------------------------------


Angular 2 Learning Resources

Resources: Book, Sample Angularjs with Typescript Project/Application, Online Blogs


Google searches:
 'angular 2 blogs'
 'angular 2 book'
 'angular 2 learning'
 'angular 2 with typescript' videos (jumpstart)
 'angular 2 with typescript sample application'

core



misc
   pluralsight course


Books Evaluate (apress or amazon)
https://www.amazon.com/Pro-Angular-Adam-Freeman/dp/1484223063/ref=sr_1_5?ie=UTF8&qid=1489072499&sr=8-5&keywords=angular+2  (Feb 3, 2017)
https://www.amazon.com/Angular-Development-TypeScript-Yakov-Fain/dp/1617293121/ref=sr_1_2?ie=UTF8&qid=1489072499&sr=8-2&keywords=angular+2  (Dec 30, 2016)
https://www.amazon.com/ng-book-Complete-Angular-Nate-Murray/dp/0991344618/ref=sr_1_9?ie=UTF8&qid=1489072499&sr=8-9&keywords=angular+2 (https://www.ng-book.com/2/) (Nov 29, 2016)


https://www.amazon.com/Unraveling-Angular-Ultimate-Beginners-Complete/dp/1539061477/ref=sr_1_6?ie=UTF8&qid=1489072499&sr=8-6&keywords=angular+2 (Sep 24, 2016)
https://www.amazon.com/Learning-Angular-2-Pablo-Deeleman/dp/1785882074/ref=sr_1_10?ie=UTF8&qid=1489072499&sr=8-10&keywords=angular+2  (May 31, 2016)



Identify Jumpstart Resources
 official documentation plus tutorials full- https://angular.io/docs/ts/latest/

 https://johnpapa.net/angular-2-styles/

Online Blog/Resources/courses
 https://thinkster.io/a-better-way-to-learn-angularjs

 pluralsight course (john papa)
 https://channel9.msdn.com/Events/Ignite/2016/BRK2193 (john papa)

 Todd Motto Angular 2 Courses: https://toddmotto.com/
 https://johnpapa.net/17-minute-angular-2-app/


 http://blog.mgechev.com/
 https://chsakell.com/category/angular/

 https://github.com/AngularClass/angular2-webpack-starter
 https://github.com/preboot/angular2-webpack ....

JumpStart Resources:
'john papa angular 2'
'dan wahlin angular 2' (good)- sample app
http://learnangular2.com/
http://www.ibm.com/developerworks/library/wa-implement-a-single-page-application-with-angular2/index.html ?


***courses***
https://toddmotto.com/ ,  https://ultimateangular.com/courses/
https://www.udemy.com/the-complete-guide-to-angular-2/ ?
https://www.udemy.com/angular-2-tutorial-for-beginners/  ? gooood???
https://www.udemy.com/angular-2-training/ ?
https://egghead.io/courses/angular-2-fundamentals  ?
https://www.udemy.com/angular-2-jump-start-with-typescript/ ?



https://www.youtube.com/watch?v=R5gXgPzPR_U


http://www.apress.com/us/book/9781484223062 ?


official documentation:
 https://angular.io/docs/ts/latest/quickstart.html
 https://angular.io/docs/ts/latest/api/
 https://angular.io/docs/ts/latest/guide/


angular 2 style guide: https://angular.io/docs/ts/latest/guide/style-guide.html
angular 2 course: https://www.udemy.com/angular-2-from-the-ground-up/?ids=586976


https://github.com/jmcunningham/AngularJS2-Learning
http://tutorialzine.com/2016/09/30-learning-resources-for-mastering-angular-2/
http://www.angular2.com/


https://www.udemy.com/angular-2-training/   COURSE ?
https://github.com/AngularClass/awesome-angular2 ?
https://github.com/angular/quickstart ?




***Sample apps***
sportsstore- apress
https://blog.codewithdan.com/2017/02/08/10-angular-and-typescript-projects-to-take-you-from-zero-to-hero/
dan wahlin: https://github.com/DanWahlin/Angular-JumpStart
john papa: https://github.com/johnpapa/angular2-tour-of-heroes,  https://angular.io/docs/ts/latest/tutorial/
https://www.sitepoint.com/angular-2-tutorial/
https://www.codeproject.com/Articles/1070022/Angular-with-TypeScript-using-Visual-Studio (outdated?)
https://www.codeproject.com/Articles/1116876/Developing-An-Angular-Application-With-TypeScript
https://github.com/mgechev/angular-seed  https://mgechev.github.io/angular-seed/

https://github.com/wardbell/code-with-us-angular-quickstart
https://johnpapa.net/angular-2-quickstart-with-ward-bell/
https://github.com/johnpapa/pbp-a2-ward

https://github.com/johnpapa/Angular2-JumpStart

https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents
https://github.com/DeborahK/Angular2-GettingStarted


https://github.com/angular/quickstart ?

https://www.tutorialspoint.com/angular2/index.htm ?

-----------------------------------------------------------------------------------------------------------

Job seekers tend to
- lack the skills in demand,
- they're not willing to move to jobs that are available,
- or employers have unrealistic expectations




-----------------------------------------------------------------------------------------------------------



***TypeScript***

Convert Typescript to JS: https://www.typescriptlang.org/play/

Basic Types
Variable Declarations
Interfaces
Classes
Functions
Generics
Enums
Type Inference
Type Compatibility
Advanced Types
Symbols
Iterators and Generators
Modules
Namespaces
Namespaces and Modules
Module Resolution
Declaration Merging
JSX


Decorators
Mixins
Triple-Slash Directives



$TODO: Module resolution- using Node or Classic? application - https://www.typescriptlang.org/docs/handbook/module-resolution.html


extends -> inheritance (super calls available)- class inheriting from a subclass
implements -> e.g. class implementing an interface
lastName?: string --> default value is undefined and not null***** IMP*****
arrow functions -->  return () => {  retains the this context


It s important to note that in TypeScript 1.5, the nomenclature has changed.  Internal modules  are now  namespaces .  External modules  are now simply  modules ,


In TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module. doesnt have to be named 'module'

Do not use namespaces in modules


--strictNullChecks (not using in project)
TypeScript has two special types, null and undefined, that have the values null and undefined respectively. We mentioned these briefly in the Basic Types section. By default, the type checker considers null and undefined assignable to anything. Effectively, null and undefined are valid values of every type.



We call declarations that don t define an implementation  ambient .

ambient module declaration

myModules.d.ts
// In a .d.ts file or .ts file that is not a module:
declare module "SomeModule" {
    export function fn(): string;
}


You don t have to use the module keyword in external modules, as the file s name and path will create the namespace.



You can tell TypeScript that you are trying to describe code that exists elsewhere (e.g. written in JavaScript/CoffeeScript/The runtime environment like the browser or nodejs) using the declare keyword
must have the declare keyword prefixed to it. This helps make it clear to the author that there will be no code emitted by TypeScript.

Exclude node_modules from typescript compilation

"exclude": [
"node_modules"
]

Default parameters & Optional parameters should appear last in the function signature after required params

fat arrow function- anonymous functions
retains this context
var getName = () => 'John Smith';
var getName = function () { return 'John Smith'; };  --take out word function,


Access modifiers: public, protected, and private. Default all class members have public access

public age: number;
private _ssn: string;  (have underscore)


class MyClass{
  public firstName: string;
  private _ssn: string;

  constructor(firstName:string,  ssn: string) {
        this.firstName = firstName;
	this._ssn = ssn;
   }

}


*Same as*

class MyClass{

  constructor(public firstName:string, private _ssn: string) {
   }

}


static method
class MyClass{
static doSomething(howManyTimes: number): void{
// do something here
}
}
MyClass.doSometing(5);



When a function is declared in a class, it s called a method


class Person {
  constructor(public firstName: string, public lastName: string, public age: number, private _ssn?: string) {}

  get ssn(): string{
     return this._ssn;
  }

  set ssn(value: string){
     this._ssn = value;
  }

  doSomething(howManyTimes: number): void{
   // do something here
  }
}


var p = new Person("John", "Smith", 29);
p.ssn = "456-70-1234";
p.doSomething(5);


*Inheritance*

class Employee extends Person{
   department: string;

  constructor(firstName: string, lastName: string, age: number, _ssn: string, department: string){
     super(firstName, lastName, age, _ssn);
     this.department = department;
   }


  doSomething(howManyTimes: number): void{
      super.doSomething(1); //calling super class method
  }
}


SuperClass   (baseclass)
SubClass     (dervied class)

*in subclass you do super()

class Person {
name: string;
}
class Employee extends Person{
department: number;
}
class Animal {
breed: string;
}
var workers: Array<Person> = [];
workers[0] = new Person();
workers[1] = new Employee();
workers[2] = new Animal(); // compile-time error


var workers: Array<any> = [];

any (can be any type)


TypeScript includes the keywords interface and implements to support interfaces,
but interfaces aren t transpiled into JavaScript code. They just help you avoid
using the wrong types during development.

In TypeScript, there are two patterns for using interfaces:
-Declare an interface that defines a custom type containing a number of properties.
Then declare a method that has an argument of such a type. The compiler
will check when this method is invoked that the object given as an argument
includes all the properties declared in the interface.
-Declare an interface that includes abstract (non-implemented) methods. When
a class declares that it implements this interface, the class must provide an
implementation for all the abstract methods.


interface IPerson {
	firstName: string;
	lastName: string;
	age: number;
	ssn?: string;
}

class Person {
	constructor(public config: IPerson) {    //
	}
}

var aPerson: IPerson = {    //don't even need to specify IPerson type
	firstName: "John",
	lastName: "Smith",
	age: 29
}

var p = new Person(aPerson);  //valid even though ssn not present since ssn is an optional parameter (ssn?)
console.log("Last name: " + p.config.lastName );


var anEmployee: IPerson = {
 firstName: "John",
 lastName: "Smith",
 age: 29,
 department: "HR"
}

var p = new Person(anEmployee); //valid even though 'department' not in IPerson since the contract terms are fulfilled. but it has
all other 'required' (except ssn?- not required) members of IPerson interface


Interface implementation...

interface IPayable{
      increasePay(percent: number): boolean
}

class Person {
   // properties are omitted for brevity
   constructor() {
   }
}

class Employee extends Person implements IPayable{
    increasePay(percent: number): boolean{
       console.log("Increasing salary by " + percent)
      return true;
     }
}


TypeScript interfaces don t generate any output when transpiled to JavaScript

To turn a TypeScript class into an Angular UI component, you need to decorate it
with the @Component annotation.



Type-definition files
node_modules/@types
xxx.d.ts


For example, ES6 has introduced the find() method for arrays, but if your
TypeScript project is configured to use ES5 as a target for compilation, your IDE will
highlight the find() method in red because ES5 doesn t support it. Installing the
type-definition file for es6-shim will get rid of the redness in your IDE:

tsconfig.json
typeRoots - List of folders to include type definitions from


TSLint is a tool you can use to ensure that your programs are written according to specified rules and Typescript coding styles


'Compilation' describes the process of taking source code written in one language and 'converting' it into another language. - compile a high-level language
into an assembly language

'Transpilation' describes the process of taking source code written in one language and 'transforming' it into another language with a 'similar level of abstraction' -
transpile TypeScript to JavaScript as they are similarly abstracted


TypeScript is a language, a compiler, and a language service
You can paste existing JavaScript into your TypeScript program
Compiling from TypeScript to JavaScript is known specifically as transpiling


TypeScript is a superset of JavaScript. That means that the TypeScript language includes the entire JavaScript
language plus a collection of useful additional features


JavaScript Is Valid TypeScript

var name: string = 'Steve';
var heightInCentimeters: number = 182.88;

If a type annotation becomes too complex, you can create an interface to represent the type to simplify
annotations.


interface Person {
name: string;
heightInCentimeters: number;
}
var person: Person = {
name: 'Mark',
heightInCentimeters: 183
}


The undefined type is the value of a variable that has not been assigned a value

The null type can be used to represent an intentional 'absence of an object value'


Type assertions, Type cast


To cast string to a number use:
var myInt1 = +"123";
var myInt2 = +myStringVariable;
var myInt4 = Number("123")

var mansion: Mansion = <Mansion>avenueRoad;

Forced type assertions
var name: string = 'Avenue Road';
// Error: Cannot convert 'string' to 'number'
var bedrooms: number = <number> name;
// Works
var bedrooms: number = <number> <any> name;


& AND Returns a result with a 1 in each position that both inputs have a 1.
| OR Returns a result with a 1 in each position where either input has a 1.

The common use of the NOT (!) operator is to invert a Boolean value;
var invertedTest = ! truthyString;

**Imp**

The following values are  falsey  and are evaluated as false
undefined
null
false: boolean
'': string (empty string)
0: number
NaN (the JavaScript Not a Number value)

All other values are evaluated as true. Surprising examples of this include:
'0': string
'False': string

he three-character
operators === or !==; for example, if (myProperty === false) tests that the type on both sides of the comparison
are the same and their values are the same.

AND Operator - && - console && console.log('Console Available');
OR Operator - || - result = errorMessages || 'Saved OK';

Short-Circuit Evaluation - Both the logical AND operator and the logical OR operator benefit from short-circuit evaluation

if (caravan && caravan.rooms > 5) {
//...
}


Conditional Operator: var message = isValid ? 'Okay' : 'Failed';


function getAverage(a: number, b: number, c?: number): string {
var total = a;

When you use an optional parameter you must check the value to see if it has been initialized. The typeof check
is the common pattern for this check. If you used the shorthand check if (b), you would find that empty string
and numeric zeroes would be treated as if the variable was undefined. The longer expression if (typeof b ===
'undefined') avoids this by thoroughly checking the type and value


Rest Parameters:
Rest parameters allow calling code to specify zero or more arguments of the specified type

function getAverage(...a: number[]): string {

var result = getAverage(2, 4, 6, 8, 10); // 'The average is 6'


Arrow Functions
preserve the lexical scope of the this keyword

class ClickCounter {
 private count = 0;

 registerClick = () => {
    this.count++;   //
    alert(this.count);
  }
}


TypeScript provides shorthand syntax for defining a function

leave out the function keyword and define your functions in an ultracompact way.




interface IStockItem {
	description: string;
	asin: string;
}


class WarehouseLocation {
	private _stockItem;

	constructor(public aisle: number, public slot: string) {
	}

	get stockItem() {
		return this._stockItem;
	}

	set stockItem(item: IStockItem) {
		this._stockItem = item;
	}
}

var figure = { asin: 'B001TEQ2PI', description: 'Figure' };
var warehouseSlot = new WarehouseLocation(15, 'A6');
warehouseSlot.stockItem = figure;


*Implements* (interface)

interface Audio {
  play(): any;
}


class Song implements Audio {
   constructor(private artist: string, private title: string) {}
   play() : void {
	console.log('Playing ' + this.title + ' by ' + this.artist);
   }
}


*Extends* inherit class
class Playlist {
  constructor(public songs: Audio[]) {}
  play() {
    var song = this.songs.pop();
    song.play();
  }
}


class RepeatingPlaylist extends Playlist {
    private songIndex = 0;
    constructor(songs: Song[]) {   //you cannot specify an access modifier for a parameter on the subclass if it has an access modifier on the base class
      super(songs);  //calling super class
    }
  play() { //overriding
    this.songs[this.songIndex].play;
    this.songIndex++;
    if (this.songIndex >=this.songs.length) {
    this.songIndex = 0;
   }
}


services are singletons

modules
By grouping variables, functions, objects, classes, and interfaces into modules, you can keep them out of the global scope and avoid naming collisions

Generic Functions, Generic Interfaces


Types are inferred in TypeScript, but you can supply annotations to make types explicit or deal
with cases the compiler can t handle

Arrow functions provide a short syntax for declaring functions, but can also be used to
preserve the lexical scope


"Code transformation": converts language features that are not available
in JavaScript into representations that are valid. For example, if you are targeting ECMAScript 5, where classes are
not available, all of your classes will be converted into JavaScript functions that create 'appropriate representations'
using the prototypal inheritance available in ECMAScript 5.


"Type erasure": Type erasure is the process that removes all of the type annotations from your code, as they are not understood by JavaScript

"Type Inference": Type inference is the polar opposite of type erasure. Type inference is the process by which types are determined at
compile time in the absence of explicit type annotations

All type information is removed during compilation.


Apress Pro TypeScript pg 71 - ***Design Patterns***

The Single Responsibility Principle (SRP)
The SRP requires that a class should have only one reason to change. When designing your classes, you should aim
to put related features together, ensuring that they are likely to change for the same reason, and keep features apart if
they will change for different reasons.


class Movie {
  constructor(private title: string, private repo: MovieRepository) { }

  Save() {
    repo.save();
  }
}


class MovieRepository {
  private db: DataBase;
   constructor() {
    this.db = DataBase.connect('user:pw@mydb', ['movies']);
   }
   save(movie: Movie) {
     this.db.movies.save(JSON.stringify(movie));
   }
}


The Open Closed Principle (OCP)
The OCP is often summed up by the sentence: software entities should be open for extension but closed for
modification

class RewardPointsCalculator {
   getPoints(transactionValue: number) {
   // 4 points per whole dollar spent
   return Math.floor(transactionValue) * 4;
  }
}

class DoublePointsCalculator extends RewardPointsCalculator {
 getPoints(transactionValue: number) {
   var standardPoints = super.getPoints(transactionValue);
   return standardPoints * 2;
  }
}


The Interface Segregation Principle (ISP)
have smaller interfaces for each functionality and then implements them as needed

class SuperPrinter implements Printer, Stapler, Copier {



The Dependency Inversion Principle (DIP)
The DIP simply states that high-level modules shouldn t depend on low-level components, but instead depend
on an abstraction. Use interfaces. In turn, the abstractions should not depend on details, but on yet more abstractions. In simple
terms, you can satisfy the DIP by depending on an interface, rather than a class

By depending on abstractions, code is less tightly bound to the specific implementation details of a class.

interface LightSource {
  switchOn();
  switchOff();
}


class Light implements LightSource {
  switchOn() {
   //...
  }
  switchOff() {
    //...
  }
}

class LightSwitch {
  private isOn = false;
  constructor(private light: LightSource) {
}

Mixin: Augmented classes are created by adding together a combination of mixin classes that each provides a small reusable behavior



5 S.O.L.I.D design principles - Pro Typescript pg 71 - Chp 3 - All 5 examples ****************

S - Single-responsiblity principle
O - Open-closed principle
L - Liskov substitution principle
I - Interface segregation principle
D - Dependency Inversion Principle


As ECMAScript 6 gains traction, block-level scope will be made available using the let keyword. The let keyword
can be used anywhere you previously used the var keyword, but variables declared with let are block scoped rather
than function scoped.


let is block scoped like c# variables inside curly braces

{
let name = 'Scope Example';
console.log('A: ' + name);
}
// 'B: undefined'
console.log('B: ' + name);


Verify - Let - pg90
TypeScript currently does not allow the use of the let keyword unless the compiler is targeting ES6 mode (which is currently planned, but
not available). The compiler flags are described in detail in Appendix 2.


Variable Hoisting pg 91 - good!
When you declare a variable with the var keyword, the declaration is hoisted to the top of the function it is declared
in.


Variable hoisting applies to both var and let
for 'var', declaration is moved to top of function (hiding another global variable of the same name). for 'let'
declaration is moved to top of block scope-curly braces (not function)

javascript functions are hoisted as well: https://www.w3schools.com/js/js_function_definition.asp

regular javascript functions are hoisted but functions defined using expressions are not hoisted

OK
myFunction(5);

function myFunction(y) {
    return y * y;
}


functions defined using expressions examples

Not ok
x(2,3)
var x = function (a, b) {return a * b};

Ok
var x = function (a, b) {return a * b};
x(2,3)


original***
var type = 'Ring Tailed Lemur';

function Lemur() {
  console.log(type);  //'Ring Tailed Lemur'
  var type = 'Ruffed Lemur';
}


var hoisted...


var type = 'Ring Tailed Lemur';

var type  //declaration moved here. assignment stays below
function Lemur() {
  console.log(type);  //undefined
  var type = 'Ruffed Lemur';
}

Important to note:
Page 91- Pro Typescript
Local variable declaration is moved to the top of the function at runtime, hiding the
global variable of the same name. The assignment remains in the original location.

https://www.freecodecamp.org/news/javascript-let-and-const-hoisting/
Both var and let are hoisted. However let gives an access error
Variables declared with let or const are hoisted WITHOUT a default initialization.
So accessing them before the line they were declared throws ReferenceError: Cannot access 'variable' before initialization.

But variables declared with var are hoisted WITH a default initialization of undefined. So accessing them before the line
they were declared returns undefined.


original let****

let type = 'Ring Tailed Lemur';

function Lemur() {
  console.log(type);  //undefined
  let type = 'Ruffed Lemur';
}


let hoisted...


let type = 'Ring Tailed Lemur';

function Lemur() {
  let type     //moved to top of block scope
  console.log(type);  //undefined
  type = 'Ruffed Lemur';
}

Imp--
let variables are hoisted "top of the block scope" whereas var variables are hoisted at "top of the function" pg 91

Variable hoisting also applies to the let keyword, although the declaration in this case is hoisted to the top of the
block scope rather than to the top of the function scope.


Properties belong to objects; Variables belong to contexts (https://javascriptweblog.wordpress.com/2010/08/09/variables-vs-properties-in-javascript/)

class properties
variables inside functions


https://www.typescriptlang.org/play/#src=class%20ClickCounter%20%7B%0D%0A%20private%20count%20%3D%208%3B%0D%0A%0D%0A%0D%0A%20registerClick%20%3D%20()%20%3D%3E%20%7B%0D%0A%20%20%20%20this.count%2B%2B%3B%20%20%20%2F%2F%0D%0A%20%20%20%20alert(this.count)%3B%0D%0A%20%7D%0D%0A%0D%0A%20testfunc()%20%7B%0D%0A%20%20%20%20let%20count2%20%3D%204%3B%0D%0A%20%20%20%20%0D%0A%0D%0A%20%20%20%20let%20registerClick2%20%3D%20()%20%3D%3E%20%7B%0D%0A%20%20%20%20%20%20%20%20count2%2B%2B%3B%20%20%20%0D%0A%20%20%20%20%20%20%20%20alert(this.count)%3B%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%20%20%20%20registerClick2()%3B%0D%0A%20%7D%0D%0A%7D%0D%0A%0D%0Alet%20x%20%3D%20new%20ClickCounter()%3B%0D%0Ax.testfunc()%3B



https://www.typescriptlang.org/


Visual Studio 2017 and Visual Studio 2015 Update 3 include TypeScript by default



--strictNullChecks  set via tsconfig.json
In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void).


type assertion is like a type cast

let someValue: any = "this is a string";

let strLength: number = (<string>someValue).length;


Array destructuring
let input = [1, 2];
let [first, second] = input;


let hoisting example(same name variable): https://www.typescriptlang.org/play/index.html#src=function%20f(input%3A%20boolean)%20%7B%0D%0A%20%20%20%20let%20a%20%3D%20100%3B%0D%0A%20%20%20%20alert(a)%3B%0D%0A%0D%0A%20%20%20%20if%20(input)%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2F%20Still%20okay%20to%20reference%20'a'%0D%0A%20%20%20%20%20%20%20%20%0D%0A%20%20%20%20%20%20%20%20let%20a%20%3D%202%3B%0D%0A%20%20%20%20%20%20%20%20alert(a)%3B%0D%0A%20%20%20%20%7D%0D%0A%0D%0A%7D%0D%0A%0D%0Af(true)%3B

interface LabelledValue {
    label: string;
}

function printLabel(labelledObj: LabelledValue) {
    console.log(labelledObj.label);
}

let myObj = {size: 10, label: "Size 10 Object"};

printLabel(myObj);


Notice that our object actually has more properties than this, but the compiler only checks that at least the ones required are present and match the types required.

interface SquareConfig {
    color?: string;
    width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
    let newSquare = {color: "white", area: 100};
    return newSquare;
}

let myObj = { aa:"sdsdf", color: "black"};
let mySquare = createSquare(myObj);   //object with extra properties ok
//let mySquare = createSquare({ aa:"sdsdf", color: "black"}); //not ok

https://www.typescriptlang.org/play/index.html#src=interface%20SquareConfig%20%7B%0D%0A%20%20%20%20color%3F%3A%20string%3B%0D%0A%20%20%20%20width%3F%3A%20number%3B%0D%0A%7D%0D%0A%0D%0Afunction%20createSquare(config%3A%20SquareConfig)%3A%20%7B%20color%3A%20string%3B%20area%3A%20number%20%7D%20%7B%0D%0A%20%20%20%20let%20newSquare%20%3D%20%7Bcolor%3A%20%22white%22%2C%20area%3A%20100%7D%3B%0D%0A%20%20%20%20return%20newSquare%3B%0D%0A%7D%0D%0A%0D%0Alet%20myObj%20%3D%20%7B%20aa%3A%22sdsdf%22%2C%20color%3A%20%22black%22%7D%3B%0D%0Alet%20mySquare%20%3D%20createSquare(myObj)%3B%0D%0A%2F%2Flet%20mySquare%20%3D%20createSquare(%7B%20aa%3A%22sdsdf%22%2C%20color%3A%20%22black%22%7D)%3B


interface Point {
    readonly x: number;
    readonly y: number;
}





class Greeter {
    greeting: string;  //property
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {  //method
        return "Hello, " + this.greeting;
    }
}


class Greeter {
    constructor(public message: string) {
    }
    greet() {  //method
        return "Hello, " + this.greeting;
    }
}


public by default
private property cannot be accessed from outside of its containing class.


get & set property

class Employee {
    private _fullName: string;

    get fullName(): string {
        return this._fullName;
    }

    set fullName(newName: string) {
        if (passcode && passcode == "secret passcode") {
            this._fullName = newName;
        }
        else {
            console.log("Error: Unauthorized update of employee!");
        }
    }
}

functions
function add(x: number, y: number): number {
    return x + y;
}

arrow function - this


let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],

    createCardPicker: function () {
        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
        return () => {
            let pickedSuit : number = 1;
            return {suit: this.suits[pickedSuit]};
        }
    }
}

let s: any = deck.createCardPicker();
let pickedCard = s();

alert(pickedCard.suit);


https://www.typescriptlang.org/play/index.html#src=let%20deck%20%3D%20%7B%0D%0A%20%20%20%20suits%3A%20%5B%22hearts%22%2C%20%22spades%22%2C%20%22clubs%22%2C%20%22diamonds%22%5D%2C%0D%0A%20%20%20%20%0D%0A%20%20%20%20createCardPicker%3A%20function%20()%20%7B%0D%0A%20%20%20%20%20%20%20%20%2F%2F%20NOTE%3A%20the%20line%20below%20is%20now%20an%20arrow%20function%2C%20allowing%20us%20to%20capture%20'this'%20right%20here%0D%0A%20%20%20%20%20%20%20%20return%20()%20%3D%3E%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20pickedSuit%20%3A%20number%20%3D%201%3B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%7Bsuit%3A%20this.suits%5BpickedSuit%5D%7D%3B%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Alet%20s%3A%20any%20%3D%20deck.createCardPicker()%3B%0D%0Alet%20pickedCard%20%3D%20s()%3B%0D%0A%0D%0Aalert(pickedCard.suit)%3B%0D%0A


use for..of loops instead of (for-in and foreach- see above)  -https://www.typescriptlang.org/docs/handbook/iterators-and-generators.html

let list = [4, 5, 6];
for (let i of list) {
   console.log(i); // "4", "5", "6"
}



Namespaces: https://www.typescriptlang.org/docs/handbook/namespaces.html
As we add more validators, we re going to want to have some kind of organization scheme so that we can keep track of our types and not worry about name collisions with other objects. Instead of putting lots of different names into the global namespace, let s wrap up our objects into a namespace.


for intellisense: /// <reference path="..." />
A reference directive enables Visual Studio to establish a relationship between the script you are currently editing and other scripts. The reference directive lets you include a script file in the scripting context of the current script file. This enables IntelliSense to reference externally defined functions, types, and fields as you code.


Integrating with Build Tools- MSBuild

tsconfig
 exclude from typescript compilation process:
 "exclude": [
    "node_modules/*",
    "**/*-aot.ts"
  ]


extending tsconfig.json



-------------------------------------



1) Take notes  2) Identify useful features for sample app


****angular 2***

Apress..


Node.js: simple and efficient runtime for 'server-side' applications written in JavaScript

Node.js is based on the JavaScript engine used in the Chrome browser and provides an API for executing JavaScript code
'outside' of the browser environment.

Node.js has enjoyed success as an application 'server'

NPM: NPM takes care of downloading packages and managing the dependencies between them. updating the version of NPM that was installed with Node.js,
 package manager for JavaScript

package.json*

dependencies: required for website to run (angular core libraries, polyfills, bootstrap)

devDependencies: required for development. not needed once website is deployed (typescript)

scripts: list of scripts that can be run from the command line.


To process the package.json file to download and install the packages: 'npm install'  (will install node_modules)

npm run xxx


tsconfig.json * -> Configuring the TypeScript Compiler

two types of module used in Angular development: A JavaScript module is a file that contains JavaScript
functionality that is used through the import keyword.

The other type of module is an Angular module,
which is used to describe an application or a group of related features. E


array filter

return this.model.items.filter(function (item) { return !item.done });

same as

getTodoItems() {
  return this.model.items.filter(item => !item.done);
}



template variable: whose name starts with the # character, which is used to define a
variable to refer to the element in the template s data bindings.

<input class="form-control" #todoText />
<button class="btn btn-primary m-t-1" (click)="addItem(todoText.value)">

2 types of attributes (pg 49)
class-> name & value
required-> only name
<input class="form-control" required />



pg 73
can use either function declaration or function expression. just be consistent - pg 74

***function declaration*** (subject to function hoisting- function declaration hoisted/placed before code statements)

myFunc(); //ok since subject to function hoisting

function myFunc() {
 console.log("This is a statement");
}

myFunc(); //ok




***function expression*** (not subject to function hoisting)

myFunc(); //not ok. since hasn't been declared

let myFunc = function() {
console.log("This is a statement");
};


Using Functions as Arguments to Other Functions pg 76


Arrow Functions

let myFunc = (input) => ("Hello " + input + ".");

There are three parts to an arrow function:
the input parameters,
then an equal sign and a greater-than sign (the  arrow ), and finally
the function result.

The return keyword and curly braces are required only if the arrow function needs to execute more than one statement.

let myFunc = (input) => {
		  statment a;
		  return 'test';
		};


Remember to wrap the object literal in parentheses.
var func = () => ({foo: 1});


let: The let keyword is used to declare variables and, 'optionally', assign a value to the variable in a single
statement.


Using a Template String:   let message = `It is ${weather} today`;



if (firstVal === secondVal) {:   ensure that the values and the types are the same,


numbers to strings: (5).toString() + String(5);
string to numbers: Number(firstVal) + Number(secondVal);  (or just put a + sign before)

Useful String to Number Methods
Number(str) This method parses the specified string to create an integer or real value.
parseInt(str) This method parses the specified string to create an integer value.
parseFloat(str) This method parses the specified string to create an integer or real value.


Enumerating the Contents of an Array

let myArray = [100, "Adam", true];

For-Of operator (Es6)
for (let value of iterable) {   <-- Preferably since you can break as well. Use for-of loops(you can break loop) instead of foreach(cannot break loop) or for-in(iterates through non-data properties as well (pg 368 -  angular 2 development with typescript book- appendix a)
  value += 1;			<-- if need index use forEach
  console.log(value);
}


for (let i = 0; i < myArray.length; i++) {
   console.log("Index " + i + ": " + myArray[i]);
}

for (let key in cities) {  (only iterates through keys- not values)
   console.log(`${key}: ${cities[key][0]}, ${cities[key][1]}`);
}

myArray.forEach((value, index) => console.log("Index " + index + ": " + value)); <-- provides index though


Built-in Array methods: pg 87/88
filter, find, findIndex, foreach(use for-of ES6 instead), includes, map, reduce, slice(start,end), sort, every, some,  pop, push etc...)
concat, join, shift, reverse

slice(start,end)     This method returns a section of the array. The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included).
		     The original array will not be modified.  (Paging get pageindex)

splice(index, count) This method removes count items from the array, starting at the specified index. The removed items are returned as the result of the method.
	             The splice() method changes the contents of an array by removing existing elements and/or adding new elements.
		     (after save, update, delete.. products). when you actually want to modify the array.

splice with update
  let index = this.products.findIndex(p => this.locator(p, product.id));
  this.products.splice(index, 1, product);

splice with delete
  let index = this.products.findIndex(p => this.locator(p, id));
  if (index > -1) {
    this.products.splice(index, 1);
  }



**Arrays reference**
DAL/service layer of angular apps
pg 87/88 - apress pro angular
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find?v=control

removes and then re-add product
this.products.splice(this.products.findIndex(p => p.id == product.id), 1, product);

delete (sportstore)
this.products.splice(this.products.findIndex(p => p.id == id), 1);


can also chain array methods


let products = [
{ name: "Hat", price: 24.5, stock: 10 },
{ name: "Kayak", price: 289.99, stock: 1 },
{ name: "Soccer Ball", price: 10, stock: 0 },
{ name: "Running Shoes", price: 116.50, stock: 20 }
];

let totalValue = products
.filter(item => item.stock > 0) //returns a new array
.reduce((prev, item) => prev + (item.price * item.stock), 0); //perform reduce on the new array

console.log("Total value: $" + totalValue.toFixed(2));


objects
let myData = {
name: "Adam",
weather: "sunny"
};

add function

let myData = {
name: "Adam",
weather: "sunny",
printMessages: function () {
console.log("Hello " + this.name + ". ");
console.log("Today is " + this.weather + ".");
}
};
myData.printMessages();


class getters/setters

class MyClass {
constructor(name, weather) {
this.name = name;
this._weather = weather;
}
set weather(value) {
this._weather = value;
}
get weather() {
return `Today is ${this._weather}`;
}
printMessages() {
console.log("Hello " + this.name + ". ");
console.log(this.weather);
}
}


JavaScript modules are used to manage the dependencies in a web application, which means you don t
need to manage a set of script elements in the HTML document. Instead, a module loader is responsible
for figuring out which files are required to run an application, loading those files and executing them in the
right order.




Creating modules is simple and is performed automatically when TypeScript compiles a file, because each
file is treated as a module. pg 96

file-- treated as a module- is self enclosed. need to use export if anyone importing the module wants to use that class
export class Name {
  constructor(first, second) {
    this.first = first;
    this.second = second;
  }
get nameMessage() {
  return `Hello ${this.first} ${this.second}`;
 }
}



UNDERSTANDING MODULE RESOLUTION

import { Name, WeatherLocation } from "./modules/NameAndWeather";  (your app file treated as a module). relative path

import { Component } from "@angular/core"; (packages in the node_modules folder)


**can use static class (instead of singleton service)**

tempConverter.ts
export class TempConverter {
  static convertFtoC(temp: number) : string {
    return ((parseFloat(temp.toPrecision(2)) - 32) / 1.8).toFixed(1);
  }
}

anotherfile.ts
import { TempConverter } from "./tempConverter";
let cTemp = TempConverter.convertFtoC(38);



Returning/Accepting Multiple types pg 104 (|)- union type.

This can be useful when a method can accept or return multiple types or when a variable can be assigned values of different types.

static convertFtoC(temp: number | string): string {
   let value: number = (<number>temp).toPrecision

An alternative to specifying a union type(|) is to use the 'any' keyword
static convertFtoC(temp: any): string {
  let value: number;
  if ((temp as number).toPrecision) {
  value = temp;


Typescript - typecast (<> Vs as)
let value: number = <number>temp;
let value: number = temp as number;


Tuples: Tuples are fixed-length arrays, where each item in the array is of a specified type.
let tuple: [string, string, string];
tuple = ["London", "raining", TempConverter.convertFtoC("38")]
console.log(`It is ${tuple[2]} degrees C and ${tuple[1]} in ${tuple[0]}`);



Indexable Types: Indexable types associate a key with a value, creating a map-like collection that can be used to gather related
data items together.


let cities: { [index: string]: [string, string] } = {};
cities["London"] = ["raining", TempConverter.convertFtoC("38")];
cities["Paris"] = ["sunny", TempConverter.convertFtoC("52")];
cities["Berlin"] = ["snowing", TempConverter.convertFtoC("23")];

for (let key in cities) {  (using for-in)
  console.log(`${key}: ${cities[key][0]}, ${cities[key][1]}`);
}


Imp pg 107*************
class properties & methods used in view data-bindings should be marked as public or has no access modifier on it
(which is why you don't see that in apress examples)

Caution: any property or method that is accessed in a 'data binding expression' is marked as public or has no access modified
(which has the same effect as using the public keyword). pg 107*


export class StoreComponent {

     public selectedCategory = null; //public property. used in view

     constructor(private repository: ProductRepository,
  private cart: Cart,
   private router: Router) { }

     changeCategory(newCategory?: string) {
 this.selectedCategory = newCategory;
    }  //method. public by default. used in view

     get categories(): string[] {
 return this.repository.getCategories();
 }  //get is to get a property

     static convertFtoC(temp: any): string {
       StoreComponent.performCalculation() //calling private method


     private static performCalculation(value: number): number {   //private method
        return (parseFloat(value.toPrecision(2)) - 32) / 1.8;
     }

model:
export class Product {


constructor(
        public id?: number,
        public name?: string,
        public category?: string,
        public description?: string,
        public price?: number) { }
}


public This keyword is used to denote a property or method that can be accessed anywhere. This is the default access protection if no keyword is used.

private This keyword is used to denote a property or method that can be accessed only within the class that defines it.

protected This keyword is used to denote a property or method that can be accessed only within the class that defines it or by classes that extend that class


Angular depends on Reactive Extensions, which is a package for managing events and change notifications
node_modules/rxjs/*.js

There are two types of Angular modules: feature modules and the root module. Features modules are used to
group related application functionality to make the application easier to manage.

root module: app.module.ts
Bootstrap File:  main.ts

Adding the JavaScript Module Loader to the HTML Document

JavaScript module loader will load the bootstrap file and execute it to start Angular and the SportsStore application

<script>
System.import("app/main").catch(function(err){ console.error(err); });
</script>


?- optional parameters. pg 122

export class Product {
 constructor(
   public id?: number,
   public price?: number) { }
}

The @Injectable- service can be injected

using subscribe method on the Observable object

@NgModule({
imports: [ModelModule, BrowserModule, FormsModule],  //import these modules
declarations: [StoreComponent],
exports: [StoreComponent]
providers:      //tells Angular which classes should be used as services for the dependency injection feature

getter property
export class StoreComponent {
      constructor(private repository: ProductRepository) { }

      get products(): Product[] {
        return this.repository.getProducts();
}

<div class="col-xs-9 bg-success p-a-1">
{{products.length}} Products
</div>


online doc reference: https://angular.io/guide/architecture#modules
Ngmodule properties Reference: https://angular.io/guide/ngmodule-faq#ngmodule-api

good !!

declarations - the view classes(components, directives, and pipes) that belong to this module.
exports - the subset of declarations that should be visible and usable in the 'component templates' of 'other' modules
imports - other modules whose 'exported classes' are needed by 'component templates' declared in 'this' module.
providers - creators of services that this module contributes to the global collection of services; they become accessible in all parts of the app.
bootstrap - the main application view, called the root component, that hosts all other app views. Only the root module should set this bootstrap property


pg 535- good example

imports -> This property is used to import the modules that are required by the classes in the modules.

providers ->  This property is used to define the module s providers. When the feature module is
loaded, the set of providers are combined with those in the root module, which means
that the feature module s services are available throughout the application (and not just
within the module).

declarations -> This property is used to specify the directives, components, and pipes in the module.
This property must contain the classes that are used within the module and those that are
exposed by the module to the rest of the application.
-->registers directives, components, and pipes in the module

exports -> This property is used to define the public exports from the module. It contains some or all
of the 'directives, components, and pipes' from the declarations property and some or all
of the modules from the imports property.

currency:"USD":true:"2.2-2"
currency[:currencyCode[:symbolDisplay[:digitInfo]]]
{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}


pg 530



***For Root Module***
imports -> This property specifies the Angular modules that are required to support the
directives, components, and pipes in the application.

declarations -> This property is used to specify the directives, components, and pipes that are used in
the application.

providers  -> This property defines the service providers that will be used by the module s injector.
These are the providers that will be available throughout the application and used
when no local provider for a service is available, as described in Chapter 20.

bootstrap  -> This property specifies the root components for the application


***For Feature Modules***

imports -> Specifies the modules that need to be imported to support the directives, components, and pipes in THIS feature module

declarations -> Specifies the directives, components, and pipes that are used in THIS feature module

providers  -> Specifies the service providers that will be used by THIS feature module s injector.

exportAs - > e.g. export some Directives, Components so you can use them in templates
Angular's NgModule also has imports and exports and they serve a similar purpose.
You 'import' other NgModules so you can use their 'exported classes' in component templates. You export this NgModule's classes so they can
be imported and used by components of other modules.


E.g. Feature Module

StoreModule
@NgModule({
    imports: [BrowserModule, FormsModule, RouterModule],
    declarations: [StoreComponent, CounterDirective, CartSummaryComponent,
                   CartDetailComponent, CheckoutComponent]
   (no exports)
})


RootModule
@NgModule({
    imports: [ StoreModule,
        RouterModule.forRoot([
            {
                path: 'store', component: StoreComponent,  <-- Can Refer to StoreComponent class since we imported StoreModule
                canActivate: [StoreFirstGuard]





IMP**************

@Component({

    selector: 'my-app',

    template: `
<button (click)="changeCategory()"></button>
  `
})



export class AppComponent {

subtitle = '(v2)';



changeCategory(newCategory?: string) {
     //IMP**** default value is undefined and not null for optional parameters if nothing is passed in***** IMP*****
    alert(newCategory === undefined);
   //true
    this.getProducts(newCategory);
 }


 getProducts(category: string = null){
  //passing undefined means no value passed. will get default null value !!
     alert(category === null);
          //true
  }
}


The undefined type is the value of a variable that has not been assigned a value
The null type can be used to represent an intentional 'absence of an object value'

pg 141- chp 8

this.lines.forEach(l => {
  this.itemCount += l.quantity;
  this.cartPrice += (l.quantity * l.product.price);
})

<input type="number"
[value]="line.quantity"
(change)="cart.updateQuantity(line.product,
$event.target.value)"/>


@NgModule({
imports: [HttpModule],

The imports property is used to declare a dependency on HttpModule feature module, which provides
the Http service



regular route:   path: "checkout", component: CheckoutComponent, canActivate: [StoreFirstGuard]
lazy loaded route: {
	path: "admin",
	loadChildren: "app/admin/admin.module#AdminModule",
	canActivate: [StoreFirstGuard]
},


<button class="btn btn-outline-info btn-block"
	routerLink="/admin/main/orders"
	routerLinkActive="active">
Orders
</button>

These buttons use the routerLinkActive attribute, which is used to add the element to a CSS class when the route specified by the
routerLink attribute is active


Class 'method' getProducts()
<tr *ngFor="let p of getProducts()">
getProducts(): Product[] {
        return this.repository.getProducts();
    }

Class 'property getter' getProducts()

get products(): Product[] {
 <div *ngFor="let product of products"


btn-warning applied later-overrides btn-primary
<button type="submit" class="btn btn-primary" [class.btn-warning]="editing">


chp 10- deployment


bootstrap file- main.ts

enableProdMode(); ?  angular-cli.json?



TODO

Chp 11- pg 207


'dependencies' This section is used to specify the packages that the application relies on,
including Angular itself.

'devDependencies' This section is used to specify the packages that are used in development, such
compilers and test frameworks.

'scripts' This section is used to define commands that are used to compile, test, or run the
application.



npm install- NPM will download the packages specified in Listing 11-3 and install them in a folder called node_
modules.


****package.json entries reference: pg 212 or html script files reference****

reflect-metadata This package implements a reflection API that is used to inspect decorators on
classes.

rxjs This is the Reactive Extensions package, which is used to implement the
Angular change-detection system that is used in data bindings, as described
in Chapters 12 17, and used directly for some Angular features,

'core-js' The Core-JS package provides support for new JavaScript features for
browsers that don t implement them. (polyfills)



installing typescript. new way (not appress way- old way)

https://stackoverflow.com/questions/40734991/whats-the-difference-from-installing-type-definition-files-using-typings-vs-npm

type information at: node_modules/@types

//installs typescript globally
npm install -g typescript


//installs Typescript Definition Manager
npm install -g tsd


//installs Typings
npm install -g typings


typescript - This is the package that provides TypeScript language support, including the
compiler. See the  Setting Up TypeScript  section for details.

typings - This is the package that provides type information for popular JavaScript
packages so they can be used more conveniently with TypeScript.


"moduleResolution": "node" or classic - (use node with angular-cli----[commonjs with systemjs- outdated]

Module resolution is the process the compiler uses to figure out what an import refers to. Consider an import statement like import { a } from "moduleA"


moduleResolution This setting specifies how the compiler deals with import statements. The
node value looks for package in the node_modules folder, which is where
they are placed by NPM.

tsc -w -The compiler will locate all the
TypeScript files in the project and compile them and, if required, report any errors it encounters

bs-config.js-  for browsersynch- lite server -test environment only


<script tags in html doc for polyfills- The JavaScript files are used to add missing features required
by Angular that are not supported by the browser and for the JavaScript module
loader.


****Reference - files in the root directory**** pg 222
tsconfig, package.json etc



Model broken to 3 parts- appress- sports store

1) Data Model
2) Data Source  (loads from server and save data to server)
3) Repository   (allow data in model to be manipulated. then calls data source)



A class that describes the data in the model
   A data source that loads and saves data, typically to a server
   A repository that allows the data in the model to be manipulated


apress stores data in an array in repository - choice


An Angular module is a TypeScript class whose metadata describes an application.


Reactive Extensions (RxJS) package development by Microsoft <------

that is used by Angular to distribute notifications throughout an application when the data model changes.



N/A
seperate line for rxjs - The paths feature that I used to deal with the RxJS package can t be used on
its own in this situation because the name of the module appears twice in the path name, which the paths
feature doesn t support pg 230


not needed for angular-cli (needed for systemjs) in index.html
<script>
System.import("app/main").catch(function(err){ console.error(err); });
</script>



<div class="bg-info p-a-1">
info, danger, success, and so on


Data binding expressions in view should be as simple as possible and rely on
components (and other Angular features such pipes) to provide
complex application logic. -> since they can't be tested




1 way binding - data flows from  -  model to  component to view
Event Binding - flows from - view to component
Two-way bindings - both directions

<div [ngClass]="getClasses()" >   (<div [ngClass]="'p-a-1 ' + getClasses()" >)

same as

<div Class="getClasses()" >

The square brackets tell Angular that this is a one-way data binding. When Angular
sees square brackets in a data binding, it will evaluate the expression and pass the
result to the binding s target so that it can modify the host element.

ngClass is a target ( this target is a builtIn directive - ngClass)
There are two different types of target: a directive or a property binding.


The names of the built-in directives start with 'ng'

The target usually gives an indication of what the directive
does, and, as its name suggests, the ngClass directive will add or remove the host element from the class or
classes whose names are returned when the expression is evaluated


There are two different types of target: a directive or a property binding.

***Built-in  Directive Binding***
ngClass, ngStyle, ngIf, ngFor, ngSwitch, ngTemplateOutlet

If the binding target doesn t correspond to a directive, then Angular checks to see whether the target can
be used to create a property binding


***Property Binding***

[property] - Standard Property Binding
	     <input  [value]=""   (value) is a standard property of html input tag


[attr.name] - attribute binding (on host element e.g. td). setting value of attributes
             <td [attr.colspan]="model.getProducts().length">
	     same as
	      <td colspan="model.getProducts().length">

[class.name]  class property binding- adding/removing classes conditionally
              <div   [class.bg-success]="model.getProduct(2).price < 50" class="p-a-1"
              if true - same as
	      <div   class = "bg-success p-a-1"


[style.name]  style property binding,
             <span [style.fontSize]="fontSizeWithUnits">
             same as
             <span style ="fontSize:"fontSizeWithUnits">


[] -  denotes 1 way binding


[target]="expr" The square brackets indicate a one-way data binding where data flows from
the expression to the target. The different forms of this type of binding are the
topic of this chapter.

{{expression}} This is the string interpolation binding, which is described in the  Using the
String Interpolation Binding  section.

(target) ="expr" The round brackets indicate a one-way binding where the data flows from the
target to the destination specified by the expression. This is the binding used
to handle events, as described in Chapter 14.

[(target)] ="expr" This combination of brackets known as the banana-in-a-box indicates a
two-way binding, where data flows in both directions between the target and
the destination specified by the expression, as described in Chapter 14.



template null conditional operator (the ? character) to safely navigate the result returned by the method
<input [value]="model.getProduct(1)?.name || 'None'" />
if name is null will let 'None'

string interpolation binding - {{ and }} boolean interpolated as a string



<div [class]="expr"></div>    replace any existing class memberships.
			      The standard property binding can be used to set 'all' of an element s classes in a 'single step',
e.g
<div [class]="getClasses(1)">



<div [class.myClass]="expr"></div>  sets individual classes
[class.bg-success]="model.getProduct(2).price < 50"
[class.bg-info]="model.getProduct(2).price >= 50">


Class binding Reference pg 249

<div [class]="expr"></div>     'replace' any existing class memberships.
			    The standard property binding can be used to set 'all' of an element s classes in a 'single step',

<div [class.myClass]="expr"></div>  set individual classes conditionally

<div [ngClass]="map"></div>    set class property on div. sets class membership of multiple classes


set individual classes conditionally
<div class="p-a-1"
[class.bg-success]="model.getProduct(2).price < 50"
[class.bg-info]="model.getProduct(2).price >= 50">


Js false values
   The false (boolean) value
   The 0 (number) value    <----
   The empty string ("")   <----
   null
   undefined
   NaN (a special number value)




[ngClass]= can accept a string, array or an object  pg 252

object e.g

<div class="p-a-1" [ngClass]="getClassMap(2)">   <-- get object with classes to be applied

getClassMap(key: number): Object {
   let product = this.model.getProduct(key);

    return {
      "text-xs-center bg-danger": product.name == "Kayak",
      "bg-info": product.price < 50
   };
}



Style Bindings to set style properties of the host element- pg 254

<div [style.myStyle]="expr"></div>           --> <span [style.fontSize]="fontSizeWithUnits"  set font for host element s element span

<div [style.myStyle.units]="expr"></div>     --> <span [style.fontSize.px]="fontSizeWithoutUnits" . This is the special style binding, which allows the unitsfor the style value to be specified as part of the target.

<div [ngStyle]="map"></div>		     --> use map object from code. allows multiple style properties to be set using a map object


Caution Do not try to use the standard property binding to target the [style] property  in order to set
multiple style values. Use [ngStyle] instead

Tip You can specify style properties using the JavaScript property name format ([style.fontSize]) or
using the CSS property name format ([style.font-size]). https://www.w3schools.com/jsref/dom_obj_style.asp


The <span [ngStyle]="getStyles(1)">first</span>

getStyles(key: number) {
let product = this.model.getProduct(key);

 return {
  fontSize: "30px",    <--
  "margin.px": 100,    <------- can also do
  color: product.price > 50 ? "red" : "green"
};



Debugging (pg 259)
updating model in browser's console window for testing purposes


Chp 13- pg 261


built-in template directives. * & []

*ngIf, *ngFor   (structural directives)

[ngClass], [ngStyle], [ngSwitch]



<div *ngFor="#item of expr"></div>

<tr *ngFor="let item of getProducts()">  --item is template variable (variable in the template)
<td>{{item.name}}</td>

ngFor (Local Template variables that are available) pg 271
index, odd, even, first, last

<tr *ngFor="let item of getProducts(); let i = index">  <-- let keyword to assign the index value to a 'local template variable'
<td>{{i +1}}</td>


The odd value is true when the index value for a data item is odd.

<tr *ngFor="let item of getProducts(); let i = index; let odd = odd"
[class.bg-primary]="odd" [class.bg-info]="!odd">
<td>{{i + 1}}</td>


<tr *ngFor="let item of getProducts(); let i = index; let odd = odd;
let first = first; let last = last"
[class.bg-primary]="odd" [class.bg-info]="!odd"
[class.bg-warning]="first || last">


****Performance Optimizing ngFor**** - 'trackBy' (pg 278)
Only if performance issues. e.g. big array

ngFor (if object changes) angular will remove and re-insert all the elements even though if one element in the array was removed.
to help angular only remove just 1 element from DOM. use trackBy in ngFor to provide a unique id that identify's the item
so angular can better process ngFor (create or destroy only the things that changed)
https://netbasal.com/angular-2-improve-performance-with-trackby-cc147b5104e5

<tr *ngFor="let item of getProducts(); trackBy:getKey"

getKey(index: number, product: Product) {
    return product.id;
}






ngTemplateOutlet Directive: The ngTemplateOutlet directive is used to repeat a block of content at a specified location, which can be
useful when you need to generate the same content in different places and want to avoid duplication
which can be
useful when you need to generate the same content in different places and want to avoid duplication

<template #titleTemplate let-text="title">
   <h4 class="p-a-1 bg-success">{{text}}</h4>
</template>


<template [ngTemplateOutlet]="titleTemplate"
	  [ngOutletContext]="{title: 'Header'}">  -- to provide data for template
</template>

<div class="bg-info p-a-1 m-a-1">
    There are {{getProductCount()}} products.
</div>

<template [ngTemplateOutlet]="titleTemplate"
	  [ngOutletContext]="{title: 'footer'}">  -- to provide data for template
</template>

better way
<div *ngTemplateOutlet="titleTemplate" [ngOutletContext]="{title: 'Footer'}">
</div>


cannot access global objects in view. need to do in template  pg 286
<div class='bg-info p-a-1'>
The rounded price is {{Math.floor(getProduct(1).price)}}  cannot do
</div>


pg 282
One-Way Data Binding Restrictions
{{}} cannot modify model/object in the getter/method. Can do in *ngFor getter like in SportsStore(get products()) but not in {{}}

<div class='bg-info p-a-1'>
   Next Product is {{nextProduct.name}}
</div>

get nextProduct(): Product {
   return this.model.getProducts().shift();
}



todo pg 289- chp 14


event binding: 1 way binding- data flows from the host element to the rest of the application
td- host element
<td (mouseover)="selectedProduct=item.name">{{i + 1}}</td>


Imp- pg 295
Unlike 1 way bindings {{}},  the expressions in 'event bindings' are allowed to make changes to the state
of the application and can contain assignment operators, such as =.


events that an HTML element can send: developer.mozilla.org/en-US/docs/Web/Events


define all the properties that a template uses in the component, instead of having dynamic properties in template view

The event binding can also be used to introduce new data into the application from the event itself.
<input  (input)="selectedProduct=$event.target.value" />


When the browser triggers an event, it provides an object that describes it. There are different types of
event object for different categories of event (mouse events, keyboard events, form events, and so on), but all
events share the three properties


type This property returns a string that identifies the type of event that has been triggered.

target This property returns the object that triggered the event, which will generally be the

object that represents the HTML element in the DOM.

timeStamp

'$event is an object that describes the input event'
The event object is assigned to a 'template' variable called $event

$event-> $event is an object that describes the input event
$event.target-> object that triggered the event (<input
$event.target.value-> input's(HTMLInputElement) tag value property
<input  (input)="selectedProduct=$event.target.value" />


'Template Variable': Item
<tr *ngFor="let item of getProducts()">


'Template reference variable': used to refer to elements within the template. represents the
input element in the DOM,
<input #product class="form-control" (input)="false" />


<div class="bg-info p-a-1">
   Selected Product: {{product.value || '(None)'}}
</div>



Template Ref variables can also be used to change the state of the element,

value property of input element
<tr *ngFor="let item of getProducts(); let i = index" (mouseover)="product.value=item.name"


(input)="false" quirk-
Angular won t update the data bindings in the template when the user edits the contents of the input
element unless there is an event binding on that element. Setting the binding to false gives Angular
something to evaluate just so the update process will begin and distribute the current contents of the input
element throughout the template. This is a quirk of stretching the role of a template reference variable a little
too far and isn t something you will need to do in most real projects

<input #product class="form-control" (input)="false" />




<input #product class="form-control" (keyup.enter)="selectedProduct=product.value" />


--two bindings: an event binding and a property binding
<input class="form-control"
(input)="selectedProduct=$event.target.value"  ---event binding
[value]="selectedProduct || ''" 	       ---property binding
/>




ngModel directive is used to simplify two-way bindings so that you don t have to apply both an event and
a property binding to the same element


2 way binding (Behind the scenes, an event binding is applied to the input event, and a property binding is
applied to the value property)
<input class="form-control" [(ngModel)]="selectedProduct" />

same as

<input class="form-control"
(input)="selectedProduct=$event.target.value"  ---event binding
[value]="selectedProduct || ''" 	       ---property binding
/>


four attributes that you can add to input elements
required, minlength, maxlength, pattern


novalidate- The validation attributes that Angular uses are the same ones used by the HTML 5 specification, so
I have added the novalidate attribute to the form element, which tells the browser not to use its native
validation features, which are inconsistently implemented by different browsers and generally get in the
way.

<form novalidate (ngSubmit)="addProduct(newProduct)">


<input class="form-control"
name="name"  <--newProduct.name needed for validation
[(ngModel)]="newProduct.name"
required
minlength="5"
pattern="^[A-Za-z ]+$"/>


Attribute Directives - chp 15- pg 337

******Attribute Directives modify the 'behavior' or appearance of the host element they are applied to(div below). (using DOM api
change class(can do via class binding as well) or height etc of element based on a dynamic condition)****

******Example******
pa-attr changes 'behavior' or 'appearance' of the 'div' element based on some dynamic condition
<div pa-attr = "dynamic condition + input value provide" >

e.g. use dom api to change some attribute on host element 'div' e.g. class, height
or make use of object on the div element(product below) (e.g. ng-repeat) to do something else for instance set a property in another object

do not use dom api** use @hostbinding and @hostlistener (pg 354) to setup property and event bindings. more simpler

-------------------------------------
Prefer than the one below it. 1-way binding [pa-attr]

<tr *ngFor="let item of getProducts(); let i = index"
  [pa-attr]="getProducts().length < 6 ? 'bg-success' : 'bg-warning'"
  [pa-product]="item" (pa-category)="newProduct.category=$event">
  <td>{{i + 1}}</td>


@Input("pa-attr")
@HostBinding("class")  <----- property binding. class attribute of <tr set
bgClass: string;

@Input("pa-product")
product: Product;

@Output("pa-category")
click = new EventEmitter<string>();

@HostListener("click")   <--- event binding on <tr. when tr is clicked. <tr  [pa-attr]=''
triggerCustomEvent() {
  if (this.product != null) {
    this.click.emit(this.product.category);
  }
}

-------------------------------------

e.d manually creating attribute directive (paModel) with 2 way binding. like built-in ngModel directive pg 355

<input class="bg-primary" [(paModel)]="newProduct.name" />  net effect just like ngModel. if newProduct.name changes
this input value changes. if you change this input value then newProduct.name changes.

<input class="bg-primary" [(ngModel)]="newProduct.name" />




-------------------------
<tr *ngFor="let product of getProducts();

Attribute Directives are custom directives that change 'the [appearance] or [behavior] of a single element'
e.g.Built-in Attribute Directives:  style and class bindings. [ngClass] and [ngStyle].
e.g. click a row in a table and make use of the object tied to that row to raise an event to set something else

structural directives are custom directives that change '[layout] of the HTML document'


Components are also a type of directive


@Directive({
selector: "[pa-attr]",  <--CSS selector that matches any element that has an attribute called pa-attr,
})			<-- meaningful prefix - 'pa'



@Directive({
  selector: "[pa-attr]",
})

export class PaAttrDirective {
   constructor(element: ElementRef) {  <-- ElementRef is the host element (below its div)
     element.nativeElement.classList.add("bg-success");   <-- add this class to the 'div' on which pa-attr attribute is applied
   }
}

element.nativeElement -> 'div' object represented in the DOM
element.nativeElement.classList -> classList using DOM API. https://developer.mozilla.org/en-US/docs/Web/API/Element/classList

<div pa-attr>



---attribute directive - interacting/making use of host element's attribute values to change appearance/behavior of the directive


<tr *ngFor="let item of getProducts(); let i = index" pa-attr>
<td>{{item.name}}</td>
<td pa-attr="bg-warning">{{item.category}}</td>
<td pa-attr="bg-info">{{item.price}}</td>

@Directive({
  selector: "[pa-attr]",
})
export class PaAttrDirective {
  constructor(element: ElementRef, @Attribute("pa-attr") bgClass: string) {
    element.nativeElement.classList.add(bgClass || "bg-success");   //element to whom pa-attr directive is applied but pa-attr-class is not applied gets the default value - bg-success
  }
}


Vs

Dynamic
<tr *ngFor="let item of getProducts(); let i = index"
      [pa-attr]="getProducts().length < 6 ? 'bg-success' : 'bg-warning'">
  <td>{{i + 1}}</td>
  <td [pa-attr]="item.category == 'Soccer' ? 'bg-info' : null">{{item.category}}</td>
  <td [pa-attr]="'bg-info'">{{item.price}}</td>
</tr>


[pa-attr] -> Notice that the attribute name is enclosed in square brackets. That s because the way to receive an
expression in a directive is to create a data binding

export class PaAttrDirective {
  constructor(private element: ElementRef) {}

@Input("pa-attr")
bgClass: string;

ngOnInit() {
  this.element.nativeElement.classList.add(this.bgClass || "bg-success");
}
}


The Directive Lifecycle Hook Methods Reference -

pg 348. https://angular.io/guide/lifecycle-hooks  (appress).
pg 188 (angular 2 with typescript)


ngOnInit This method is called after Angular has set the initial value for all the input
properties that the directive has declared.

ngOnChanges This method is called when the value of an 'input property' has changed and
also just before the ngOnInit method is called.

ngDoCheck This method is called when Angular runs its change detection process so that
directives have an opportunity to update any state that isn t directly associated
with an input property.

ngOnDestroy This method is called immediately before Angular destroys a directive.

ngAfterContentInit: This method is called when the 'directive s content' has been initialized. (compare to ngOnInit when 'input properties' have been initialized)
eg pg 396

ngAfterContentChecked

pg (pg 430)
ngAfterViewInit: This method is called when the component s view has been initialized. The results
of the view queries are set before this method is invoked.

ngAfterViewChecked: This method is called after the component s view has been checked as part of the
change detection process.

Whenever you see the word 'Content' in the name of the lifecycle callback method,
that method is applied if content is projected using <ng-content>. When you see the
word 'View' in the name of the callback method (ngAfterViewInit), it applies to the template of the component. pg 188 (angular 2 with typescript)


difference between @ViewContent and @ViewChildren
http://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/

pg 519: The @Component decorator s providers property is used to define providers that will be used to resolve
service dependencies for all children, regardless of whether they are defined in the template (view children)
or projected from the host element (content children).

https://angular.io/api/core/ContentChildren  (pg 396)  Used it in Structural/Attribute Directive
https://angular.io/api/core/ViewChildren (pg 429)      Used it in Components


<todo-app>
  <app-footer>
    Yet another todo app!
  </app-footer>
</todo-app>


@Component({
  selector: 'todo-app',
  template: `
    <section>
      Add todo:
      <todo-input (todo)="addTodo($event)"></todo-input>
    </section>
    <section>
      <h4 *ngIf="todos.getAll().length">Todo list</h4>
      <todo-item *ngFor="let todo of todos.getAll()" [todo]="todo">
      </todo>
    </section>
    <ng-content select="app-footer"></ng-content>
  `
})
class

*The children element which are located inside of its template of a component are called *view children *.

 On the other hand, **elements which are used between the opening and closing tags of the host element of a given component are called *content children **

This means that todo-input and todo-item could be considered view children of todo-app,

and app-footer (if it is defined as Angular component or directive) could be considered as a content child




convert object to json in component: JSON.stringify(product)


directives didn t notice because changing a property value doesn t automatically cause directives to respond.
you have to implement the ngOnChanges method




constructor(private element: ElementRef) {
  this.element.nativeElement.addEventListener("click", e => {
    if (this.product != null) {   <-- not yet set when initialized. have to wait till ngoninit.
				  <--when the host element is clicked this.product should have initialized (pg 352, pg 348)
      this.click.emit(this.product.category);
     }
   });
}

@Input("pa-product")
product: Product;


takeaway--- in constructor, input properties will not have initialized. will have to wait till ngoninit. or you can setup
a conditional event binding like above that will be true later


pg 359
@Directive({
   selector: "input[paModel]",
   exportAs: "paModel"  <--The exportAs property of the @Directive decorator specifies a name that will be used to refer to the
                          directive in template variables.
			When you use the exportAs decorator, you are providing access to all the methods and properties
                         defined by the directive to be used in template view expressions and data bindings. in this case direction
})

export class PaModel {
   direction: string = "None";


--template variable is called paModel
<input  [(paModel)]="newProduct.name" #paModel="paModel" />
<div>Direction: {{paModel.direction}}</div>


data is flowing from the model to the element or from the element to the model.




chp 16 - pg 363

***Structural Directives**

'Structural directives' change the layout of the HTML document by 'adding and removing' elements

Identification:
1) name will be prefixed with an asterisk, such as *ngIf and *ngFor
2) constructor
constructor(private container: ViewContainerRef,

            private template: TemplateRef<Object>) { }


Structural directives use 'micro-templates' to add content to the HTML document.

micro-templates- <template



<template [paIf]="showTable">  <-----P1
   <table class="table table-sm table-bordered table-striped">
     ....

or <=> same

<table *paIf="showTable"


ngIf=> The directive s name is prefixed with an asterisk (the * character) to tell Angular that this is a structural
directive that uses the concise syntax.


@Directive({
  selector: "[paIf]"
})

export class PaStructureDirective {
  constructor(
      private container: ViewContainerRef,  <-- 'manages' the contents of the view container (template element and its content)
      						 The ViewContainerRef represents the place in the HTML document occupied by the template element

      private template: TemplateRef<Object>) { }  <---- represents the 'content' of the template element P1
      						 TemplateRef represents the template element s contents




@Input("paIf")
expressionResult: boolean;


this.container.clear();
this.container.createEmbeddedView(this.template);



Attribute Directives  <=> custom [(paModel)] like built-in [(ngModel)], <div pa-attr="'bg-success'" >  (ok)
Structural Directives <=> custom *paIf       like built-in *ngIf  (ok)

 			  custom *paFor      like built-in *ngFor (issue- provision for collection level changes) operating on arrays/collections
			  custom *counter    SportsStore paging -  counter.directive. Simpler Structural directive. input just a number. No collection.

Components


Imp***
Only applicable to 'custom' Structural directives ('built-in' ones ngFor already have provision for Collection level changes and work fine)
pg 379


'Custom' Structural directive: *paIf (no issue)

*paFor -> needs custom complex code to account for collection level changes(adding/removing/updating)
'Custom' Structural directive: *paFor  (let obj of collection)
   1) property level changes (obj.prop1) ok
   2) collection level changes- need to account for (adding/removing) <--- performance better ng2



class PaIteratorContext {
odd: boolean; even: boolean;
first: boolean; last: boolean;

 constructor( public index: number) {   <--added as a property of PaIteratorContext since declared public: https://www.typescriptlang.org/play/index.html#src=class%20PaIteratorContext%20%7B%0D%0Aodd%3A%20boolean%3B%20even%3A%20boolean%3B%0D%0Afirst%3A%20boolean%3B%20last%3A%20boolean%3B%0D%0A%0D%0A%20constructor(%20public%20index%3A%20number)%20%7B%0D%0A%20%20%20this.odd%20%3D%20index%20%25%202%20%3D%3D%201%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Alet%20s%3A%20PaIteratorContext%20%3D%20new%20PaIteratorContext(4)%3B%0D%0A%0D%0Aalert(s.index)%3B%0D%0A
   this.odd = index % 2 == 1;
  }
}

let s: PaIteratorContext = new PaIteratorContext(4);

alert(s.index);



*ngfor official source code: https://github.com/angular/angular/blob/bebedfed24d6fbfa492e97f071e1d1b41e411280/packages/common/src/directives/ng_for_of.ts


Es6 map class- pg 388


Querying the Host Element Content-
Attribute directive can  query the Host Element's 'Content' to locate another attribute directive( 1 or many) and invoke its method.
can setup query notifications on Host Element's 'Content's attribue directive.

Odd- 'Querying the Host Element Content' section and beyond is attribute directives even though chp is structural directives

pg 396- apress. Rxjs Observable subscribe Concurrency issues*** processes it one by one.
 observables subscribe's function call- wrap in a timeout*** to avoid concurrency issues. function call will need to be finished before another one calls it as well

ngAfterContentInit() {
  this.contentChildren.changes.subscribe(() => {
    setTimeout(() => this.updateContentChildren(this.modelProperty), 0);
   });
}

@ContentChildren(PaCellColor)
contentChildren: QueryList<PaCellColor>;

The @ContentChild decorator tells Angular that the directive needs to query the host element s content
and assign the first result of the query to the property

above will not be available until ngAfterContentInit lifecycle hook


chp 18 - Pipes

****to 1) format data or 2) filter data****


Pipes are classes that are used to prepare data for display to the user.

polyfill for pipes- Internationalization API???? only for internationalization?


middle">{{item.price | currency:"USD":true }}</

true- show currency symbol


Number.parseFloat(string)


*****pure pipe****: When true, this pipe is reevaluated only
	 1) when its input value or
	 2) its arguments are changed.


{{item.price | addTax:(taxRate || 0) }} <-- input value: item.price, arguments: (taxRate || 0)


Pipes can be chained together



@Pipe({
  name: "addTax"
})

export class PaAddTaxPipe {
  defaultRate: number = 10;
  transform(value: any, rate?: any): number {  <-- transform method called if input value or rate changes
    return valueNumber + (valueNumber * (rateNumber / 100));
  }
}


{{item.price | addTax:(taxRate || 0) | currency:"USD":true }}   <---formats the number value into a currency amount. default 2 decimal places



***Impure Pipes***

if we have a ngFor on array with a custom filter and the pipe is pure. then adding,removing array items won't be detected.Need
to mark the pipe as impure.

The most common need for impure pipes is when they process the contents of 'arrays and the elements
in the array change'. <---------pg 445

Pure: false
pipe has its own state data or that it depends on data that may not be picked up in the change detection process when
there is a new value

When Angular performs its change detection process it invokes the transform methods even when there has been no data value or argument
changes


****impure pipes should be used sparingly***** pg 445
If you do create an impure pipe, then keep it as simple as possible. Performing
complex operations, such as sorting an array, can devastate the performance of an Angular application


IMP*** pg 445
Angular doesn t automatically detect changes that occur
within arrays and won t invoke a pure pipe s transform method when an array element is added, edited, or
deleted because it just sees the same array object being used as the input data value

eg
https://plnkr.co/edit/HWaVP06VW7hwDLamEbVR?p=preview



Built-in Pipes Reference: pg 448
number, currency, slice(paging?)

number pipe is affected by user's locale setting


Imp Dates (pg 459)- if filtering by date, then you wont see any changes if you update dateObject, since date filter's pure property is true.
to update you need to change the reference or use a custom datefilter with pure= false
https://stackoverflow.com/questions/40537714/how-can-i-get-my-angular2-datepipe-formatted-date-to-update

Change Reference
 <div>Date formatted from object: {{ dateObject | date }}</div>
  temp = this.dateObject.setDate(this.dateObject.getDate() + 2);
  this.dateObject= temp;

or create a custom impure pipe

import { Pipe } from "@angular/core";


import { DatePipe } from "@angular/common";


@Pipe({name: 'myDate',
 pure: false})
  <-------

export class MyDatePipe implements PipeTransform {


transform(value: any, pattern: string = 'mediumDate'): string {


 return (new DatePipe()).transform(value, pattern);


}
}


convert array to json for debugging - and its decorator s pure property is false

<div>{{ getProducts() | json }}</div>


slice is an impure pipe - object or collection level changes will be updated
***can be used to show dropdown for paging: pg 462**



-----------------------Directives Summary-----------------------------

'Attribute Directives' modify the 'behavior' or 'appearance'(class/height) of the host element they are applied to
    Built-in: [(ngModel)], Custom: [(paModel)]

'Structural Directives' change the layout of the HTML document by 'adding and removing' elements
    Built-in: *ngIf, *ngFor, Custom: *paIf

'Components' are 'directives' that define their own HTML content and, optionally, CSS styles
-------------------------------------------------------------------------------------------


TODO... Chp 17 - Components and then Chp 19 - Using Services

Components are 'directives' that define their own HTML content and, optionally, CSS styles


Components are 'directives' that have their 'own templates' rather than relying on content provided from
elsewhere(like attribute directives [ngModel] or structural directives [ngIf, ngFor])

Components provide the data and logic that will be used by the data bindings that are applied to the HTML elements in the
template


Components are also a useful tool in allowing large Angular projects to be broken up into manageable chunks

Components make it possible to define self-contained blocks of functionality that can be re-used in an application (like usercontrols)


Components provide all the functionality of directives(attributes & structural), with the
addition of providing their own templates

An application without components is harder to test because individual features can t be isolated effectively and is harder to enhance and
maintain because the code and markup become increasingly complex


Adding components to the application allows features to be teased apart into 'building blocks' that can
be used 'repeatedly' in different parts of the application


Components allow you to have manageable, reusable, and self-contained units.



ProductComponent is now the 'parent component' to the ProductFormComponent and
ProductTableComponent objects. ProductComponent's template (template.html) contains <paProductForm> and <paProductTable>


The parent/child relationship is an 'important one'
when it comes to Angular components, as you will see as I describe how components work in later sections

Inline template drawback: intellisence/syntax error checking since it'll treat it as a string


inline template backtick for readability
template: `<div class='bg-info p-a-1'>
	This is a multiline template
	</div>`


Advice is to use external templates...for html that contains more than two or three simple elements

naming convention
<componentname>.component.<type >
productTable.component.ts




A component s template can contain the full range of data bindings and target any of the
built-in directives or custom directives
that have been registered in the application s 'Angular module' via 'Declations' or 'Imports' section.  <-----

each component is isolated in that you don t have to worry about using the same property and method names that other components use and can rely on Angular to keep
everything separate.


Input property- passing data to child component <---

<div class="col-xs-8 p-a-1 bg-primary">
    <paProductTable [model]="model"></paProductTable>
</div>


export class ProductTableComponent {

@Input("model")
dataModel: Model;


Output Property- signal important changes to parent component  <---

Output Property on child component- that define custom events that signal important changes and that allow the parent component to respond when they occur


the child component s 'host element' acts as the bridge to the parent component, which can register interest in the
custom event

child component s 'host element': paProductForm
<paProductForm (paNewProduct)="addProduct($event)"></paProductForm>



don't really need to use ng-content. can just put *ngIf on the component: <paProductTable *ngIf=""  [model]="model"></paProductTable>


ng-content element: content projection
The important element is ng-content, which Angular will replace with the content of the host element

  ---------------------------------Host Component--------------------------------------------------------
  <paToggleView>

    <paProductTable [model]="model"></paProductTable>

  </paToggleView>
 --------------------------------------------------------------------------------------------------------

  ---------------------------------paToggleView Component-------------------------------------------------
  <div class="checkbox">

	<label>

	    <input type="checkbox" [(ngModel)]="showContent" />
        Show Content
    </label>

  </div>


  <ng-content *ngIf="showContent"></ng-content>
  -------------------------------------------------------------------------------------------------

Content projection is a pattern in which you insert(or project) the content you want to use inside another component.
Project host component content to another content

Summary: Host Component will project paProductTable to ng-content in paToggleView Component
Instead of hardcoding in paToggleView, you let the host component project it. Because some other host component could also
use paToggleView and project something different to it. Delegate the content responsibility to the host component.


Angular.Json: https://angular.io/guide/workspace-config
contains build configuration settings. contains workspace-wide and project-specific configuration defaults
Can bundle up your styles and scripts.

The angular.json file at the root level of an Angular workspace provides workspace-wide and project-specific configuration defaults.
These are used for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to
the root workspace directory.


Root component's only responsibilities after modulaizing into components:
1) to provide entry point into the application
2) Providing access to the application s data model so that it can be used in data
bindings



child components: simpler, easier to develop, and easier to maintain and that can be reused as required


Components can define styles that apply only to the content in their templates.
  without it being affected by the styles defined by its parents AND
  without affecting the content in its child components

can have the same selector name (e..g div) as the css selector name in parent or child without it being affected by parent's(div css selector)
 or it effecting the child's (div css selector)


View Encapsulation (pg 420)

Emulated (Default):   Keeps component's css seperate from other component's css( by specifying a special attribute selector for the component in the head)
		      even the same tag names(div). works in all the browsers that Angular supports, without the need for polyfills
None:  Puts the Css to the head and applies it to the whle document. e.g base.css
Native: relies on browser shadow dom. not implmented by browsers. issue. do not use. only sensible if you're using a polyfill library


re-phrase
None- adds all the styles defined by components to the head section of the HTML document
and lets the browser figure out how to apply them.

CSS selectors (can just put it on the component. don't have to do this)
By default components styles are isolated(viewencapsulation.emulated) but you can push style changes to parent or child components
:host   to apply styles to component s host element.
:host-context(classSelector)  ancestors of component s host element.
/deep/ or >>>  to apply styles to child component


Querying Component's Template Content
Components can query the content of their templates to locate instances of directives or components, which
are known as view children  (can also invoke methods the child components/directive exposes)

@ViewChildren(PaCellColor)
viewChildren: QueryList<PaCellColor>;


ngAfterViewInit() {  use this lifecycle event to get the value of viewChildren once its available
this.viewChildre


Chp 19 - Services

Note: There is no module-wide scope for providers****** If you declare a provider in a module and then import it to root module, then the root module also gets it and is available throughout the application
      You can create specific/local providers for 1) Directives(pg 514)  and 2) Components(viewchildren& contentchildren OR just contentchildren) (pg 516)


Classes declare dependencies on services using constructor parameters,
which are then resolved using the set of services for which the application
has been configured. Services are classes to which the @Injectable
decorator has been applied.

Any object that is managed and distributed through dependency injection is called a service

Services are singleton- only 1 object exists(shared)


Good exmaple: (*****Using Services with Pipe-pure and impure*****)

Pipe has a dependency on Service.
Pipe injects service

in Pipe Transform service is used.

Pipe pure property is false (impure), so updates to a private property in Service will invoke Pipe's transform method.
Caution:
this feature should be used with caution because it means that the
transform method will be called after every change in the application, not just when the service is changed


If pipe was pure, then Pipe's transform method would not have been called (which won t be recognized by the Angular
change-detection process.)


pg 482 exportas directive

 <td style="vertical-align:middle" [pa-price]="item.price"

     #discount="discount">
    {{ discount.discountAmount | currency:"USD": true }}
   <-- invoking a public property of discount directive
 </td>

@Directive({

  selector: "td[pa-price]",

  exportAs: "discount"
})   <-- can use in html above



pg 481-
*****Using Services with Directives*****
Scenario:

Directive computes Discount Amount based on
1) input property Price
2) Service's Discount Property

Issue: directive can keep track of input property change by implementing ngOnchanges, but cannot keep track if any of
the properties on Service 'object' (injected via Dependency Injection in constructor) like Discount property are changed. Need custom code for that.

Put keyValueDiffers on the object to watch all its properties. on ngDocheck, check if the service object changed, then recalculate
the Discount Amount.

You can use KeyValueDiffers to monitor changes in objects or arrays. pg 500 appress

services can declare dependencies on other services



<---------------------------------------------------HERE----------------------------------------------------------



Can use Services/Dependency Injection for Unit Testing Purposes
@Model, @SimpleDataSource as services and inject it


apress author's preference: My preference is to use dependency injection as widely as possible.


Take away****
Using Services(DI) provided a shared object for all components/directives etc, instead of parent component instantiating the object and passing it
from parent component to child component. Plus you can unit test


Chp 20- Using Service Providers

'Providers' are classes that create service objects the first time that Angular
needs to resolve a dependency

When using dependency injection, the objects that are used to resolve dependencies are
created by service providers, known more commonly as providers.

They can also be defined by components and directives to provide services to their children, as described in the  Using Local Providers  section

It is easy to create unexpected behavior, especially when working with 'local providers'. If you encounter problems, check the scope of the local
providers you have created and make sure that your dependencies and providers are using the same tokens

**You should use the features in this chapter only if you cannot build your application using the basic features


Angular Providers (that instantiate the Service)

providers:  Class provider | Value provider | Factory Provider

1) Class provider: most common. This provider is configured using a class. Dependencies on the service are resolved by an 'instance of the class', which Angular creates

2) Value provider: This provider is configured using an object, which is used to resolve dependencies on the service.

3) Factory provider: This provider is configured using a function. Dependencies on the service are resolved using an object that is created by invoking the function


1)  Class provider****

providers: [DiscountService, SimpleDataSource, Model,
{ provide: LogService2, useClass: LogService1 }],
instantiate LogService1 class inorder to provide Dependency Injection for LogService2

----
export class DiscountService {
 private discountValue: number = 10;
   constructor(private logger: LogService) { }

Literal syntax
   providers: [DiscountService, SimpleDataSource, Model,
   { provide: LogService, useClass: LogService }],
----

Other way
providers: [DiscountService, SimpleDataSource, Model,
   { provide: "logger", useClass: LogService }],

  constructor(@Inject("logger") private logger: LogService) { }


provide: specify the token. simplest approach is to use a class as the token


Using Opaque Tokens(Unique tokens)
export const LOG_SERVICE = new OpaqueToken("logger");

can also extend classes and use as providers

provide: This property is used to specify the token. simplest approach is to use a class as the token
useClass: Instantiate this class to satisfy provide dependency above
multi: This property can be used to deliver an array of service objects to resolve dependencies


eg: BaseService, DerivedService.

providers: [DiscountService, SimpleDataSource, Model,
{ provide: LOG_SERVICE, useClass: LogService, multi: true },
{ provide: LOG_SERVICE, useClass: SpecialLogService, multi: true }],  <--SpecialLogService inherits from LogService


constructor( @Inject(LOG_SERVICE) loggers: LogService[]) {
   this.logger = loggers.find(l => l.minimumLevel == LogLevel.DEBUG);
}


2) VALUE Provider****
Used to inject common configuration/constant settings

The value provider is used when you need to take responsibility for 'creating the service objects yourself',
rather than leaving it to the class provider.


let logger = new LogService();
logger.minimumLevel = LogLevel.DEBUG;

providers: [DiscountService, SimpleDataSource, Model,
{ provide: LogService, useValue: logger }],


providers:  Class provider | Value provider | Factory Provider


3) FACTORY Provider****

The factory provider uses a function to create the object required to resolve a dependency


providers: [DiscountService, SimpleDataSource, Model,
 {
   provide: LogService,      For LogService DI, use this factory function for an instance of it
   useFactory: () => {
	let logger = new LogService();
	logger.minimumLevel = LogLevel.DEBUG;
	return logger;
    }
 }],


use deps to pass a parameter value to useFactory function


Can create local providers for Directives, components, Pipes (seperate object is created each time)

Local Provider for Directive

@Directive({
  selector: "table",
  providers: [LogService]
})


1) Local Provider for Component - 1 Child

2) Local Provider for Component - All Children


Local Provider for Components

1) providers: to create a provider used to resolve dependencies of view children and content children.
2) viewProviders: to create a provider used to resolve dependencies of view children only (view children(components/directives/pipes) in component's template)


1)**providers**
@NgModule({
imports: [BrowserModule],
declarations: [ProductComponent],
providers: [{ provide: VALUE_SERVICE, useValue: "Apples" }],  <-- providers (service can inject in view children and content children's components/directives/pipes)
bootstrap: [ProductComponent]
})
export class AppModule { }


2)**viewProviders**
@Component({
selector: "paProductForm",
templateUrl: "app/productForm.component.html",
viewProviders: [{ provide: VALUE_SERVICE, useValue: "Oranges" }] <--
})






pg 519 imp concept:
The @Component decorator s providers property is used to define providers that will be used to resolve
service dependencies for 'all children', regardless of whether they are defined in the component's template (view children)
or projected from the host element (content children).


<component>

    <contentchildrenDirective_Component />
</component>



component's template
<div>
   <viewchildren />
</div


pg 475
To make the service available throughout the application, it is
1) registered in the Root Module
2) its related module is imported(that has it listed as providers), which implicitly adds the related modules providers to the application root injector


Note: There is no module-wide scope for providers****** If you declare a provider in a module and then import it to root module, then the root module also gets it and is available throughout the application
      You can create specific/local providers for 1) Directives(pg 514)  and 2) Components(viewchildren& contentchildren OR just contentchildren) (pg 516)


Chp 21- Modules

Modules provide configuration information to Angular
Modules are classes to which the @NgModule decorator has been applied

Root Module: Used to describe the configuration of the application
Feature Module: Add structure to an application so that 'related features' can be grouped as a single unit


Providers defined by a feature module will be available as though they had been defined by the root module.
(As long as they've been imported to the root module like Core.module)



Note: There is no module-wide scope for providers, which means that the
providers defined by a feature module will be available as though they
had been defined by the root module. (assuming feature module is imported to the root module)


ANGULAR MODULES VERSUS JAVASCRIPT MODULES

imports: [FormsModule]  <-- Angular Module

import { FormsModule, ReactiveFormsModule } from "@angular/forms";  <-- @angular/forms Reference to Javascript Module. SystemJs module loader looks under node_modules
									to find a javascript file that contains Angular modules

Module Loader resolves import from "@angular/forms". Whereas FormsModule itself is an Angular Module


TODO...


pg 530

***For Root Module***
imports -> This property specifies the Angular modules that are required to support the
directives, components, and pipes in the application.

declarations -> This property is used to specify the directives, components, and pipes that are used in
the application.

providers  -> This property defines the service providers that will be used by the module s injector.
These are the providers that will be available throughout the application and used
when no local provider for a service is available, as described in Chapter 20.

bootstrap  -> This property specifies the root components for the application


***For Feature Modules*** pg 542

imports -> Specifies the modules that need to be imported to support the directives, components, and pipes in THIS feature module

declarations -> Specifies the directives, components, and pipes that are used in THIS feature module

providers  -> Specifies the service providers that will be used by THIS feature module s injector.

exportAs - > e.g. export some Directives, Components so you can use them in templates  (like ngFor->BrowserModule which has CommonModule)
The other components not exported are private to the module. pg 548

Angular's NgModule also has imports and exports and they serve a similar purpose.
You 'import' other NgModules so you can use their 'exported classes' in component templates. You export this NgModule's classes so they can
be imported and used by components of other modules.

importing a module, implicitly adds the module's classes to the declarations property



Chp 22- Example Project


Service: Model (calls static datasource) and has business logic,
         StaticDataSource (just makes the http calls)


Chp 23 Reactive Extensions

There are Limitations to the changes that Angular can detect

Some features require working directly with the Rxjs library that Angular uses to distribute updates throughout an application

The Reactive Extensions library provides an 'asynchronous event distribution mechanism' that is used extensively inside Angular for
'change detection and event propagation'.


RxJS allows for the parts of an application that are 'not addressed' by the 'standard Angular change detection process' to receive notifications of
important events and respond appropriately


An 'Observer' is created that collects the events and distributes them to 'subscribers' through an Observable

The simplest way to achieve this is to create a 'Subject', which provides both Observer and Observable functionality.


provides a simple and unambiguous system for sending and receiving notifications

----------------------
Rxjs scenario
2 components- table(list) and form(create/edit). both components visible- need to pass data between them with no change in url.
create-> form create mode
edit-> form edit mode

Vs

(can we do this with Parent Component(table) and Child Component(form)?). pass id in. callback to update??? or even the same
html like AngularJS 1 chp 8

**if url changes like edit in sportsStore, then no need for rxjs above**


****3 ways to exchange data between components****

good link: https://stackoverflow.com/questions/34700438/global-events-in-angular-2

if url changes (simple. then dont need Rxjs- pg 638)
   like sportsStore- Admin Edit- get id from route values.

if url stays the same
  both components on the page
  -RxJs Observables- Subject
  -Parent Component-Child Components (pass data from Parent to Child plus callback from Child to Parent)
  -Using a Service (components can subscribe to a shared service event. for instance to keep track of authentication status.. see dan wahlin 06_Dan_Wahlin_Angular_Jumpstart
    good link: https://stackoverflow.com/questions/34700438/global-events-in-angular-2)
  -Using a Service (with event- see 02_Angular2_Development_with_typescript_book)
--------------------------

the table component wants to receive an Observer<SharedState > object, while
the form component wants an Observable<SharedState > object

The Reactive Extensions library provides the 'Subject' class, which implements both the 'Observer and Observable functionality.

Why we use Subject: This makes it easy to create a service that allows events to be produced and consumed with a single object



constructor(@Inject(SHARED_STATE) private stateEvents: Observable<SharedState>) {

providers: [{ provide: SHARED_STATE, useValue: new Subject<SharedState>() }]

The value-based provider tells Angular to use a Subject<SharedState > 'object' to resolve dependencies
on the SHARED_STATE token (@Inject(SHARED_STATE) )



Subject limitation: dynamic components & directives: pg 578

Async pipe, which can be used to consume Observable objects directly in a view. Impure pure


Debugging Data(object) in the view:
Last Event: {{ stateEvents | async | json }}


Using the Async Pipe(use with observables to unpack-subscribe and unsubscribe) with Custom Pipes


Typescript Enumeration

export enum MODES {
  CREATE, EDIT
}
MODES[1] will return EDIT


observable function
filter: to filter  object received from the observable
map: to transform object received from the observable  (can be used to produce any object or numbers...)


pg 592
Clicking the Edit buttons in the table will still generate events, which will be displayed by the async
pipe, which is subscribed to the Subject without any filtering or skipping. But the form component doesn t
receive those events



Chp 24- Making Asynchronous HTTP Requests

Using the Angular HTTP feature requires the use of Reactive Extensions Observable objects

pg 600 using dynamic http url


HTTP verbs Reference pg 599 + 601

GET /products    This combination retrieves all the objects in the products collection.
GET /products/2  This combination retrieves the object whose id is 2 from the products
                 collection.
POST /products   This combination is used to add a new object to the products collection.
                 The request body contains a JSON representation of the new object.
PUT /products/2  This combination is used to replace the object in the products collection
                  whose id is 2. The request body contains a JSON representation of the
                 replacement object.
PATCH /products/2 This combination is used to update a subset of the properties of the object
                  in the products collection whose id is 2. The request body contains a
                  JSON representation of the properties to update and the new values.
DELETE /products/2 This combination is used to delete the product whose id is 2 from the
                  products collection.





getData(): Observable<Product[]> {
   return this.http.get(this.url).map(response => response.json());


   response.json()- convert json to javascript objects pg 601



Caution The methods in Table 24-4 prepare an HTTP request, but it isn t sent to the server until
the Observer object s ***subscribe*** method is invoked !!

Be careful, though, because the request will be
sent once per call to the subscribe method, which makes it easy to inadvertently send the same
request multiple times.


pg 609, 610, 611- CORS Request ( 2 ways)



Error Handling (2 ways)
  pg 615 + pg 649 provision for seeing error after navigating somewhere else

 1) error handling for each subscribe method in components etc
 2) override angular default error handling function (appress uses)



Chp 25- Routing and Navigation 1


Routing uses the browser s URL to manage the content displayed
to the user.

not recommended: You don t have to use the routing feature. You could achieve
similar results by creating a component whose view selects the
content to display to the user with the ngIf or ngSwitch directive,
although this approach becomes more difficult than using routing
as the size and complexity of an application increases.



Routing polyfill for old browsers: pg 623
"html5-history-api": "4.2.7"


conventionally defined in a file
called app.routing.ts, defined in the app folder.


The routes are packaged into a module using the RouterModule.forRoot method


Routes Properties Reference:  pg 628
redirectTo etc


router-outlet

const routes: Routes = [
{ path: "form/edit", component: FormComponent },
{ path: "form/create", component: FormComponent },
{ path: "", component: TableComponent }]

<button class="btn btn-warning btn-sm" (click)="editProduct(item.id)" routerLink="/form/edit">

http://localhost:3000/form/edit     FormComponent
http://localhost:3000/form/create   FormComponent


main page - routerLink="/"

To use routerLink,
imports: [BrowserModule, FormsModule, ModelModule, MessageModule, RouterModule],

import { RouterModule } from "@angular/router";


This is the essence of routing: the browser s URL changes, which causes the routing system to consult its
configuration to determine which component should be displayed to the user.

The routerLink directive sets the URL using a JavaScript API that tells the browser that this is a
change relative to the current document and not a change that requires an HTTP request to the server

ActivatedRouteSnapshot Properties pg 637

/form/edit

url[0] -> form
url[1] -> edit

this.editing = activeRoute.snapshot.url[1].path == "edit";


route parameter: mode

							  matches
{ path: "form/:mode/:id", component: FormComponent }, -> /form/edit/1   --> [routerLink]="['/form', 'edit', item.id]">
mode= edit, id= 1
{ path: "form/:mode", component: FormComponent },     -> /form/create       routerLink="/form/create"
mode= create

this.editing = activeRoute.snapshot.params["mode"] == "edit";
let id = activeRoute.snapshot.params["id"];


otice that I check to confirm that I have been able to retrieve a Product object from the data model
in Listing 25-18 and create a new object if that isn t the case. This is important because the data in the model
is obtained asynchronously and may not have arrived by the time that the form component is displayed if the
user requests the URL directly.In Chapter 27, I explain how you can stop routes being
activated until a specific condition is true, such as the arrival of the data.
(id != null) {
Object.assign(this.product, model.getProduct(id) || new Product());


optional route parameters
[routerLink]="['/form', 'edit', item.id,
{name: item.name, category: item.category, price: item.price}]">

http://localhost:3000/form/edit/2;name=Lifejacket;price=48.95

Optional route parameters are accessed in the same way as required parameters, and it is the
responsibility of the component to check to see whether they are present and to proceed anyway if they are
not part of the URL.


**url navigation in Code**
constructor(private model: Model, activeRoute: ActivatedRoute,
private router: Router) {
this.router.navigateByUrl("/");



Chapter 26- Routing & Navigation 2 -pg 655

Use routing system to control the components that are displayed to the user


Tip - You can omit the 'selector' attribute from the @Component decorator if a component is only going to be
displayed through the routing system. I tend to add it anyway so that I can apply the component using an HTML
element as well


Same Solution- count
With Rxjs - C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master\Angular 2.0\26 - Routing Part 2\exampleApp\app\core\productCount.component.ts
Without Rxjs: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master\Angular 2.0\26 - Routing Part 2\exampleApp\app\core\productCount.component-without-Rxjs.ts

Rxjs solution: Watch array via Rxjs. anytime it changes, update count
without Rxjs:  method to get array's count. view binding to array function. works!


to count unique categories:

this.count = this.model.getProducts()
.map(p => p.category)
.filter((category, index, array) => array.indexOf(category) == index)
.length;



{ path: "table/:category", component: TableComponent, children: childRoutes },

{ path: "", redirectTo: "/table", pathMatch: "full" },
  <--  matches localhost:3000/ URL pg 665
{ path: "**", component: NotFoundComponent }   <--- matches any url


pg 666- (((
Routing normally lets you navigate between components
You can also navigate within a component. 1 component always visible- Next and PRevious buttons (Navigating Within a Component)

Scenarioe:

Edit Form (1 component) with Previous and Next Buttons. Cliking Previous and Next Buttons result in the next product edit data while
re-using the component(does not get instantiated again)

The component s constructor has long been executed by the time that
Angular updates the values in the ActivatedRoute, which means that it misses the notification

These properties can be used by components that need to handle navigation changes that don t result
in a different component being displayed to the user

The result is that the component can react to route changes that don t cause Angular to create a new
component, meaning that clicking the Next or Previous button changes the product that has been selected
for editing.


{ path: "table", component: TableComponent, children: childRoutes },
    <--- no route param since no :
{ path: "table/:category", component: TableComponent, children: childRoutes },
  <-- route param goes into 'category' param

  _route.params.subscribe --> only subscribing for category change






issue with 1 component next & previous
constructor(private _route: ActivatedRoute,

	    private _router: Router,

	    private _productService: ProductService) {


        this.getProduct(_route.snapshot.params["id"]);   <--just a snapshot

  }



Vs

Resolution with Rxjs
     _route.params.subscribe(params => {
        <-- component re-used. subscription on route changes
		this.editing = params["mode"] == "edit";

		let id = params["id"];

		if (id != null) {

			  Object.assign(this.product, model.getProduct(id) || new Product());

       }
        })





_route.snapshot.params["id"]
_route.params.subscribe(
_route.pathFromRoot.forEach(     For parent and child route- use in child route


pathFromRoot
(This property returns an array of ActivatedRoute objects representing 'all the routes' used to match the current URL)

pg 668- only applicable paren/child- plus child already on form
Why route.snapshot cannot be used: route does not have the updated object by the time constructor has finished
why route.params.subscribe cannot be used: child component doesn't have parent route info

using route.pathFromRoot
The component s constructor has long been executed by the time that
Angular updates the values in the ActivatedRoute, which means that it misses the notification


selects products
http://localhost:3000/table/products
http://localhost:3000/table/Soccer/products

selects categories
http://localhost:3000/table/categories
http://localhost:3000/table/Soccer/categories




http://localhost:3000/table
http://localhost:3000/table/products
http://localhost:3000/table/categories


http://localhost:3000/table/Soccer
http://localhost:3000/table/Chess

http://localhost:3000/table/Soccer/products
http://localhost:3000/table/Soccer/categories


pg 679
When Angular matches routes, the information it provides to the components that are selected through
the ActivatedRoute object is segregated, so that each component 'only' receives details of the part of the
route that selected it.

child components only receive the ActivatedRoute object that only describes the child route (no parent info)
parent components only receive the ActivatedRoute object that only describes the parent route (no child info)

pg 681
The pathFromRoot property is especially useful because it allows a component to inspect all the
routes that have been used to match the URL


why used
_route.pathFromRoot.forEach( in child route

switching from /table/xxxx to /table/xxxx/products
switching from /table/soccer to /table/chess/products
-----in child component(productcount) won't provide parent info that category changed from soccer to chess.---

_route.pathFromRoot will match both parent and child route so we can get the catgeory change

for productCountComponent (child component)  \table\chess\products
_route.pathFromRoot will match paths:
"",
"\table\chess",   parent route match
"\products"       child route match

within productCountComponent


***alternate it to use a service to keep track of selected category***


const childRoutes: Routes = [


{ path: "products", component: ProductCountComponent },

{ path: "categories", component: CategoryCountComponent },

{ path: "", component: ProductCountComponent }
];



const routes: Routes = [

{ path: "table", component: TableComponent, children: childRoutes },
           matches ( /table/products, /table/categories)
{ path: "table/:category", component: TableComponent, children: childRoutes },
 matches ( /table/xxxx, /table/xxxx/products, /table/xxxx/categories)




routerLinkActive="active" -> bootstrap css

<button *ngFor="let category of categories" class="btn btn-secondary btn-block"
[routerLink]="['/table', category]" routerLinkActive="active">




<button class="btn btn-secondary btn-block"
routerLink="/table" routerLinkActive="active"  <-- active will be set for all routes starting with /table/Soccer, /table/Chess as well
[routerLinkActiveOptions]="{exact: true}">  <--make sure active state is only set when route is selected /table





Chapter 27- Routing and Navigation - 3

Use a route resolver:       To Delay navigation until a task is complete
Use an activation guard:    To Prevent route activation
Use a deactivation guard:   Prevent the user form navigating away from the current content
Create a dynamically loaded module: Defer loading a feature module until it is required
Use a loading guard:        Control when a dynamically loaded module is used

Guarding Routes(using guards) - Reasons
1) Some parts of the application may not always be ready
2) Some parts of the application are restricted until specific actions are performed


Route Guards Reference- pg 686

resolve: delay route activation until some task has been completed (e.g. loading data from server- make DAL call in advance)
canActivate: these are guards used to determine whether a route can be activated (has the user been authenticated)
canActivateChild: these are guards used to determine whether a child route can be activated
canDeactivate: guards to determine whether a route can be deactivated (abandoning data edits)
canLoad: to guard routes that load feature modules dynamically

Loading Data Message pg 691


Eg-
Resolve - getPRoducts() before activating a product table route(product table page uses getPRoducts() as the main DAL call)
CanActivate - Consent to Terms before going to Forms/Create
canActivateChild - Prompt a Question before going to child route
canDeactivate - Abandon Data Edits.Prompt User  <-----

["name", "category", "price"].some(
	prop => component.product[prop]
 != component.originalProduct[prop]))




Dynamically Loaded Modules/Loading Feature Modules Dynamically

Dynamically loaded modules must contain only functionality that 'not all' users will require. (e.g Admin Section)


***Caution*** - It is important not to create dependencies between other parts of the application and the classes
in the dynamically loaded module so that the JavaScript module loader doesn t try to load the module before it
is required.


When creating dynamically loaded modules, the RouterModule.forChild method must be used


path: "ondemand",
loadChildren: "app/ondemand/ondemand.module#OndemandModule"

ondemand.module -> ondemand.module.ts
OndemandModule -> class Name

Guard against dynamically loaded routes: pg 712 - canLoad


example  guard: The guard is required only when the URL that loads the module is first activated, so it defines a loaded
property that is set to true when the module has been loaded so that subsequent requests are immediately
approved.


Targeting Named Outlets

A template can contain more than one router-outlet element,
which allows a single URL to select multiple components to be displayed to the user.


multiple router-outlets pg 716
can accomplish the same using ng-ifs?



-------------------------------------------------------------Chp 6- Implementing Component Communications- Angular 2 With Typescript- pg 170--------------------

***Exchanging data between components***

Parent-Child Relationship Components
  Parents send data to child via @Input Properties
  Child send data to parent via @Output Properties

No Parent-Child Relationship Components
   Use Mediator Design Pattern ->   C<=> A <=> B see diagram pg 171. component A hosts Component C & B. A receives data from C and passes to B.

   Alternative to Mediator Design Pattern is to use an Injectable service as a Mediator. Service exposes an Event. 1 Component can emit that service event.
   another can subscribe to it pg 271


<order-processor [stockSymbol]="stock"
quantity="100"></order-processor>  input quantity passed as string since no binding like [quantity]=


Child Component can intercept input values by implmenting a setter and optional getter(if use that property in binding)

In chapter 3, we showed you how to pass parameters to a component using Activated-
Route. In this scenario, parameters are passed via constructor. Binding to @Input()
parameters is a solution for passing data from parent to child, and it works only for components
located within the same route

output properties send data via EventEmitter object.

EventEmitter
is a subclass of Subject (implemented in RxJS) that can serve as both observable and
observer. In other words, EventEmitter can dispatch custom events using its emit()
method as well as consume observables using its subscribe() method

When you design a component-based UI, each component should be self-contained(loosely coupled- no dependency on others), reusable

Injecting HTML content from Parent to Child using ***Projection*** via <ngContent> pg 182


pg 187 - Component lifecycle

constructor
ngOnChanges/doCheck (ngOnChanges- first time initializes input properties. after that only called on change. check via FirstChange?)
ngOnInit

ngAfterContentInit - after child's for use in projection
ngAfterViewInit() - Invoked when the binding on the component s template (and its children) is complete. pg 188


ngOnChanges (pg 189) mutable(same object- object property) vs immutable(different object- string assignment) objects

child component-> ngOnchanges called for string property change but not object property change since the object reference is the same
However the object property is updated in child binding pg 194

Change detection (used for performance optimization)
default -> checks all components (default)
onpush -> Zone checks this component and its children only if the bindings to the component s input properties have changed

pg 196 invoking a child api from parent component- somewhere else in this notepad




-------------------------------------------------------------- Chp 8- Interacting with servers using http - Angular 2 With Typescript- pg 170--------------------

Benefits of Observables over Promises
-There s no way to cancel a pending request made with a promise.
-When a promise resolves or rejects, the client receives either the data or an
error message, but in either case it ll just be a single piece of data. A promise
doesn t offer a way to handle a continuous stream of chunks of data delivered
over time.


Imp---
The HTTP GET request is sent to the server only when you invoke the
subscribe() method and not when you call the get() method.

http.get & subscribe is like Iqueryable

constructor(private http: Http) {
   this.theDataSource = this.http.get('/products').map(res => res.json());  <-- get is not issued!!!! like Iqueryable
}

ngOnInit(){
// Get the data from the server
this.theDataSource.subscribe( data => {   <---- get request made when subscribe method is called
  if (Array.isArray(data)){
    this.products=data;
  } else{
    this.products.push(data);
  }
},
err



-------------------------------------------------------------- Chp 5- Bindings, Observables and Pipes - Angular 2 With Typescript--------------------

Event binding
Attribute binding  -> update the text value of an HTML element s attribute
Property binding   -> update the value of the DOM element s property


**ES6 destructuring feature*******   pg 145




using es6**
<input [value]="greeting"  (input)="onInputEvent($event)">   **$event.target
onInputEvent({target}): void {    <------------------
console.log(`The input property value = ${inputElement.value}`);

regular way**
template:`<input (keyup)="onKey($event)">`
onKey(event:any) {
console.log("You have entered " + event.target.value);

event.target, which points at the element(input) that dispatched the event

without event
template:`<input #mySearchField (keyup)="onKey(mySearchField.value)">`


Using the curly braces in the argument of this function sends the following instruction
to this function:  You ll get an object that has a target property. Just give me the
value of this property.


AngularJs always used 2 way bindings  pg 145

        <-------------  1 way binding
<input [value]="myComponentProperty" >


Angular 2 Change detection:
1) pg 194 Angular 2 With Typescript
2) https://auth0.com/blog/understanding-angular-2-change-detection/


Change Detection happens pg 194
CD is initiated by any asynchronous event that happens in the browser (
1) the user clicked a button,
2) data is received from a server,
3) a script invoked the setTimeout() function, and so on).

pg 198
setTimeout reason: use setTimeout() for the code updating the UI so it runs in the next event loop.

********use setTimeout() -> to manually triggers Change Detection -> update value ************

sometimes it can be too late to update the view(in the event cycle).you'll have to manually trigger change detection using settimeout()

setTimeout() usecase

e.g. changing UI after ngAfterViewInit() pg 198
 angular will throw an exception. have to use settimeout to manually triggers Change Detection to update value

Javascript Array methods: map, filter, reduce

some of the 'Angular UI components' can generate observable streams like FormControl.valueChanges (which produces an
observable stream you can subscribe to)


pipes such as date, number, and currency don t work in all browsers. There are two workarounds for this issue    (pg 163)


client-side filtering using textbox and observables(no server calls) pg 167

-Binding to a component s properties propagates the data in one direction:
from DOM to UI.
-Binding to events propagates actions from the UI to the component

Using observable data streams simplifies asynchronous programming. You can
subscribe to and unsubscribe from a stream as well as cancel pending requests
for data






-------------------------------------------------------------Angular Unit Testing--------------------

Reference: https://www.sitepoint.com/ultimate-angular-cli-reference/ (section- Running Your Unit Tests) - Use angular-cli not systemjs
local folder: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test\angularProj
local folder SportsStore: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\01_SportsStore_aManuallyUpgraded_Angl4_CLI1\SportsStore\src\tests
online documentation code: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\aio\content\examples\testing\src\app

***Have tests in a seperate folder for simplicity like apress book***

Chp 29 Apress: Uses systemjs &  recommends xx.spec.ts in a seperate dedicated folder eg tests
Online Documentation: Uses systemjs &  recommends xx.spec.ts in the same folder as the file being tested
Prefer: Using angular-cli & xx.spec.ts in a seperate dedicated folder eg tests for simplicity <---
        e.g. C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test\angularProj


You can Debug specs in the browser in the same way that you debug an application.

To run all unit tests, run: ng test

Create, run and test a new project using angular-cli
https://github.com/angular/angular-cli/wiki (cli-main)
https://github.com/angular/angular-cli/wiki/new (create)
https://github.com/angular/angular-cli/wiki/serve (run)

package.json
"scripts": {

"ng": "ng",

"start": "ng serve",

"build": "ng build",

"test": "ng test",
   <-- to run unit tests for all files under src folder that end with xxx.spec.ts. put in tests folder same level as app...
"lint": "ng lint",

"e2e": "ng e2e"
  },  <--e2e tests ignore. e2e folder next to src


Unit Testing via Project created using:
Angular CLI(angular-cli.json): Prefer since using Angular CLI for deployment purposes.https://github.com/angular/angular-cli/wiki
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test\angularProj

Regular Setup (using SystemJs.config.js): Sample code in Apress Chp 29 Or online documentation at https://angular.io/guide/testing


ignore e2e folder next to src- use Protractor to test

Apress:  recommends xx.spec.ts in a seperate dedicated folder eg tests
local project: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master\Angular 2.0\29 - Unit Testing\exampleApp

online doc:  recommends xx.spec.ts in the same folder as the files being tested
online: https://angular.io/guide/testing
local project: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\quickstart-master




Apress- Pro Angular
Chp 29 - Angular Unit Testing (Plus Angular CLI- e2e) 755-785

The building blocks of an Angular application can t be tested in isolation because they depend on the
underlying features provided by Angular and by the other parts of the project, including the services,
directives, templates, and modules it contains.


write unit tests for features and functions that you know will be hard to write and that are likely to be the source of bugs in deployment (pg 756)


Unit Testing: components, directives, pipes, services

Pipes and services, can be readily tested in isolation
Components (and, to a lesser extent, directives) require special features


Unit Testing Component or Directive should capture the interactions with host elements, services, templates


Angular provides a test bed that allows a 'realistic application environment' to be created and then used to perform unit tests.


Perform a test that relies on an asynchronous operation: Use the whenStable method to defer the test until the
effect of the operation has been processed



Create a test component whose template applies the component/directive under test.


'Jasmin' is a popular unit testing framework that allows test to be defined and evaluated. It ships with an HTML test runner that executes tests in the browser

'Karma' is a test runner, which means it monitors the files in a project and runs the tests that have been
defined using Jasmine when it detects a change

'Protractor' Ignore - unless needed. Use protractor to write and run end-to-end (e2e) tests. End-to-end tests explore the application as users experience it. In e2e testing, one process runs the real application and a second process runs protractor tests that simulate user behavior and assert that the application respond in the browser as expected.





Tip - I like to keep my unit tests separate from the rest of the application in a folder called tests. Some
developers prefer to mix tests and code side by side, and either approach can be used in Angular unit testing


karma-test-shim.js, which is responsible for setting up the test environment required by Angular


tests: xxx.spec.js

Jasmine Documentation: http://jasmine.github.io


TestBed, which is responsible for simulating the Angular application environment so that tests can be performed.


pg 768- mock services are used for real services in unit tests.

fake repository is used to provide the component with its service

Test component 1)methods as well as 2) html bindings



Angular 2 with Typescript (skim?) - so so- skip
Chp 9 - Unit-Testing (278-310)



Online Docs:
https://angular.io/guide/testing
local fodler: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\quickstart-master


angular online testing documentation -> based on regular project setup- (not based on angular cli)
(no protractor https://angular.github.io/protractor- not in other books as well)



Isolated unit tests -> examine an 'instance of a class' all by itself without any dependence on 'Angular' or 'any injected values'


pipes and services -> Use Isolated unit tests
Components & Directives -> Do not use Isolated unit tests. Can't reveal how a component class interacts with its 'own template' or with 'other components'
			Such tests require the Angular testing utilities such as TestBed and several helper functions from @angular/core/testing



Tests written in Jasmine are called specs . The filename extension must be .spec.ts, the convention adhered to by karma.conf.js and other tooling

e2e folder - Ignore e2e tests.. Normally use Protractor. Special 'e2e' folder next to 'src'


Apress:  recommends xx.spec.ts in a seperate folder
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Test\pro-angular-2ed-master\Angular 2.0\29 - Unit Testing\exampleApp

online doc:  recommends xx.spec.ts in the same folder as the files being tested
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\quickstart-master
https://angular.io/guide/testing#why-put-specs-next-to-the-things-they-test


karma.conf.js

karma-test-shim.js

systemjs.config.js

systemjs.config.extras.js


The Angular CLI is a tool to initialize, develop, scaffold and maintain Angular applications
https://github.com/angular/angular-cli/wiki


C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test


--------------------------------------------------------------------------------


Angular 2 with typescript book (reference) -[Extract any good pointers]


Typically, one module is one file.

Because most web browsers support only ECMAScript 5 (ES5) syntax, you ll need
to transpile (convert from one language to another) the code written in
TypeScript or ES6 to ES5 for deployment

SystemJS is a 'universal module loader' that loads modules created in ES6, AMD, and CommonJS standards.

Zone.js is a library that powers the changedetection mechanism

System.import('main.ts'); -> Instructs SystemJS to load the main module from the main.ts file


An Angular module is a container for a group of related components, services, directives,
and so on -> such as a shipping module or a billing module.


Components-> has a view/template and a class(for logic/data)- Usercontrols
<customcomponent></customComponent>

Directives-> allows you to attach custom behavior to an HTML element (for example, you can add an autocomplete feature to an <input> element).
<input type="text" log-directive/>
<h1 highlight>Hello World</h1>

---Each component is basically a directive with an associated view, but unlike a component, a
directive doesn t have its own view.---


Use square brackets to bind an [HTML element s property] to a value:
<span [hidden]="isValid">The field is required</span>

To bind an event handler for an element s event, use parentheses:
<button (click)="placeBid()">Place Bid</button>

If you want to reference a DOM object s property within the template, add a local template
variable (its name must start with #) that will automatically store a reference to
the corresponding DOM object, and use dot notation:

<input #title type="text" />
<span>{{ title.value }}</span>


***Angular 2 CLI team moved from SystemJS  to Webpack for module loading**** angular-cli.json
we use module loading so you don't have to write <script> tags in html page. Module loaders take care of it. pg 36
Module loaders vs. <script> tags pg 37

pg 67(ng2 with typescript)- Appress book uses history api.No # in url. Plus you can navigate using browser's previous and next button!!!!!


Parent components will usually pass data to their children, but Angular also offers a
mechanism to pass arbitrary data to components at the time of route configuration
{path: 'product/:id', component: ProductDetailComponentParam , data:
[{isProd: true}]}
this.isProdEnvironment = route.snapshot.data[0]['isProd'];   pg 80 - whether it s a production or QA environment


ViewEncapsulation - Component CSS- good explanation- pg 85- angular-cli implements it out of the box

window scroll
https://plainjs.com/javascript/styles/get-and-set-scroll-position-of-an-element-26/

Using [multiple router-outlet] parent/child usecases example: pg 92
apresss book pg 716/717

Suppose a Gmail web client displays the list of emails in your inbox, and you
decide to compose a new email. The new view will be displayed on the right side
of the window, and you ll be able to switch between the inbox and the draft of
the new email without closing either view.

Imagine a dashboard-like SPA that has several dedicated areas (outlets), and
each area can render more than one component (but one at a time). Outlet A
can display your stock portfolio either as a table or as a chart, while outlet B
shows either the latest news or an advertisement.

pg 94 navigating within multiple router outlets


how to implement lazy loading of components for rarely used routes.


providers: [DiscountService, SimpleDataSource, Model,
{ provide: "logger", useClass: LogService }], <-- use @Inject only when specify providers like this

constructor(@Inject("logger") private logger: LogService) { }

The @Inject decorator is applied to the constructor argument and is used to specify the provider
token that should be used to resolve the dependency.


observables- pg 153- good intro

'Transclusion' is AngularJs is called 'Projection' in Angular. pg 182

In some cases, you ll want to be able to dynamically change the content of a component s
template at runtime. In AngularJS, this was known as transclusion, but the new
term for it is projection.

In Angular, you can project a fragment of the parent component s template onto its child by using the ngContent directive


Component lifecycle - pg 187


pg 189- When to use DAL call(e.g. getProducts() in the constructor Vs when to use it in ngOnInit() -


In the online auction application, you inject ProductService in the constructor of
HomeComponent and invoke the getProducts() method right there. If the getProducts()
method needed to use values of the component s properties (@input properties), you d move the
invocation of this method to ngOnInit()to ensure that all properties were initialized
by the time you called getProducts(). The other reason to move code from the constructor
to ngOnInit() is to keep the constructor s code light without starting any
long-running synchronous functions from there.


Imp**** pg 189 <--------------
when ngOnChanges will not be triggered in child (if an input property object's property is changed. the reference to the object is still the same). Parent/Child controllers
user: {name: string} = {name: 'John'};

however in child component- user.name binding will still be updated on the ui....

NOTE Although Angular doesn t update bindings to input properties if the
object reference hasn t changed, the change-detection mechanism still
catches property updates on each object property. This is why John Smith, the
new value of the User Name in the child component, has been rendered


************Calling child component APi from parent ----pg 196  -- gooood example  - ngAfterViewInit... Vs child component raising event to call parent component method
pg 198- provision child api method call exception causes... settimeout

--parentComponent
<child #child1></child>
<child #child2></child>


--parentComponent
@ViewChild('child1')
firstChild: ChildComponent;
...

--parentComponent
this.firstChild.greet('Child 1');  <--call 1st child component greet method


<button (click)="child2.greet('Child 2')">Invoke greet() on child 2</button> <-- call 2nd child component greet method


pg 253- using Async Pipe in template with Observables
Angular includes AsyncPipe (or async if used in templates), which can receive a
Promise or Observable as input and subscribe to it automatically


Server Side push to all browser clients via WebSockets (vs Signal R that uses Websockets underneath)
pg 273 - server-side push via WebSockets

The WebSocket protocol is more efficient and concise than HTTP. It s bidirectional,
and both client and server can initiate communication

browsers subscribe to a server broadcast events-- all browser receive updates as they are transmitted


Starting a new project with Angular CLI - pg 335

Always generate source maps, because they allow you to debug the source code
in TypeScript<---------------------------------------------------




---------------------Angular Online Documentation---------------------------------------------

angular app folder hierarchy Reference*****: https://angular.io/guide/quickstart


The 'Angular CLI' is a command line interface tool that can create a project, add files, and perform a variety of ongoing development tasks
such as testing, bundling, and deployment.

Don't have to add <script tags in index.html. Angular CLI does it automatically.
index.html ->  The CLI automatically adds all js and css files when building your app so you never need to add any &lt;script&gt; or &lt;link&gt; tags here manually.

open up user settings:
View >command palette> user settings


Difference between ng serve and ng build as far as build is concerned:

ng serve: builds and bundles your Angular application automatically to a 'virtual filesystem' during development
ng build: builds and bundles your Angular application automatically to 'outDir directory' specified in your Angular CLI configuration.
By default, this is the dist directory


https://www.sitepoint.com/ultimate-angular-cli-reference/
if (environment.production) {
  enableProdMode();
}


ng serve deletes dist directory since it serves the actual code base and not the build
https://github.com/angular/angular-cli/issues/4366

See the Readme file

## Development server

Run `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.
(run out of memory. not from dist folder that is generated via ng build)
## Build

Run `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.

ng build is just to produce dist folder to help in deployment

styles.css under src folder are for global styles


when you do ng build, angular cli loads its configuration from angular-cli.json.....
"tsconfig": "tsconfig.app.json" implies to use this file for typescript compiler


Angular cli configuration schema Reference: https://github.com/angular/angular-cli/wiki/angular-cli


Other folders next to src folder help you build, test, maintain, document, and deploy the app

src folder: source code

next to src folder:
dist folder: deploy app
Readme: Document app
protractor.conf.js: e2e tests
src\tests: unit tests


hero service - provides the data and share that service with all components that need the data


Use ngOnInit to call server to get data. Dont make the server call in constructor. https://angular.io/tutorial/toh-pt4#the-ngoninit-lifecycle-hook


Tour of Heroes converts Observable to Promise to getHeroes from server:
The HeroService converts that Observable into a Promise and returns the promise to the caller. This section
shows you how, when, and why to return the Observable directly.


TIP- use promises. only use observables if you have a need!!!!?
when to use Observables vs Promises: https://angular.io/tutorial/toh-pt6#observables

Promise: If you make a webapi call such as http.get() to 'fetch a single chunk of data'. When you receive the data, you're done (i.e.
no more http calls need to be made as part of the UI operation) then you should use a promise. Tour of Heroes uses that. No need for
request-cancel-new-request sequence to use Observables.

Observable: If You want to start one request, cancel it, and make a different request before the server has responded to the first request,
then use an Observable. A request-cancel-new-request sequence is difficult to implement with Promises, but easy with Observables.
e.g. scenario. typing on a search textbox to call webapi several times (angular 2 with typescript). Sample in Tour of Heroes as well.


import { BrowserModule } from '@angular/platform-browser'; <-- Javascript Module System

imports:      [ BrowserModule ], <--Angular Module System


https://angular.io/guide/architecture#directives

Structural directives alter layout by adding, removing, and replacing elements in DOM

Attribute directives alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name
The ngModel directive, which implements two-way data binding, is an example of an attribute directive
ngStyle, ngClass, ngSwitch


A component is a directive-with-a-template

Custom directives. Writing your own directives

Service: any value, function, or feature that your application needs

Examples include:
logging service
data service
message bus
tax calculator
application configuration


Components are big consumers of services.

Services:  fetch data from the server, validate user input, or log directly to the console
Component: job is to enable the user experience and nothing more


Dependency Injection- DI https://angular.io/guide/architecture#dependency-injection
When Angular creates a component, it first asks an injector for the services that the component requires.

An 'injector' maintains a 'container of service instances' that it has previously created. If a requested service instance is not in the container,
the injector makes one and adds it to the container before returning the service to Angular


In general, add providers to the root module so that the 'same instance' of a service is available everywhere.

Registering Providers at a component level means you get a 'new instance of the service' with each new instance of that component

<div *ngFor="let hero of heroes">{{hero.name}}</div>   <-- hero is a template input variable (hero is the template input variable, not the component's hero property. Template context names take precedence over component context names. https://angular.io/guide/template-syntax#statement-context
<input #heroInput> {{heroInput.value}}		       <-- heroInput is a template reference variable


template expressions {{}} cannot refer to anything in the global namespace. They can't refer to window or document.
They can't call console.log or Math.max. They are restricted to referencing members of the expression context


{{}} - A template expression should not change any application state. cannot do {{i = i + 1}}


When change detection takes place:
Change detection cycles are triggered by many asynchronous activities such as promise resolutions, http results, timer events, keypresses and mouse moves


Data direction

1 way. From Component to View

View <=> Component
[target]="expression"


1 way. From View to Component
(target)="statement"

Two-way
[(target)]="expression"


<button [disabled]="isUnchanged">Save</button> angular binding works with DOM properties and events. Not Html attributes

Difference between HTML attribute vs. DOM property
https://angular.io/guide/template-syntax#html-attribute-vs-dom-property


<input type="text" value="Bob">
The HTML attribute 'value' specifies the initial value; the DOM 'value' property is the current value.

<hero-detail hero="currentHero"></hero-detail>  passes string "currentHero" not the currentHero object
<hero-detail [hero]="currentHero"></hero-detail>  passes currentHero object

You should omit the brackets when 'all' of the following are true:
The target property accepts a string value.
The string is a fixed value that you can bake into the template.
This initial value never changes.

You often have a choice between 'interpolation' and 'property binding'. The following binding pairs do the same thing:
Interpolation is a convenient alternative to property binding in many cases.  favor interpolation
When setting an element property to a non-string data value, you must use property binding []

<p><img src="{{heroImageUrl}}"> is the <i>interpolated</i> image.</p>
<p><img [src]="heroImageUrl"> is the <i>property bound</i> image.</p>

<p><span>"{{title}}" is the <i>interpolated</i> title.</span></p>
<p>"<span [innerHTML]="title"></span>" is the <i>property bound</i> title.</p>


Angular data binding is on alert for dangerous HTML. It sanitizes the values before displaying them https://angular.io/guide/template-syntax#property-binding-or-interpolation


<tr><td colspan="{{1 + 1}}">Three-Four</td></tr>   error . Can't bind to 'colspan' since it isn't a known native property

<tr><td [attr.colspan]="1 + 1">One-Two</td></tr>    ok

As the message says, the <td> element does not have a colspan 'property'. It has the "colspan" attribute, but interpolation and property
binding can set only properties, not attributes.

You need attribute bindings to create and bind to such attributes.


<div class="bad curly special"  [class]="badCurly">Bad curly</div>  -- [class] overrides all class properties


Ngclass and Ngstyle are preferred to [class] or [style]


The binding conveys information about the event, including data values, through an event object named $event.
 If the target event is a native DOM element event, then $event is a DOM event object, with properties such as target and target.value

below target is 'input' DOM element event

<input [value]="currentHero.name"
       (input)="currentHero.name=$event.target.value" >


When the user makes changes, the 'input event' is raised, and the binding executes the statement within a context that includes the DOM event object, $event



child component
deleteRequest = new EventEmitter<Hero>();

delete() {
  this.deleteRequest.emit(this.hero);
}



hosting parent component
<hero-detail (deleteRequest)="deleteHero($event)" [hero]="currentHero"></hero-detail>   --> $event has this.hero



Angular offers a special two-way data binding syntax for this purpose, [(x)]. The [(x)] syntax combines the brackets of property binding, [x], with the parentheses of event binding, (x)


https://angular.io/guide/template-syntax#two-way-binding---
The [(x)] syntax is easy to demonstrate when the element has a 'settable property' called x and a corresponding 'event' named xChange.

Here's a SizerComponent that fits the pattern. It has a size value property and a companion sizeChange event


<my-sizer [(size)]="fontSizePx"></my-sizer> Angular desugars the SizerComponent binding into this
<my-sizer [size]="fontSizePx" (sizeChange)="fontSizePx=$event"></my-sizer>  <-- $event has this.size


Built-in attribute directives
Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually applied to elements as if they were HTML attributes, hence the name


Attribute Directives Examples
NgClass - add and remove a 'set' of CSS classes
NgStyle - add and remove a 'set' of HTML styles
NgModel - two-way data binding to an HTML form element back to top


 [class.special]="isSpecial"   add or remove a single class


NgClass directive add or remove many CSS classes at the same time

binding ngClass to a key:value control object


<div [ngClass]="currentClasses">test</div>

--keyvalue
this.currentClasses =  {
    saveable: this.canSave,
    modified: !this.isUnchanged,
    special:  this.isSpecial
  };




ngstyle- To set many inline styles at the same time

<div [ngStyle]="currentStyles">
  This div is initially italic, normal weight, and extra large (24px).
</div>

this.currentStyles = {
    'font-style':  this.canSave      ? 'italic' : 'normal',
    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',
    'font-size':   this.isSpecial    ? '24px'   : '12px'
  };


OR


ngStyle can also do it inline
ngStyle does not remove testclass but it'll override it if needed.

<div class="testclass" [ngStyle]="{'color': color, 'font-size': size + 'px', 'font-weight': 'bold'}">
  Angular 2 Ng Style Example
</div>
constructor() {

   this.name = 'Angular 2 Ng Style';

   this.color = 'red';

   this.size=20;

}


<input
  [ngModel]="currentHero.name"
  (ngModelChange)="currentHero.name=$event">

The ngModel data property sets the element's value property and the ngModelChange event property listens for changes to the element's value.


<input [(ngModel)]="currentHero.name">

You can't apply [(ngModel)] to a non-form native element or a third-party custom component until you write a suitable value accessor, a technique that is beyond the scope of this guide.


If you need to do something more or something different, you can write the expanded form.
<input
  [ngModel]="currentHero.name"
  (ngModelChange)="setUppercaseName($event)">


structural directives Examples
They shape or reshape the DOM's structure, typically by adding, removing, and manipulating the host elements to which they are attached.
NgIf - conditionally add or remove an element from the DOM
NgFor - repeat a template for each item in a list
NgSwitch - a set of directives that switch among alternative views


NgIf Vs hidden
When you hide an element, that element and all of its descendents remain in the DOM. All components for those elements stay in memory and
Angular 'may continue to check for changes'. You could be holding onto considerable computing resources and degrading performance, for
 something the user can't see.

 directive could hide the unwanted paragraph instead by setting its display style to none.
<p [style.display]="'block'">
  Expression sets display to "block".
  This paragraph is visible.
</p>
<p [style.display]="'none'">
  Expression sets display to "none".
  This paragraph is hidden but still in the DOM.
</p>

When NgIf is false, Angular removes the element and its descendents from the DOM. It destroys their components, potentially freeing up substantial resources, resulting in a more responsive user experience.


The <ng-template> is an Angular element for rendering HTML. It is never displayed directly. In fact, before rendering the view, Angular replaces the <ng-template> and its contents with a comment.

If there is no structural directive and you merely wrap some elements in a <ng-template>, those elements disappear. That's the fate of the middle "Hip!" in the phrase "Hip! Hip! Hooray!".


Guard against null https://angular.io/guide/template-syntax#guard-against-null
The ngIf directive is often used to guard against null


<hero-detail *ngFor="let hero of heroes" [hero]="hero"></hero-detail>
Take each hero in the heroes array, store it in the local hero looping variable, and make it available to the templated HTML for each iteration.


 zero-based index - https://angular.io/guide/template-syntax#ngfor-with-index
<div *ngFor="let hero of heroes; let i=index">{{i + 1}} - {{hero.name}}</div>



*ngFor with trackBy (optimizing ngFor performance for additions/deletions)
https://angular.io/guide/template-syntax#ngfor-with-trackby
without trackBy all DOm objects are destroyed and recreated

Imp!!!
if array reference will stay the same in the component. don't need trackBy. even with delete and add

only if we replace the array reference via e.g. requerying the server
For example, re-querying the server could reset the list with all new hero objects.

example dont really need trackBy below:
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\04_Official_Tutorial_Tour_of_Heroes\WebApplication1\src\app\heroes.component.ts


<div *ngFor="let hero of heroes; trackBy: trackByHeroes">
  ({{hero.id}}) {{hero.name}}
</div>

trackByHeroes(index: number, hero: Hero): number { return hero.id; }  //index is $index,

trackByHeroes example
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\04_Official_Tutorial_Tour_of_Heroes\WebApplication1\src\app\heroes.component.ts (and html)

test- developer tools. elements check


NgSwitch

[ngSwitch] -> NgSwitch is an attribute directive. It changes the behavior of its companion directives. It doesn't touch the DOM directly
NgSwitchCase and NgSwitchDefault directives are structural directives because they add or remove elements from the DOM

<div [ngSwitch]="currentHero.emotion">
  <happy-hero    *ngSwitchCase="'happy'"    [hero]="currentHero"></happy-hero>
  <sad-hero      *ngSwitchCase="'sad'"      [hero]="currentHero"></sad-hero>
  <confused-hero *ngSwitchCase="'confused'" [hero]="currentHero"></confused-hero>
  <unknown-hero  *ngSwitchDefault           [hero]="currentHero"></unknown-hero>
</div>


Template reference variables ( #var )
<input #phone placeholder="phone number">
<button (click)="callPhone(phone.value)">Call</button>

You can refer to a template reference variable anywhere in the template

A template reference variable (#phone) is not the same as a
template input variable (let phone) such as you might see in an *ngFor

The scope of a 'template reference variable' is the entire template. Do not define the same variable name more than once in the same template.


Note the important distinction between a data binding target and a data binding source.

The target of a binding is to the left of the =. The source is on the right of the =.

The target of a binding is the property or event inside the binding punctuation: [], () or [()].
The source is either inside quotes (" ") or within an interpolation ({{}}).


Declaring input and output properties
@Input()  hero: Hero;
@Output() deleteRequest = new EventEmitter<Hero>();

Or

@Component({
  inputs: ['hero'],
  outputs: ['deleteRequest'],
})




<hero-detail  [hero] = "currentHero" (deleteRequest)="deleteHero($event)">

data flows into [hero] property from "currentHero"

    <------data flow (from template to component)
[hero] = "currentHero"

   ------->data flow (from component to template)-  events stream out of that property and toward the handler in a template binding statement
(deleteRequest)="deleteHero($event)"



The json pipe is particularly helpful for debugging bindings:
<div>{{currentHero | json}}</div>


https://angular.io/guide/template-syntax#the-safe-navigation-operator----and-null-property-paths

or you can use *ngIf
The current hero's name is {{currentHero.name}} if currentHero is null will throw an error
The current hero's name is {{currentHero?.name}}


strict null checking with the --strictNullChecks flag
https://angular.io/guide/template-syntax#the-non-null-assertion-operator---

TypeScript then ensures that no variable is unintentionally null or undefined.


<div *ngIf="hero">
  The hero's name is {{hero!.name}}  <-- informing that hero can never be null
</div>

non-null assertion operator: !
tells the TypeScript type checker to suspend strict null checks for a specific property expression.



Lifecycle Hooks************ https://angular.io/guide/lifecycle-hooks#lifecycle-hooks

A directive has the same set of lifecycle hooks, minus the hooks that are specific to component content and views.


Directive and component instances have a lifecycle. Can implement one or more of the lifecycle hook interfaces

eg

export class PeekABoo implements OnInit {

  //implement OnInit's `ngOnInit` method
  ngOnInit() { this.logIt(`OnInit`); }

}


Components AND Directives Lifecycle Hooks
ngOnChanges()  (first call)
ngOnInit()     (input properties are now set. Can use them now. Initialize component/directive)
ngOnChanges()  (whenever input properties change)
ngDoCheck()    Detect and act upon changes that Angular can't or won't detect on its own
ngOnDestroy()  Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.

Only Components specific lifecycle hook
ngAfterViewInit()     --> Respond after Angular initializes the component's views and child views.
ngAfterContentInit()  --> Respond after Angular projects external content into the component's view. Called once after the first ngDoCheck().


[misc]
ngAfterContentChecked()
ngAfterViewChecked()

e.g. of all lifecycle events: https://embed.plnkr.co/?show=preview   <-----
Good Reference  for ngAfterViewInit() & ngAfterContentInit()

template
<div>-- child view begins --</div>

   <my-child-view></my-child-view>

<div>-- child view ends --</div>`

export class AfterViewComponent implements  AfterViewChecked

 @ViewChild(ChildViewComponent) viewChild: ChildViewComponent;

ngAfterViewInit() {
    // viewChild is set after the view has been initialized

  this.logIt('AfterViewInit');

  this.doSomething();
  }


private doSomething() {

let c = this.viewChild.hero.length > 10 ? `That's a long name` : '';
  (this.viewChild has been set can use it now)


https://angular.io/guide/lifecycle-hooks#oninit
Don't fetch data in a component constructor. Use ngonit
Constructors should do no more than set the initial local variables to simple values.

Remember also that a directive's data-bound input properties are not set until after construction. That's a problem if you need to initialize the directive based on those properties.

ngOnChanges() before ngOnInit() and many times after that. It only calls ngOnInit() once.

OnDestroy()
This is the place to free resources that won't be garbage collected automatically. Unsubscribe from Observables and DOM events.
Stop interval timers.  <----- https://angular.io/guide/component-interaction#parent-interacts-with-child-via-local-variable
Unregister all callbacks that this directive registered with global or application services.
You risk memory leaks if you neglect to do so.


<on-changes [hero]="hero" [power]="power"></on-changes>
ngOnChanges does not catch changes to hero.name
Angular only calls the hook when the value of the input property changes. The value of the hero property is the reference to the hero object

Use the DoCheck hook to detect and act upon changes that Angular doesn't catch on its own.


https://angular.io/guide/lifecycle-hooks#abide-by-the-unidirectional-data-flow-rule
ngAfterViewInit()
need to specify a delay to update the view after this point since the view has already been rendered

dont have to do the above with AfterContent https://angular.io/guide/lifecycle-hooks#no-unidirectional-flow-worries-with-aftercontent

The ngAfterViewInit() hooks concern ViewChildren, the child components whose element tags appear within the component's template.

The ngAfterContentInit() hooks concern ContentChildren, the child components that Angular projected into the component.


https://angular.io/guide/component-interaction
Intercept input property changes with a setter  (setter and getter on input property)

e.g only setter on input property (no getter): https://angular.io/guide/structural-directives#the-myunless-property


https://angular.io/guide/component-interaction#parent-interacts-with-child-via-local-variable
Parent interacts with child via local variable

From Parent Component's ***Template/View*** Invoke Child Component Properties & Methods
creating a template reference variable for the child element to read child properties or invoke child methods
https://angular.io/guide/component-interaction#parent-interacts-with-child-via-local-variable


From Parent Component's ***Instance *** Invoke Child Component Properties & Methods via @ViewChild
https://angular.io/guide/component-interaction#parent-calls-an-viewchild
need to use SetTimeout() https://angular.io/guide/component-interaction#parent-calls-an-viewchild


****Parent-Child Component Interaction**** https://angular.io/guide/component-interaction
1)Via output property  (raise event)   (from child to Parent)
2)Via Local Template Variable (in Parent Template)  (invoke property or methods) (from parent to child)
3)Via @ViewChild (in Parent Component)		    (invoke property or methods) (from parent to child)

4)Via Service  (using Observables)--> (2 way flow- from parent to child and from child to parent using observables)
 https://angular.io/guide/component-interaction#parent-and-children-communicate-via-a-service


Unsubscribing from an observable goood example..

Don't have to unsubscribe in missioncontrol.component.ts (parent component) since it controls the lifetime of the MissionService. Providers property listed
providers: [MissionService]

astronaut.component.ts (child component) need to unsubcribe from the observables


Announce Mission using a Service (from Parent)  has handler for confirm mission from Child
confirm Mission  using a Service (from Child)   has handler for announce mission from Parent



Component specific Styles
https://angular.io/guide/component-styles

For every Angular component you write, you may define not only an HTML template, but also the CSS styles that go with that
template, specifying any selectors, rules, and 'media queries' that you need


https://angular.io/guide/component-styles#using-component-styles

-Class names and selectors are local to the component and don't collide with classes and selectors used elsewhere in the application.
-Changes to styles elsewhere in the application don't affect the component's styles.


The URL is relative to the application root, which is usually the location of the index.html web page that hosts the application. The style file URL is not relative to the component file


Loading Component Styles
1) Styles in metadata      styles: ['h1 { font-weight: normal; }']
2) Style URLs in metadata  styleUrls: ['app/hero-details.component.css']    relative URL- same folder  styleUrls:  ['./quest-summary.component.css']
3) Template inline styles
4) Template link tags
5) CSS @imports         in css file



Dynamic Component Loader: To add components dynamically
https://angular.io/guide/dynamic-component-loader

UseCase:
The hero agency is planning an ad campaign with several different ads cycling through the banner.
New ad components are added frequently by several different teams. This makes it impractical to use a template with
a static component structure.


Attribute Directives----


There are three kinds of directives in Angular:

Components directives with a template.
Structural directives change the DOM layout by adding and removing DOM elements.
Attribute directives change the appearance or behavior of an element, component, or another directive.


https://angular.io/guide/attribute-directives#appendix-why-add-input
Component can bind to any properties or methods .dont need @input
Need @input to bind to other components/directives data
When @input is needed


<p [myHighlight]="color">Highlight me!</p>

@Directive({
  selector: '[myHighlight]'
})

@Input('myHighlight') highlightColor: string;


@HostListener('mouseenter') onMouseEnter() {
    this.highlight(this.highlightColor || 'red');
  }

 private highlight(color: string) {
    this.el.nativeElement.style.backgroundColor = color;
  }



Structural Directives----

NgIf refers to the directive class; ngIf refers to the directive's attribute name.
*ngIf

<ng-container> if you dont want a div or span to be rendered.  https://angular.io/guide/structural-directives#ng-container-to-the-rescue

The Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM
its like the curly braces in a JavaScript if-block:

to use <ng-container> as a grouping element when there is no suitable host element.

 some HTML elements require all immediate children to be of a specific type. For example, the <select> element requires <option> children. You can't wrap the options in a conditional <div> or a <span>

<select [(ngModel)]="hero">
  <ng-container *ngFor="let h of heroes">
    <ng-container *ngIf="showSad || h.emotion !== 'sad'">
      <option [ngValue]="h">{{h.name}} ({{h.emotion}})</option>
    </ng-container>
  </ng-container>


can just put *ngfor on option
<select class="form-control" id="power" required>
    <option *ngFor="let pow of powers" [value]="pow">{{pow}}</option>
</select>


 @Input() set   https://angular.io/guide/structural-directives#the-myunless-property


Pipes
Use pipes for 1)transforming or 2)filtering data
can chain pipes


filtering data https://angular.io/guide/pipes#flyingheroespipe
<div *ngFor="let hero of (heroes | flyingHeroes)">

<div *ngFor="let hero of (heroes | flyingHeroesImpure)">

if heroes are added or deleted.. above div will not be updated. for that make flyingHeroes pipe as impure
https://angular.io/guide/pipes#pure-and-impure-pipes


Angular executes a pure pipe only when it detects a pure change to the input value. A pure change is either a change to a
primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object).

IMp****
Angular ignores changes within (composite) objects. It won't call a pure pipe if you
1) change an input month
2) add to an input array
3) update an input object property.

Impure AsyncPipe: The AsyncPipe accepts a Promise or Observable as input and subscribes to the input automatically, eventually returning the emitted values


Remember that impure pipes are called every few milliseconds. If you're not careful, this pipe will punish the server with requests.
With that concern in mind, implement an impure pipe with great care. An expensive, long-running pipe could destroy the user experience.

e.g. impure pipe. check a condition in transform. so logic wont be executed continuously
 if (url !== this.cachedUrl) {
      this.cachedData = null;


pipe: 'fetch'
Each binding gets its own pipe instance.
Each pipe instance caches its own URL and data.
Each pipe instance only calls the server once.

<div *ngFor="let hero of ('heroes.json' | fetch) ">  <--new instance fetch pipe
      {{hero.name}}
</div>
<p>Heroes as JSON:
      {{'heroes.json' | fetch | json}}
</p>`


But always implement a pure pipe with a pure function(Given the same input, they should always return the same output.)


Imp***** https://angular.io/guide/pipes#appendix-no-filterpipe-or-orderbypipe

Angular doesn't provide pipes for filtering or sorting lists.
No FilterPipe or OrderByPipe

filter and orderBy. There are no equivalents in Angular for performance reasons.


The Angular team and many experienced Angular developers strongly recommend moving filtering and sorting logic into
the component itself. The component can expose a filteredHeroes or sortedHeroes property and take control over when
and how often to execute the supporting logic. Any capabilities that you would have put in a pipe and shared across the app
 can be written in a filtering/sorting service and injected into the component.


If these performance and minification considerations don't apply to you, you can always create your own such pipes
(similar to the FlyingHeroesPipe) or find them in the community.



No filter or OrderBy Pipes in Angular due to performance reasons: https://angular.io/guide/pipes#appendix-no-filterpipe-or-orderbypipe
1) expose these via component as filteredHeroes or sortedHeroes property
2) filtering/sorting service and inject into the component (if shared bw the app)
3) can create custom pipes
4) or find a custom pipe in the community


User Input  https://angular.io/guide/user-input

Get user input from the $event object

Passing $event is a dubious practice. Try Getting user input from a template reference variable


<input #box (keyup)="0">   <need keyup="0"  --> https://angular.io/guide/user-input#get-user-input-from-a-template-reference-variable
    <p>{{box.value}}</p>


 pressing enter after input
 <input #box (keyup.enter)="onEnter(box.value)">
    <p>{{value}}</p>

pressing enter or mouse click elsewhere after input
 <input #box
      (keyup.enter)="update(box.value)"
      (blur)="update(box.value)">


<input #newHero
      (keyup.enter)="addHero(newHero.value)"
      (blur)="addHero(newHero.value); newHero.value='' ">


Forms

 Defining a name attribute is a requirement when using [(ngModel)] in combination with a form

<input type="text" class="form-control" id="name"
         required
         [(ngModel)]="model.name" name="name">


<label for="alterEgo">Alter Ego</label>
  <input type="text"  class="form-control" id="alterEgo"
         [(ngModel)]="model.alterEgo" name="alterEgo">

Each input element has an id property that is used by the label element's for attribute to match the label to its input control.

clicking on label will be like clicking on the input control: https://stackoverflow.com/questions/18432376/what-does-for-attribute-do-in-html-label-tag
(checkboxes, radio buttons)


Form State
https://angular.io/guide/forms#track-control-state-and-validity-with-ngmodel


<input type="text" class="form-control" id="name"
       required
       [(ngModel)]="model.name"
       name="name"        <-- is a requirement when using [(ngModel)] in combination with a form. naming name since model.name
       #name="ngModel">   <-- template reference variable

<div [hidden]="name.valid || name.pristine"  <-- template reference variable
     class="alert alert-danger">

  Name is required
</div>



After submitting the form, show something else:  https://angular.io/guide/forms#toggle-two-form-regions-extra-credit




<form #heroForm="ngForm"  *ngIf="active"  (ngSubmit)="onSubmit()">



heroForm: NgForm;
@ViewChild('heroForm') currentForm: NgForm;   <-- can use @ViewChild for template reference variables as well


ngAfterViewChecked() {
  this.formChanged();
}

formChanged() {
 this.heroForm = this.currentForm;
  if (this.heroForm) {
    this.heroForm.valueChanges



template forms putting error messages in code: https://angular.io/guide/form-validation#the-benefits-of-messages-in-code

Reactive forms are synchronous. Template-driven forms are asynchronous


Template-driven forms

You must wait a tick, using setTimeout, before you can extract a value from a control, test its validity, or set it to a new value
https://angular.io/guide/reactive-forms#async-vs-sync


Template Forms Vs Reactive Forms Vs Dynamic Forms(reactive example)


Bootstrapping https://angular.io/guide/bootstrapping

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule }              from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);

This code creates a browser platform for dynamic (JIT) compilation and bootstraps the AppModule described above.

NgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of utilities.

Modules can be loaded eagerly when the application starts. They can also be lazy loaded asynchronously by the router.



An NgModule is a class decorated with @NgModule metadata. The metadata do the following:

Declare which components, directives, and pipes belong to the module.
Make some of those classes public so that other component templates can use them.
Import other modules with the components, directives, and pipes needed by the components in this module.
Provide services at the application level that any application component can use.

Modules are a great way to provide services for all of the module's components.

A module can add providers to the application's root dependency injector, making those services available everywhere in the application.


https://angular.io/guide/ngmodule#import-supporting-modules


CommonModule   @angular/common has ngIf and ngFor.
BrowserModule imports CommonModule and re-exports it. The net effect is that an importer of BrowserModule gets CommonModule directives automatically.


Add the FormsModule to make [(ngModel)] binding work


***Only Root injector exists*** AppModule  https://angular.io/guide/ngmodule#application-scoped-providers
NgModule instances, unlike components, don't have their own injectors so they can't have their own provider scopes
no such thing as module scope for services

The root module and the feature module share the same execution context. They share the same dependency injector, which means the
services in one module are available to all.


It's standard practice for feature modules with routing components to define their own routes. <--------------------------------------


You can reduce the repetition by having SharedModule re-export CommonModule and FormsModule so that importers of SharedModule get
 CommonModule and FormsModule for free.





IMP*******https://angular.io/guide/ngmodule#why-userservice-isnt-shared
Do not specify app-wide singleton providers in a shared module. A lazy-loaded module that imports that shared module makes its own copy of the service.


Put services in Core Module
CoreModule  - provides the UserService. Angular registers that provider with the app root injector, making a singleton instance of the UserService
 available to any component that needs it, whether that component is eagerly or lazily loaded. Put services in coreModule.


SharedModule - exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.

The root AppModule imports the CoreModule and adds the providers to the AppModule providers.


Imp
https://angular.io/guide/ngmodule#configure-core-services-with-coremoduleforroot


Ngmodule providers override other imported providers
More precisely, Angular accumulates all imported providers before appending the items listed in @NgModule.providers. This sequence ensures
that whatever you add explicitly to the AppModule providers takes precedence over the providers of imported modules.

Prevent reimport of the CoreModule: https://angular.io/guide/ngmodule#prevent-reimport-of-the-coremodule
only app.module should import it


Import only BrowserModule in the root AppModule.  https://angular.io/guide/ngmodule-faq#what-should-i-import


Do not import BrowserModule in any other module(only in AppModule). Feature modules and lazy-loaded modules should import CommonModule instead.
They need the common directives. They don't need to re-install the app-wide providers


Exports: https://angular.io/guide/ngmodule-faq#what-should-i-export

A module can re-export entire modules, which effectively re-exports all of their exported classes.

RouterModule also offers a forChild static method for configuring the routes of lazy-loaded modules.

forRoot and forChild are conventional names for methods that configure services in root and feature modules respectively.

Why is a service provided in a feature module visible everywhere?
https://angular.io/guide/ngmodule-faq#why-is-a-service-provided-in-a-feature-module-visible-everywhere

 Merging module providers into the application injector makes it easy for a module library to enrich the entire application with new services.
By adding the HttpModule once, every application component can make http requests.

However, this might feel like an unwelcome surprise if you expect the module's services to be visible only to the components declared by that
feature module. If the HeroModule provides the HeroService and the root AppModule imports HeroModule, any class that knows the HeroService type
can inject that service, not just the classes declared in the HeroModule.


IMP*********
Why is a service provided in a lazy-loaded module visible only to that module?  https://angular.io/guide/ngmodule-faq#why-is-a-service-provided-in-a-lazy-loaded-module-visible-only-to-that-module

Lazy Loaded Module 'Services' have Module Scope unlike feature module that are eagerly loaded


Unlike providers of the modules loaded at launch, providers of lazy-loaded modules are module-scoped.

When the Angular router lazy-loads a module, it creates a new execution context. That context has its own injector, which is a direct child of the
application injector.


Imp***
How do I restrict service scope to a module?  https://angular.io/guide/ngmodule-faq#how-do-i-restrict-service-scope-to-a-module

TAKEAWAY--- if need to limit a service to a module- then
1) configure the module has lazy loaded and use the service in the providers property of the module
2) If you must load the module eagerly, when the application starts, provide the service in a parent/top component instead.(not in app.module)
   all child components will get the same instance
   *Be sure to create module components as children of this module's top component.*
   By contrast, Angular registers AppComponent providers with the AppComponent's own injector. AppComponent services are available only to that
      component and its component tree(child components). They are component-scoped.


Lazy-loaded modules and their components can inject AppModule services; they can't inject AppComponent services. *****


Register a service in AppComponent providers only if the service must be hidden from components outside the AppComponent tree. This is a rare use case.



Why is it bad if SharedModule provides a service to a lazy-loaded module?https://angular.io/guide/ngmodule-faq#why-is-it-bad-if-sharedmodule-provides-a-service-to-a-lazy-loaded-module

 importance of keeping providers out of the SharedModule

Lazy Loading creates child injector (for services) which is different than root injector for appmodule
reason: https://angular.io/guide/ngmodule-faq#why-does-lazy-loading-create-a-child-injector
The answer is grounded in a fundamental characteristic of the Angular dependency-injection system. An injector can add providers until it's first used. Once an injector starts creating and delivering services, its provider list is frozen; no new providers are allowed.


Shared Module: https://angular.io/guide/ngmodule-faq#sharedmodule
Core Module: https://angular.io/guide/ngmodule-faq#coremodule

Create a SharedModule with the components, directives, and pipes that you use everywhere in your app. This module should consist entirely of
declarations, most of them exported.

The SharedModule may re-export other widget modules, such as CommonModule, FormsModule, and modules with the UI controls that you use most widely.
The SharedModule should not have providers for reasons explained previously.
Import the SharedModule in your feature modules, both those loaded when the app starts and those you lazy load later

CoreModule - Create a CoreModule with providers for the singleton services you load when the application starts.
Import CoreModule in the root AppModule only
Consider making CoreModule a pure services module with no declarations.

 All other routing modules are children that import RouterModule.forChild(routes).

Service Modules should only be imported by the root AppModule.
Do not import service modules in other feature modules



That means that every provider registered within an NgModule will be accessible in the entire application.

https://angular.io/guide/dependency-injection#when-to-use-ngmodule-versus-an-application-component
On the other hand, a provider registered in an application component is available only on that component and all its children.

@Injectable is optional if service  had no injected parameters. but use it anyways to be clear https://angular.io/guide/dependency-injection#why-injectable
As it happens, you could have omitted @Injectable() from the first version of HeroService because it had no injected parameters.

providers: [Logger] shorthand for
[{ provide: Logger, useClass: Logger }]
The first is the token that serves as the key for both locating a dependency value and registering the provider.


Value providers- Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class
[{ provide: Logger, useValue: silentLogger }]



usecase for component specific service.
tax service.. one for each tax form
https://angular.io/guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions




@Host() // limit to the host component's instance of the HeroCacheService
private heroCache: HeroCacheService,

@Host()     // limit search for logger; hides the application-wide logger
@Optional() // ok if the logger doesn't exist
private loggerService: LoggerService

The @Host() function decorating the heroCache property ensures that you get a reference to the cache service from the parent HeroBioComponent.
Angular throws an error if the parent lacks that service, even if a component higher in the component tree happens to have it.


providers - useValue
Use this technique to provide runtime configuration constants such as website base addresses and feature flags. You can use a value provider in a
unit test to replace a production service with a fake or mock.


Updated way to create a token for service : https://angular.io/guide/dependency-injection-in-action#injectiontoken
InjectionToken   https://angular.io/guide/dependency-injection-in-action#injectiontoken
Opaquetoken- deprecated - appress pg 501 : https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html

reason   - well, maybe someone else has used the same token for a different provider. https://blog.thoughtram.io/angular/2016/05/23/opaque-tokens-in-angular-2.html
{ provide: TITLE,         useValue:   'Hero of the Month' },  -- provide-- token



sort
protected afterGetHeroes() {
    this.heroes = this.heroes.sort((h1, h2) => {
      return h1.name < h2.name ? -1 :
            (h1.name > h2.name ? 1 : 0);
    });
  }


Break circularities with a forward class reference (forwardRef)  https://angular.io/guide/dependency-injection-in-action#break-circularities-with-a-forward-class-reference-forwardref


HTTP

Router

<base href="/"> for routing url purposes


put routing for a feature module in that module

Only call RouterModule.forRoot in the root AppRoutingModule (or the AppModule if that's where you register top level application routes).
In any other module(eg feature module), you must call the RouterModule.forChild method to register additional routes.
https://angular.io/guide/router#hero-feature-route-configuration



Module import order matters: https://angular.io/guide/router#module-import-order-matters
The order of route configuration matters. The router accepts the first route that matches a navigation request path

 this.router.navigate(['/hero', hero.id]);

ActivatedRoute: https://angular.io/guide/router#activatedroute-the-one-stop-shop-for-route-information

Difference between QueryParam (/products?sort=rating&color=red) and RouteParams (/product/2)
https://www.tektutorialshub.com/angular/angular-passing-optional-query-parameters-to-route/

Route parameters determine the route => /product/:id
Query parameters can be used to for instance sort, page etc => /products?sort=rating&color=red
Query params (or Query Parameters) are key-value pairs that appear to the right of the ? in a URL.
A “?” is used to attach query parameters to the end of the URL.

pg 711- apress
Optional Parameters (name and price): http://localhost:4200/form/edit/2;name=Lifejacket;price=48.95
<button class="btn btn-warning btn-sm" (click)="editProduct(item.id)"
  [routerLink]="['/form', 'edit', item.id,
   {name: item.name,  price: item.price}]">
Edit
</button>

{ path: "does", redirectTo: "/form/create", pathMatch: "prefix" },
The redirectTo property is used to specify the URL that the browser will be redirected to. When
defining redirections, the pathMatch property must also be specified

pathMatch
This property tells Angular how to match the current URL to the path property.
There are two allowed values: full, which requires the path value to completely
match the URL, and prefix, which allows the path value to match the URL, even
if the URL contains additional segments that are not part of the path value. This
property is required when using the redirectTo property, as demonstrated in


Retrieving query params from url:
https://angular.io/guide/router#getting-route-information
https://www.tektutorialshub.com/angular/angular-passing-optional-query-parameters-to-route/


Reuse component
https://angular.io/guide/router#activatedroute-the-one-stop-shop-for-route-information

ngOnInit() {
  this.route.params
    // (+) converts string 'id' to a number
    .switchMap((params: Params) => this.service.getHero(+params['id']))
    .subscribe((hero: Hero) => this.hero = hero)

do not reuse component
ngOnInit() {
  // (+) converts string 'id' to a number
  let id = +this.route.snapshot.params['id'];

  this.service.getHero(id)
    .then((hero: Hero) => this.hero = hero);
}

Optional id param
let heroId = this.hero ? this.hero.id : null;
  // Pass along the hero id if available
  // so that the HeroList component can select that hero.
  // Include a junk 'foo' property for fun.
  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);


UPgrade Cheatsheet- angularjs to angular https://angular.io/guide/ajs-quick-reference


<tr ng-repeat="movie in movieList | filter: {title:listFilter}">  no filter in angular 2 - https://angular.io/guide/ajs-quick-reference#filter


<tr ng-repeat="movie in movieList | limitTo:2:0"> becomes <tr *ngFor="let movie of movies | slice:0:2"> paging

<tr ng-repeat="movie in movieList | orderBy : 'title'"> no orderby in angular 2 - https://angular.io/guide/ajs-quick-reference#orderby



https://angular.io/guide/npm-packages


Polyfill packages - https://angular.io/guide/npm-packages#polyfill-packages
core-js: Patches the global context (window) with essential features of ES2015 (ES6).
rxjs
zone.js



------------------------------------------------------------------
ANGULAR STYLE Guide: https://angular.io/guide/styleguide

naming recommendation top part

Interfaces: https://angular.io/guide/styleguide#interfaces
Consider naming an interface without an I prefix.
Consider using a class instead of an interface.
Why? TypeScript guidelines discourage the I prefix.
Why? A class alone is less code than a class-plus-interface.

import { Injectable } from '@angular/core';

import { Hero } from './hero.model';

@Injectable()
export class HeroCollectorService {
  hero: Hero;

  constructor() { }
}

Import line spacing. leave spaces bw angular and app imports: https://angular.io/guide/styleguide#import-line-spacing



Shared Modules: https://angular.io/guide/styleguide#shared-feature-module  <------------------

Do declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in other feature modules.
do not put services in Shared modules

Avoid providing services in shared modules. Services are usually singletons that are provided once for the entire application or in a particular feature module



Core Modules: https://angular.io/guide/styleguide#core-feature-module    <------------------
Do put a singleton service whose instance will be shared throughout the application in the CoreModule (e.g. ExceptionService and LoggerService).



Lazy Loaded folders: https://angular.io/guide/styleguide#lazy-loaded-folders  <----------------
A distinct application feature or workflow may be lazy loaded or loaded on demand rather than when the application starts.


Avoid aliasing inputs and outputs: https://angular.io/guide/styleguide#avoid-aliasing-inputs-and-outputs


Member sequence: https://angular.io/guide/styleguide#member-sequence
Do place properties up top followed by methods.
Do place private members after public members, alphabetized.


Delegate complex component logic to services


Don't prefix output properties: https://angular.io/guide/styleguide#dont-prefix-output-properties
Don't prefix output properties with 'on' eg  @Output() onSaved

correct
export class HeroComponent {
  @Output() savedTheDay = new EventEmitter<boolean>();
}

<toh-hero (savedTheDay)="onSavedTheDay($event)"></toh-hero>



Put presentation logic in the component class --dont {{totalPowers / heroes.length}}

Do create services with a single responsibility


When providing the service to a top level component, that instance is shared and available to all child components of that top level component.


This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the
service at the component level that needs the new and separate instance



--angular 2 with typescript pg 170

component lifecycle
Angular components can dispatch custom events using the EventEmitter object pg 174


AppComponent (the parent)
The AppComponent allows users to enter a stock symbol, which is passed to the OrderComponent via bindings

<order-processor
   [stockSymbol]="stock"   1 way binding  <--
   quantity="100">         static binding (non-changing)  - string
</order-processor>

onInputEvent({target}):void{
   this.stock=target.value;
}


Order-Component (the child)
@Input() stockSymbol: string;
@Input() quantity: number;



EventEmitter is a subclass of 'Subject' (implemented in RxJS) that can serve as both observable and observer.
raise via emit()
catch via subscribe


'Mediator design pattern' for Components
component-based UI, each component should be self-contained, and

components shouldn t rely on the existence of other UI components.  (loosely coupled)

The mediator needs to receive data from one component and pass it to another.
Let s go back to examples of monitoring stock prices


pg 194- Two Change Detection Strategies - Default and OnPush
two CD strategies: Default and OnPush. If all components use
the Default strategy, the Zone checks the entire component tree regardless of where
the change happened. If a particular component declares the OnPush strategy, the
Zone checks this component and its children only if the bindings to the component s
input properties have change

Change Detection
CD is initiated by any asynchronous event that happens in
the browser (the user clicked a button, data is received from a server, a script invoked
the setTimeout() function, and so on).
When CD runs its cycle, it checks all the bindings in the component s template.
Why might binding expressions need to be updated? Because one of the component s
properties changed.


You should learn about CD in depth only if you need to
work on performance-tuning a UI-intensive application, such as a data grid containing
hundreds of cells with constantly changing values


pg 191 - Angular 2 with Typescript

Child Component
input property: StringProperty Vs object.StringProperty

StringProperty  ->        template binding for StringProperty updated + ngonChanges to be invoked
object.StringProperty ->  template binding for object.StringProperty updated  (ngonChanges NOT invoked)

In JS, for string,  a new value is always created in memory. for objects, object reference stays the same.



1) Take notes  2) Identify useful features for sample app
-Books skim-
apress book
-angular unit testing - appress chp 29, online documentation: https://angular.io/guide/testing
angular 2 with typescript book (reference) -extract any good pointers
Online angular docs skim
   reference code: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Angular_Official_Documentation\angular-master\aio\content\examples (VsCode)

Skim fast (search on notepad- multiple instances)
'angular 4'  (notepad, appress github)  angular 4.2 documentation code & content live: https://github.com/angular/angular/tree/master/aio
angular cli, ES6, Es7
Bootstrap 4
rest of notepad
Webapi2/core.net ?  (later when developing)



--------------------------Debugging----------------------------------
Debug: (no bundling)

TFS with VSCode !!! - https://marketplace.visualstudio.com/items?itemName=ivangabriele.vscode-tfs

Preference Order

1) how to debug using angular-cli in Chrome (under webpack in chrome developer tools)
   ng serve and debug in chrome under webpack
   https://stackoverflow.com/questions/39348213/how-to-debug-angular-2-app-using-angular-cli-webpack
   **Preferably**


1b) Debug Angular with Webapi or coreWebapi (have seperate projects for Angular and Webapi- seperate servers deploy- could deploy to same as well)
    Run WebApi/CoreApi in VisualStudioCommunity/VisualStudio (VisualStudio Debugging)
    Run Angular in VSCode (Chrome Debugging)



------------------------------------------------------
2) how to debug using angular-cli in VSCode (same as chrome above. no point in debugging this way?)
   Feb 9 Comment- Launch with VSCode
   https://github.com/angular/angular-cli/issues/4526

sample launch.json
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "chrome",
            "request": "launch",
            "name": "Launch Chrome against localhost",
            "url": "http://localhost:4200",
            "sourceMaps": true,
            "sourceMapPathOverrides": {
                "webpack:///./*":"${workspaceRoot}/*"
            },
            "webRoot": "${workspaceRoot}/src"
        },
        {
            "type": "chrome",
            "request": "attach",
            "name": "Attach to Chrome",
             "url": "http://localhost:4200/store",
            "port": 4200,
            "sourceMaps": true,
            "webRoot": "${workspaceRoot}/src"
        }
    ]
}


3) how to debug using angular-cli in Visual Studio (bypass. slooow)
   sample project: C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\21_Angular_Testing\angular-cli-new-project-create-run-test



---------------------------------------------------------------------Chp 4- Dependency Injecttion - Angular 2 With Typescript------------


the line providers:

[ProductService]    is shorthand for    providers:[{provide:ProductService, useClass:ProductService}]


Angular uses the concept of a 'token', which is an arbitrary name representing an object
to be injected. Usually the token s name matches the type of the object to be injected,
so the preceding code snippet instructs Angular to provide a ProductService token
using the class of the same name

@Component (Can use the same component with a different service in a different application- loosely coupled Component Via Dependency Injection)
providers: [{provide: ProductService, useClass: ProductServiceForApplicationA}]
providers: [{provide: ProductService, useClass: ProductServiceForApplicationB}]


DI increases the testability of your components in isolation


Usecase for DI
Login Component uses a LoginService component(uses authorization server)

LoginService not ready so you can use a MOckLoginService to test Login Component for now


Any Angular application has a 'root injector' available to all of its modules.

To let the injector know what to inject, you specify the provider. An injector will inject the object or value specified in the provider
into the constructor of a component.

***NOTE Although eagerly loaded modules don t have their own injectors, a
lazy-loaded module has its own 'sub-root injector' that s a direct child of the application root injector.***  <------

Providers allow you to map a custom type (or a token) to a concrete implementation

You can specify 'providers' as a property of @NGModule or @Component


---
When the token name is the same as the class name, you can use the shorter notation to specify the provider in the module:


@NgModule({
...
providers: [{provide:ProductService,useClass:ProductService}]
})

<====>

@NgModule({
...
providers: [ProductService]
})



Providers   VS   ViewProviders

NOTE Angular also has the 'viewProviders' property, which is used when you
don t want the child components to use providers declared in the parent.  <--- By default child components use the parent's providers(services)
You ll see an example of using viewProviders in section 4.5.



@Inject() is a manual mechanism for letting Angular know that a parameter must be injected (could be a constant value- pg 127 or class with no @Injectable)

constructor(@Inject(ChatWidget) private chatWidget) { }

simplified in TypeScript to
constructor(private chatWidget: ChatWidget) { }


@Injectable() lets Angular know that a class can be used with the dependency injector


The @Injectable annotation isn t needed if the service doesn't have any dependencies  of its own in the constructor...<----


provide -> This property is used to specify the token, which is used to identify the provider and the
dependency that will be resolved

use InjectionToken to create unique token values



Dependency Injection Component Hierarchy  (pg 122)


AppComponent (parent) provider default = ProductService  (can also change this parent level useClass to change defaults)
   Product1Component (child) uses ProductService from Parent
   Product2Component (child) uses  MockProductService via component level override provider - providers: [{provide:ProductService, useClass:MockProductService}]


template: `
<product1></product1>
<br>
<product2></product2>

class AppComponent {}
@NgModule({
imports: [ BrowserModule],
providers: [ProductService],  <----
declarations: [ AppComponent, Product1Component, Product2Component],
bootstrap: [ AppComponent ]
})



class Product1Component {
product: Product;
  constructor(private productService: ProductService) {
  this.product = productService.getProduct();
}
}




@Component({
  selector: 'product2',
  template: '{{product.title}}',
  providers: [{provide:ProductService, useClass:MockProductService}]   <--

class Product2Component {
  product: Product;
  constructor(private productService: ProductService) {
   this.product = productService.getProduct();
  }
}


Imp**** pg 129
If providers for the same token were specified on both parent and
child components, and each of these components had a constructor requesting an
object represented by the token, two separate instances of such an object would be created:
one for the parent and another for the child.

If you remove the providers line from Product2Component and rerun the application,
it ll still work using the app-level injector and the same instance of the ProductService
for both components

@NgModule({
...
providers: [{provide:ProductService,useClass:ProductService}]  <-- both use token (ProductService) - seperate instances created
})

@Component({
  selector: 'product2',
  template: '{{product.title}}',
  providers: [{provide:ProductService, useClass:MockProductService}]   <-- both use token (ProductService) - seperate instances created



forwardRef - > use with @inject incase you want to inject a class that has not yet been defined ( no hoisting)
https://angular.io/api/core/forwardRef

useFactory - factory functions are used when you need to implement application logic prior to instantiating
an object (eg the injected service class may need a constructor with arguments or custom logic)
your service object may have a constructor with arguments that you need to initialize before creating
an instance


(pg 129)
@Directive({
  selector: '[autocomplete]'
})

The square brackets mean autocomplete can be used as an attribute of the HTML element.



@NgModule({
...
providers: [{provide:ProductService,useClass:ProductService}]
})


Hierarchy of Injectors  pg 127

By default, ngmodule providers or parent component  providers are available to child component.

child component can override parent component by specifying 'providers' in child component level

parent compoenent can also prevent child component to not get the parent providers by specifying the component provider as 'viewprovider' instead of 'provider'
viewprovider is only available at component level and not ngmodule level

If you want to ensure that a particular injectable service won t be visible to the component s
children or other components, use the viewProviders property instead of
providers.


Injectors form a hierarchy, and if Angular can t find the provider for the
requested type at the component level, it ll try to find it by traversing parent
injectors.

The value of the providers property is visible in the child components, whereas
viewProviders is only visible at the component level.




------------------------------------------------------------------------------------------------------------------------------------------------------------------



TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO***************


1) skim sample apps

2) Identify sample app features/requirements - demo





IMP*****
WAKE UP EARLY!!!!!!



--------------------------sample app-------------------------------------------------

Starting a new project with Angular CLI - pg 335 (angular 2 with typescript)

start new project angular cli- 2 ways (https://angular.io/guide/testing#setup-files)
https://github.com/angular/angular-cli/wiki
Start a new project following the instructions in Setup.
Start a new project with the Angular CLI.

Create, run and test a new project using angular-cli
https://github.com/angular/angular-cli/wiki (cli-main)
https://github.com/angular/angular-cli/wiki/new (create)
https://github.com/angular/angular-cli/wiki/serve (run)

checkout-
Angular 4: From Theory To Practice - https://read.amazon.com/?asin=B01N9S0CZN


NEW*
angular 4.2 documentation code & content live: https://github.com/angular/angular/tree/master/aio
code and live examples how?



***identify useful features while skimming through technologies***

use boostrap starter theme or regular theme?
https://themeforest.net/ (angular


http://anijs.github.io/examples/scrollreveal/


Skim resources
Typescript, Angular 2, Angular 4.2 related  changes(including appress)





------------------------------------------------- Sample App Resources--------------------

1) SKim Below
2) See Sample Apps And Features
3) Compile list


General
Seperate projects for Angular and Webapi- VsCode, Visual Studio
folder hierarchy/ best practices


Angular 4.2, Typescript, Boostrap 4 alpha(mobile responsive- at end), Angular Material,  Es7 & Es6,
Angular CLI, RXJs/Observables (http + custom)


Webapi 2, Core Api, EF Code First
-Server Model Validation
-Viewmodel (core api), models
-DTOs (webapi)


Angular Features
1) Angular 4.2 New Features
2) Angular 2 Features
  - Lazy loading of routes
  - Re-use component (without instantiating) - pg 669- appress
  - observables/Rxjs switchmap (search textbox webapi) ?
  - RxJs/Observables Custom (Apress Chp)
  - canActivate - child routes- admin section - authorization guard like sportstore admin- login/logout pg 179. Admin Section. Child Routes
  - canDeactivate - Abandon Data Edits.Prompt User  <----- pg 705-707
  - Debus Vs Production (using Angular CLI)
  - CSS base + component specific css (build) (media queries within component css for mobile responsiveness)
  - Grid(paging, sorting, filtering, edit/update/create)
  - Form (Reactive + Template) with Validation
  - Chrome/IE, Validation
  - Pipes, Attribute Directive, Structural Directives, Components, services

3) ES6 & ES7 New Features

4) Project configured for e2e and unit testing. Put 2/3 unit tests

5) UI Framework -
  Bootstrap v4.0.0-alpha.6 (knowledge- urls?, new features, online documentation, apress chp html &js)
  Angular Material Design (no dependency on bootstrap)
  Boostrap 4 for Angular- UI components -> https://ng-bootstrap.github.io/#/home
  Font-Awesome
  https://github.com/crisbeto/angular-svg-round-progressbar

  grid:
  Re- Evaluate(more in the list--> https://github.com/DevExpress/devextreme-angular)

  Clarity Design System: (Angular 2 Components)   - no bootstrap dependency      https://vmware.github.io/clarity/get-started  (github stars- 1489)    - got grid
  Teradata covelent (Angular 2 + Material Design) - no bootstrap dependency	 https://teradata.github.io/covalent/#/	   (github stars- 905)	   - got grid, form looks better on mobile/ie
  Amexio ? evaluate - https://www.amexio.tech/  (new)

Forms(Reactive + Template), Validation, most UI components

Shared Module
Core Module

Retrieving Parameters
   (only if component on UI and only url changes with new data- component doesn't get re-instantiated pg 669 apress) - 06_Dan_Wahlin_Angular_Jumpstart> customer>customer-edit.component
  1) this.route.params.subscribe((params: Params) => {  OR  this.route.parent.params.subscribe((params: Params) => {

   (if url changes)
  2) this.route.parent.snapshot.params["id"]

  3) this.route.params.switchMap((params: Params) => this.heroService.getHero(+params['id'])).subscribe
   https://angular.io/tutorial/toh-pt5#revise-the-herodetailcomponent
   If a user re-navigates to this component while a getHero request is still processing, switchMap cancels the old request and then calls HeroService.getHero() again.

component/directive lifecycle hooks: https://angular.io/guide/lifecycle-hooks
  -make use of them

***Communication Between Components***
if url change
  -like sportsStore- Admin Edit- get id from route values.

if url doesn't change
  -RxJs Observables
  -Parent Component-Child Components (pass data from Parent to Child plus callback from Child to Parent)
  -Using a Service (components can subscribe to a shared service event. for instance to keep track of authentication status.. see dan wahlin 06_Dan_Wahlin_Angular_Jumpstart
    good link: https://stackoverflow.com/questions/34700438/global-events-in-angular-2)
  -Using a Service (with event- see 02_Angular2_Development_with_typescript_book)

  pg 182- Angular 2 with Typescript
  -'Mediator Design Pattern' for Components: if have a common parent component, then can use 'Mediator Design Pattern' from Angular 2 with Typescript.Common parent could get data from one component and pass it to another one.
  -'Alternative - if have no common parent component then can use injectable service as a mediator. Component can subscribe to events emitted by the service




 -subsribe and unsubcribe (ngdestroy pattern)- to a shared service event
 - service only using promises? (04_Official_Tutorial_Tour_of_Heroes)

-Updated way to create a token for service InjectionToken (Opaquetoken- deprecated)

-template input variable + template reference variable

-arrow functions

-bootstrap 4 (bootstrap utilities)

Core + Webapi
- core api ?? Dont store auth cookie on client like sportsstore 10_Angular2_CRUD_Asp.net_Core_Webapi
- core api - include properties for lazy loading
- View model + Validation, EF Core Code First migrations, AutoMapper? (10_Angular2_CRUD_Asp.net_Core_Webapi)



Questions?
Boostrap Theme(https://themeforest.net/ - angular etc OR Starter Theme


Misc
breadcrumb
Route guard on page reload(redirect to main page). like pg156 apress.


****Review UI of Apps  Plus  Book Chapters(features)****

Calling child component APi from parent ----pg 196  -- gooood example  - also uses ngAfterViewInit event


angular 4.2 - see summary of changes (chps & apps)
identify client routes
shared services (e.g. Cart)
shared configuration
Error Handling ((2 ways) -error table)
  pg 615 + pg 649 provision for seeing error after navigating somewhere else
 1) error handling for each subscribe method in components etc
 2) override angular default error handling function (appress uses)

TrackBy for ngFor that need them
Grid (paging, filtering sorting) - Third Party Grid?, Add/edit/Delete
Ng-Repeat custom filtering & sorting  <-- since no filter in ng2. Notes('No filter or OrderBy Pipes')See 06_Dan_Wahlin_Angular_Jumpstart
Navbar, Growler(toaster) and Model Singleton Components (in core module)

Forms(Reactive + Template), Validation, most UI components

Shared Module
Core Module

Retrieving Parameters
   (only if component on UI and only url changes with new data- component doesn't get re-instantiated pg 669 apress) - 06_Dan_Wahlin_Angular_Jumpstart> customer>customer-edit.component
  1) this.route.params.subscribe((params: Params) => {  OR  this.route.parent.params.subscribe((params: Params) => {

   (if url changes)
  2) this.route.parent.snapshot.params["id"]

  3) this.route.params.switchMap((params: Params) => this.heroService.getHero(+params['id'])).subscribe
   https://angular.io/tutorial/toh-pt5#revise-the-herodetailcomponent
   If a user re-navigates to this component while a getHero request is still processing, switchMap cancels the old request and then calls HeroService.getHero() again.

component/directive lifecycle hooks: https://angular.io/guide/lifecycle-hooks
  -make use of them

Communication Between Components
if url change
  -like sportsStore- Admin Edit- get id from route values.

if url doesn't change
  -RxJs Observables
  -Parent Component-Child Components (pass data from Parent to Child plus callback from Child to Parent)
  -Using a Service (components can subscribe to a shared service event. for instance to keep track of authentication status.. see dan wahlin 06_Dan_Wahlin_Angular_Jumpstart
    good link: https://stackoverflow.com/questions/34700438/global-events-in-angular-2)
  -Using a Service (with event- see 02_Angular2_Development_with_typescript_book)


 -subsribe and unsubcribe (ngdestroy pattern)- to a shared service event
 - service only using promises? (04_Official_Tutorial_Tour_of_Heroes)

-Updated way to create a token for service InjectionToken (Opaquetoken- deprecated)

-template input variable + template reference variable

-arrow functions



-bootstrap 4 (bootstrap utilities)

Core + Webapi
- core api ?? Dont store auth cookie on client like sportsstore 10_Angular2_CRUD_Asp.net_Core_Webapi
- core api - include properties for lazy loading
- View model + Validation, EF Core Code First migrations, AutoMapper? (10_Angular2_CRUD_Asp.net_Core_Webapi)






1) Review UI of Apps (UI + code)


***Keep all VSCode solution open for Code Reference***

1) SportsStore
 UI/Code Features
 -Show PRoducts (with Paging(attribute directive) + Category Filtering)
 -Products - Add to Cart (shared service)
 -Cart Summary Directive
 -Cart Details
 -Checkout/Place Order
 -Admin section lazy loaded (since won't be used by everyone)
    -login
    -child routes (seperate router outlet)
    -Custom Grid CRUD (url change) for Products
	-Product Edit/New got Validation
    -Logout
 -Model, Repository, DataSource
 StoreFirstGuard on all components- hit reload on page-

See iphone Video for UI--

DB  (node.js)
 product
 order


2) 06_Dan_Wahlin_Angular_Jumpstart
 -Show List of Customers (paging)
 -View customer's Orders (paging)
 -Show all Orders
 -Select Customer
    -Show Customer Details
    -Show Customer Orders
    -Add/Edit/Delete Customer (Edit Customer behind login) + Validation  (admin edit functionality)
 -Logout
 -(Navbar, Modal, Toaster like)
 -Shared &  Core  folder, app.component.html per best practices
 -Custom sort and filterby
 - CustomerEditComponent(CanActivate and CanDeactivate)
 - core>navbar.component.html- events raise and catch (eg if user's authentication status has changed)- good example
	components can subscribe to a shared service event. for instance to ke
        plus subsribe and unsubcribe (ngdestroy pattern)- to a shared service event

See iphone Video for UI--

DB (node.js)
  ICustomer
  IState
  IOrder
  IOrderItem


3) 04_Official_Tutorial_Tour_of_Heroes
  -List of Heroes
  -Hero Details
  -Hero CRUD(Add, Edit, Delete Read) - using Promises(not Observables)
  -Search Heroes in api (via SwitchMap/Observables)

See iphone Video for UI--

DB (node.js)
  Hero


4) 10_Angular2_CRUD_Asp.net_Core_Webapi

  -View All Photos (paging)
  -Click Albums (behind login)
	-Register or Login (Form Validation)
        -View Albums. Select album>View Photos (paging). Delete Photo
	-Breasdcrumb
  -Login/Logout (via navbar)
  -Core Api...(Admin Role)

See iphone Video for UI--

DB
  Error  (logging) repository

  Photo
  Album (Behind Login - includes Photos)

  User
  Role     --.net core role admin utilize
  UserRole


5) 12_CRUD_Angular_4_Asp.net_Core_Rest_Api
  -View All Schedules
  -Schedule CRUD
  -View All Users
  -User CRUD
    -View User Schedules
  -Shared folder
  -Core Api...

See iphone Video for UI--

DB
  Schedule
  Attendee   (many to many  bw Schedule and User)
  User


6) Apress Source Code Book
   -Product List(Edit/Delete) on Edit (Change Url) - [Routing Feature- pg 669- appress]
       Previous/Next Buttons to go through Product List on the Same Page (url changes)
       Re-use component (without instantiating) -

   -Product List(Edit/Delete) on Edit (Same Url). Edit Form on the Side. [RxJs Feature- pg 578- appress]
     -Use Custom RxJs Observables/Subjects
   -Attribute Directives, Structural Directives, Pipes (see apps)
   -Use component/directive lifecycle events
   -seperate modules for features

   -Imp Angular 4 Changes apress url()


7) Angular 2 with Typescript Book
   Chp 6-- Component Communications--goooood chp for components...
   -ngOnChanges- when won't be triggered.
   -Mediator Design Pattern
   -Calling child component APi from parent ----pg 196  -- gooood example  - also uses ngAfterViewInit event




App DBs Schema (error which app)......




08_Angular_4_CRUD_Example  (reactive forms, components...) else ok




------------------------------------------------------------------------------------------------------------------------------------
-----app brainstorming- refine
concepts/features- Refine/Prioritize- needs to be completed within decent timeframe, realistic deliverable
http://anijs.github.io/examples/scrollreveal/
***identify useful features while skimming through technologies***
use boostrap starter theme or regular theme?
https://themeforest.net/ (angular
Skim resources
Typescript, Angular 2, Angular 4.2 related  changes(including appress)
Core api/ Webapi 2, EF (notepad?)
Skim Notepad only
Bootstrap 4 alpha, Es6, ES7,  Angular CLI, RXJs\Observables, Skim rest of notepad...
-breadcrumb
Skim Sample Apps
Identify any other useful features
- Lazy loading of routes
- Re-use component (without instantiating) - pg 669- appress
- observables/Rxjs switchmap (search textbox webapi) ?
- RxJs/Observables Custom (Apress Chp)
- canActivate - child routes- admin section - authorization guard like sportstore admin- login/logout pg 179
- canDeactivate - Abandon Data Edits.Prompt User  <----- pg 705-707
- Debus Vs Production (using Angular CLI)
- CSS base + component specific css (build)/ View Encapsulation-default
- seperate projects for Angular and Webapi- VsCode, Visual Studio
- folder hierarchy/ best practices
- Rxjs/Observables Custom (not http)
Form, Grid(paging, sorting, filtering, edit/update/create), Mobile Responsive, Chrome/IE, Validation
typescript target es5, lib es7, es6 (use es6 & es7 features), use let(block scope) instead of var
Major components
login, child routes, Reactive Vs Template form,
Pipes, Attribute Directive, Structural Directives, Components, services
angular cli build (dev, prod)
UI/CSS frameworks from the list (angular material etc)
Evaluate UI library: https://www.youtube.com/watch?utm_medium=email&v=6_i2Xi7Dluc&disableoverride=elqCampaignId&utm_medium=email&utm_source=eloqua&utm_campaign=kendoui-video-angularProductEvalYTVideo-kendoui-tofu&elqTrackId=c01a2cf41c6544fdb1fa7eb57dce0248&elq=cf07e866f7ab4777b0bbfec3d222d9e8&elqaid=12652&elqat=1&elqCampaignId=14368
unit testing  - (karma, jasmine, protractor)- put in 2/3 tests
Create and maintain Unit and E2E tests
Reactive programming: Rxjs\Observables, TSLint


-------------------------------------------------------------------------------------------------






front-end stack


adding xxx to angular-cli or angular 2


---adding angular material to angular 2


angular 4


----------------------------------------------------


Bootstrap 4 alpha 6  (done)   testing- done


Boostrap 4 for Angular- UI components -> https://ng-bootstrap.github.io/#/home  (done)   testing- done


Angular Material Design (no dependency on bootstrap)   (done) -> test info: https://alligator.io/angular/angular-material-2/  testing- done





Font-Awesome   (done)  testing- done


Js
 jquery-3.1.1  (done)
 moment.js     (done) (https://medium.com/@jek.bao.choo/steps-to-add-moment-js-to-angular-cli-f9ab28e48bf0) testing- done
 toastr.js     (done)      testing- done

------------------------------------------------------





Urls

Bootstrap 4 alpha 6
  https://v4-alpha.getbootstrap.com/components

Material Design->
  https://alligator.io/angular/angular-material-2/
  https://github.com/angular/material2 (angular material 2) -
  https://material.angular.io/ (github stars- 9111)  - good!! no grid  - No Bootstrap dependency



---
eager loading first menu, lazy loading all other menu items. each menu represents a functional block.

Top level Menu: Store, Admin


/store
     /checkout
     /store
     /cart

/admin  (lazy load just the '/admin' path route)
     /auth
     /main
         /products/edit/1
         /products/create
         /products
         /orders





CommonModule contributes many of the common directives that applications need, including ngIf and ngFor


timing delay
        setTimeout(()=>{    //<<<---    using ()=> syntax

 },3000);


ng build --prod --base-href /SamplesUI/


 <div class="ml-1 mb-1 list-header"><strong>Front-End Technologies Used</strong></div>
                   <ul class="list-group col-sm-12 col-lg-8">
                        <li class="list-group-item list-group-item-info d-inline"><strong>Angular 4</strong>&nbsp;for front-end JS Framework</li>
                        <li class="list-group-item list-group-item-success d-inline"><strong>Boostrap 4 Alpha</strong>&nbsp;for Top Menu, Form Controls & Reponsiveness</li>
                        <li class="list-group-item list-group-item-warning d-inline"><strong>Angular Material 2</strong>&nbsp;for Tabs, Progress Indicator, Cards & Toolbar</li>
                        <li class="list-group-item list-group-item-danger d-inline"><strong>Font Awesome</strong>&nbsp;for Icons</li>
                        <li class="list-group-item list-group-item-success d-inline"><strong>Primefaces</strong>&nbsp;open-source & free DataTable for Paging, Filtering & Sorting</li>
                    </ul>


Production Build for UI & Webapi tested via Angular-CLI




Notes:
Could have put all 4 pages in a single module. But for feature demonstration purposes, i put them in 4 different modules.
1 is eagerly loaded, whereas other 3 are lazy loaded. The modules can be built upon with having child routes of their own
corresponding to sub-menu entries







Angular4Demo

Pros/Cons
1)browser cache : Use SportsStore Product.repository if you want a caching layer on the browser. Navigating component to component will not make an api call if its already on the browser
2)no browser cache :
   a)Use customers.component dan wahlins(\06_Dan_Wahlin_Angular_Jumpstart\WebApplication1\src\app\customers)  if want to get fresh data while navigating component to component on different routes.
    (no caching layer on browser). no worry about stale data
   b) 04_Official_Tutorial_Tour_of_Heroes if want to get fresh data while navigating component to component on different routes.  no worry about stale data



---Deactivation Guard--------------
Dan Wahlin
 -unsaved customer edit exits- (canDeActive) - run npm run start

apress pg 702
modal: popup warning(you have unsaved changes)

global deactivation guard - unsaved changes- just apply to any route(even child route)
C:\Users\Dan\Desktop\Anglr2Stuff\SampleNG2Apps\Gene_ByGene_Task\New\Solution\Samples_Enhancements\SamplesUI\samples-app\src\app\core\guards


----load lookups---
1) use resolve guard on main url or /path url to preload lookups
2) proper way? application start? - APP_INITIALIZER  ?



Logical or ||
If not left hand, then right hand. Even more simplified if else. Available in typescript/javascript/angular

Promise.reject(error.message || error)




***Error Handling***-----------------------------------------------------------------------------------------------------------

Testcases
  Server Side (should be logged on server)
    1) webapi call-> server side 'handled' errors (4xx badrequest, 4xx notfound etc)
    2) webapi call -> server side 'unhandled' errors (500- exception occurred on the server)

  Client side (log to server if needed plus show on chrome console window)
    2)  webapi call -> client side errors while making api call or webapi unhandled errors. errors(eg no internet connection, rxjs commands, server 500)
    3) 'unhandled' client side javascript errors (eg js null/undefined errors etc)- Default logs to console. Overrode default error handler. log to console plus show toastr


Resources:
1) Online Documentation: https://angular.io/guide/http
2) John Papa: 05_John_Papa_Tour_Of_Heroes
3) 06_Dan_Wahlin_Angular_Jumpstart
4) Apress: C:\Users\Dan\Desktop\Anglr2Stuff\ProAngular2- Apress Changes for Angular 4 and Angular CLI\Apress -Angular 4 -Source Code Updates\Updated Source Code\24 - Making HTTP Requests
5) Code Magazine: 22_Angular_4_WebApi_CRUD_CodeMagazine


https://netbasal.com/angular-2-custom-exception-handler-1bcbc45c3230


toastr only show user friendly messages- dont need a dedicated component. detailed error messages log to console or log to server

What happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? HttpClient will return an error instead of a successful response


HttpErrorResponse
  error (Error object or something else)
  status (Response)
  statusText (Response)




------------------------------------------------------------------------------------------------------------------------------


checking types
https://basarat.gitbooks.io/typescript/content/docs/types/typeGuard.html



---------------------------------------------------------VS Code Git---------------------------------------------------------------------

****Imp: always 'Pull' before you 'push' from remote repo and see 'merge' errors in git console. else your changes will just override server ones****

Resources
https://code.visualstudio.com/docs/editor/versioncontrol
John Papa Git for VSCode: https://app.pluralsight.com/player?course=visual-studio-code&author=john-papa&name=visual-studio-code-m7&clip=0&mode=live
github repo: https://github.com/dlokman/RepositoryOne

branches in github repo


CREATE REPOSITORIES

Start a new repository or obtain one from an existing URL
$ git init [project-name]
Creates a new local repository with the specified name

$ git clone [url]
Downloads a project and its entire version history



Download git: https://git-scm.com/download/win

Can connect to local repo or remote repo(eg github or VS Online or Bitbucket)
Can use commands inside VSCode for git

Changes:

 Staged Changes
   A  (Added new file for commit)

 Changes
   D  (Deleted file)
   M  (Modified file)
   U  (Unstaged new file)


.gitignore file informs all files not included in the git repository
A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details

Exclude all files under .vscode folder except settings.json
.vscode/*
!.vscode/settings.json

Pull  (pull code   down from  remote git repo   to    local git repo) - before start working...
Push  (push code   to         remote git repo   from  local git repo)
Sync  (first pull, then push)


 or create a new repository on the command line

----------------

run from git bash command.to push changes from local repo to remote repo
git remote add origin https://github.com/dlokman/TestRepo.git
git push -u origin master



----------------
echo "# TestRepo" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/dlokman/TestRepo.git
git push -u origin master
 or push an existing repository from the command line



TODO: Check Git menu commands in VSCode



--------------------Testcases-- Git Practice Visual Studio Code------------------

1) Create a new local git repo and push it to github and keep it synched with local repo

.gitignore file dont push node_modules folder while pushing changes to remote repo
example: https://github.com/johnpapa/angular-tour-of-heroes/blob/master/.gitignore

in gitBash command window:
mkdir RepositoryOne
cd RepositoryOne
code . (to open Vs Code)


or via angular cli

ng new RepositoryOne   (will install node_modules as well)  [GitRepositories\RepositoryOne]
cd RepositoryOne
ng serve --open (to test)


in vscode click 'initialize repository' under source control tab

stage all changes (click +)
commit all changes to local repo (click checkmark)

create repository called RepositoryOne in https://github.com/dlokman

paste 2 commands in git bash while under
Dan@Dan-PC MINGW64 ~/Desktop/Anglr2Stuff/SampleNG2Apps/GitRepositories/RepositoryOne (master)
to push changes from local repo to remote repo

git remote add origin https://github.com/dlokman/RepositoryOne.git


Use 'Push' menu from sourc control git in Vs Code  ..OR..
git push -u origin master  (upstream have it as master branch in the repo)


--------------------------

2) Clone github remote repo to work on a local repo

from GitRepositories\RepositoryOneClone folder
execute: git clone https://github.com/dlokman/RepositoryOne.git (github repo)

open vs code GitRepositories\RepositoryOneClone folder (Vscode should detect git repo and connect it)

make changes and commit and push

//dont need to below..........
cd RespositoryOne
npm install

code .

click initialize Repository

git remote add origin https://github.com/dlokman/RepositoryOne.git



to test out/play 'git with VS Code'. Both connected to github repo: https://github.com/dlokman/RepositoryOne
open VS: GitRepositories\RepositoryOne
open Vs: GitRepositories\RepositoryOneClone

changes-> staged changes -> 'Commit' to local git repo -> 'Push' back to remote git repo

push, pull, merge(after 'commit' do pull and if the same file has changes it'll give a merge error in git console)



Switch branches from bottom left icon


<------------------------------------------------------------------------HERE


----------------------------------------------- Bootstrap 3 ------------------------------------


Bootstrap 3 is mobile first as well

container vs container-fluid: https://www.bootply.com/121222

Bootstrap requires a containing element to wrap site contents and house our grid system.
<div class="container">
  ...
</div>


col-xs:  phones, less than 768px  (default in styles.css)
col-sm:  tablets, 768px and up
col-md:  desktops, 992px and up
col-lg:  large desktops, 1200px and up


1) Default mobile first - Extra small devices     (phones, less than 768px)  - No media query since this is the default in Bootstrap
   use xs to target this screen size

2) @media (min-width: @screen-sm-min) { ... }     (Small devices (tablets, 768px and up)


3) @media (min-width: @screen-md-min) { ... }     (Medium devices (desktops, 992px and up)


4) @media (min-width: @screen-lg-min) { ... }     (Large devices (large desktops, 1200px and up)



<p class="text-left">Left aligned text.</p>
<p class="text-center">Center aligned text.</p>
<p class="text-right">Right aligned text.</p>
<p class="text-justify">Justified text.</p>
<p class="text-nowrap">No wrap text.</p>



.active	Applies the hover color to a particular row or cell
.success	Indicates a successful or positive action
.info	Indicates a neutral informative change or action
.warning	Indicates a warning that might need attention
.danger	Indicates a dangerous or potentially negative action


<!-- On rows -->  table
<tr class="active">...</tr>
<tr class="success">...</tr>
<tr class="warning">...</tr>
<tr class="danger">...</tr>
<tr class="info">...</tr>


<p class="bg-primary">...</p>
<p class="bg-success">...</p>
<p class="bg-info">...</p>
<p class="bg-warning">...</p>
<p class="bg-danger">...</p>

Forms

All textual <input>, <textarea>, and <select> elements with .form-control are set to width: 100%; by default.
Wrap labels and controls in .form-group for optimum spacing


Validation states
Bootstrap includes validation styles for error, warning, and success states on form controls.

To use, add
.has-warning,
.has-error, or
.has-success

to the parent element.

Any
.control-label,
.form-control, and
.help-block

within that element will receive the validation styles

Angular Validation

<input class="form-control ng-pristine ng-invalid ng-touched" minlength="5"
name="name" pattern="^[A-Za-z ]+$" required="" ng-reflect-name="name">

ng-untouched ng-touched
ng-pristine ng-dirty
ng-valid ng-invalid


Wrap inputs in grid columns, or any custom parent element, to easily enforce desired widths.
<div class="row">
  <div class="col-xs-2">
    <input type="text" class="form-control" placeholder=".col-xs-2">
  </div>
  <div class="col-xs-3">
    <input type="text" class="form-control" placeholder=".col-xs-3">
  </div>
  <div class="col-xs-4">
    <input type="text" class="form-control" placeholder=".col-xs-4">
  </div>
</div>


<!-- Standard button -->
<button type="button" class="btn btn-default">Default</button>

<!-- Provides extra visual weight and identifies the primary action in a set of buttons -->
<button type="button" class="btn btn-primary">Primary</button>

<!-- Indicates a successful or positive action -->
<button type="button" class="btn btn-success">Success</button>

<!-- Contextual button for informational alert messages -->
<button type="button" class="btn btn-info">Info</button>

<!-- Indicates caution should be taken with this action -->
<button type="button" class="btn btn-warning">Warning</button>

<!-- Indicates a dangerous or potentially negative action -->
<button type="button" class="btn btn-danger">Danger</button>

<!-- Deemphasize a button by making it look like a link while maintaining button behavior -->
<button type="button" class="btn btn-link">Link</button>


Size:
 <button type="button" class="btn btn-primary btn-lg">Large button</button>

  Default size
  btn-lg
  btn-sm
  btn-xs


Active state
Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active
<button type="button" class="btn btn-primary btn-lg active">Primary button</button>


<p class="text-muted">...</p>
<p class="text-primary">...</p>
<p class="text-success">...</p>
<p class="text-info">...</p>
<p class="text-warning">...</p>
<p class="text-danger">...</p>


Float an element to the left or right with a class. !important is included to avoid specificity issues.


<div class="pull-left">...</div>
<div class="pull-right">...</div>


// Classes
.pull-left {
  float: left !important;
}
.pull-right {
  float: right !important;
}


Set an element to 'display: block' and 'center' via margin
<div class="center-block">...</div>


Easily clear floats by adding .clearfix to the parent element.

<div class="clearfix">...</div>



Show/Hide
Force an element to be shown or hidden (including for screen readers) with the use of .show and .hidden classes

<div class="show">...</div>
<div class="hidden">...</div>

Responsive show and hide
http://getbootstrap.com/css/#responsive-utilities-classes

.visible-xs-*
.visible-sm-*
...
.hidden-sm
...

Bootstrap's 3 CSS is built on Less  (Bootstrap 4 is SASS based)

Variables
Variables are used throughout the entire project as a way to centralize and share commonly used values like

[colors], spacing, or font stacks.

For a complete breakdown, please see the Customizer.\: http://getbootstrap.com/customize/#less-variables



-----------------------------------------------OData-----------------------------------------------

Sample App: \SampleNG2Apps\oDataWebApi\oDataWebApi\
oData: https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/create-an-odata-v4-endpoint
oData Samples: https://github.com/OData/ODataSamples/blob/master/RESTier/Trippin/Trippin/Helpers.cs


How to create OData endpoints in Web API. OData is a data access protocol for the web. It provides
a uniform way to query and manipulate data sets. Web API supports both Version 3 and Version 4
of the OData protocol


 For example, to get the product with ID of 5, the URI is

/Products(5)  get product with id = 5

GET /Products(1)/Supplier  For Product with id = 1, get navigation property supplier

You create a 'separate controller' for each entity set in your OData service.  In this tutorial, you
will create one controller, for the Product entity


OData supports two different semantics for updating an entity, PATCH and PUT.+
- PATCH performs a partial update. The client specifies just the properties to update.
- PUT replaces the entire entity.

The disadvantage of PUT is that the client must send values for all of the properties in the entity, including values that are not changing


oData
System.Web.Http.OData.Results Namespace (https://msdn.microsoft.com/en-us/library/system.web.http.odata.results(v=vs.118).aspx)

Read:    single result: SingleResult.Create(result). Multiple:  return db.Products;
Create:  return Created(product);
Update:  return Updated(entity);
Delete:  return StatusCode(HttpStatusCode.NoContent);



https://www.exceptionnotfound.net/http-status-codes-in-asp-net-web-api-a-guided-tour/


    //
    // Summary:
    //     Contains the values of status codes defined for HTTP.
    public enum HttpStatusCode
    {
        //
        // Summary:
        //     Equivalent to HTTP status 100. System.Net.HttpStatusCode.Continue indicates that
        //     the client can continue with its request.
        Continue = 100,
        //
        // Summary:
        //     Equivalent to HTTP status 101. System.Net.HttpStatusCode.SwitchingProtocols indicates
        //     that the protocol version or protocol is being changed.
        SwitchingProtocols = 101,
        //
        // Summary:
        //     Equivalent to HTTP status 200. System.Net.HttpStatusCode.OK indicates that the
        //     request succeeded and that the requested information is in the response. This
        //     is the most common status code to receive.
        OK = 200,
        //
        // Summary:
        //     Equivalent to HTTP status 201. System.Net.HttpStatusCode.Created indicates that
        //     the request resulted in a new resource created before the response was sent.
        Created = 201,
        //
        // Summary:
        //     Equivalent to HTTP status 202. System.Net.HttpStatusCode.Accepted indicates that
        //     the request has been accepted for further processing.
        Accepted = 202,
        //
        // Summary:
        //     Equivalent to HTTP status 203. System.Net.HttpStatusCode.NonAuthoritativeInformation
        //     indicates that the returned metainformation is from a cached copy instead of
        //     the origin server and therefore may be incorrect.
        NonAuthoritativeInformation = 203,
        //
        // Summary:
        //     Equivalent to HTTP status 204. System.Net.HttpStatusCode.NoContent indicates
        //     that the request has been successfully processed and that the response is intentionally
        //     blank.
        NoContent = 204,
        //
        // Summary:
        //     Equivalent to HTTP status 205. System.Net.HttpStatusCode.ResetContent indicates
        //     that the client should reset (not reload) the current resource.
        ResetContent = 205,
        //
        // Summary:
        //     Equivalent to HTTP status 206. System.Net.HttpStatusCode.PartialContent indicates
        //     that the response is a partial response as requested by a GET request that includes
        //     a byte range.
        PartialContent = 206,
        //
        // Summary:
        //     Equivalent to HTTP status 300. System.Net.HttpStatusCode.MultipleChoices indicates
        //     that the requested information has multiple representations. The default action
        //     is to treat this status as a redirect and follow the contents of the Location
        //     header associated with this response.
        MultipleChoices = 300,
        //
        // Summary:
        //     Equivalent to HTTP status 300. System.Net.HttpStatusCode.Ambiguous indicates
        //     that the requested information has multiple representations. The default action
        //     is to treat this status as a redirect and follow the contents of the Location
        //     header associated with this response.
        Ambiguous = 300,
        //
        // Summary:
        //     Equivalent to HTTP status 301. System.Net.HttpStatusCode.MovedPermanently indicates
        //     that the requested information has been moved to the URI specified in the Location
        //     header. The default action when this status is received is to follow the Location
        //     header associated with the response.
        MovedPermanently = 301,
        //
        // Summary:
        //     Equivalent to HTTP status 301. System.Net.HttpStatusCode.Moved indicates that
        //     the requested information has been moved to the URI specified in the Location
        //     header. The default action when this status is received is to follow the Location
        //     header associated with the response. When the original request method was POST,
        //     the redirected request will use the GET method.
        Moved = 301,
        //
        // Summary:
        //     Equivalent to HTTP status 302. System.Net.HttpStatusCode.Found indicates that
        //     the requested information is located at the URI specified in the Location header.
        //     The default action when this status is received is to follow the Location header
        //     associated with the response. When the original request method was POST, the
        //     redirected request will use the GET method.
        Found = 302,
        //
        // Summary:
        //     Equivalent to HTTP status 302. System.Net.HttpStatusCode.Redirect indicates that
        //     the requested information is located at the URI specified in the Location header.
        //     The default action when this status is received is to follow the Location header
        //     associated with the response. When the original request method was POST, the
        //     redirected request will use the GET method.
        Redirect = 302,
        //
        // Summary:
        //     Equivalent to HTTP status 303. System.Net.HttpStatusCode.SeeOther automatically
        //     redirects the client to the URI specified in the Location header as the result
        //     of a POST. The request to the resource specified by the Location header will
        //     be made with a GET.
        SeeOther = 303,
        //
        // Summary:
        //     Equivalent to HTTP status 303. System.Net.HttpStatusCode.RedirectMethod automatically
        //     redirects the client to the URI specified in the Location header as the result
        //     of a POST. The request to the resource specified by the Location header will
        //     be made with a GET.
        RedirectMethod = 303,
        //
        // Summary:
        //     Equivalent to HTTP status 304. System.Net.HttpStatusCode.NotModified indicates
        //     that the client's cached copy is up to date. The contents of the resource are
        //     not transferred.
        NotModified = 304,
        //
        // Summary:
        //     Equivalent to HTTP status 305. System.Net.HttpStatusCode.UseProxy indicates that
        //     the request should use the proxy server at the URI specified in the Location
        //     header.
        UseProxy = 305,
        //
        // Summary:
        //     Equivalent to HTTP status 306. System.Net.HttpStatusCode.Unused is a proposed
        //     extension to the HTTP/1.1 specification that is not fully specified.
        Unused = 306,
        //
        // Summary:
        //     Equivalent to HTTP status 307. System.Net.HttpStatusCode.TemporaryRedirect indicates
        //     that the request information is located at the URI specified in the Location
        //     header. The default action when this status is received is to follow the Location
        //     header associated with the response. When the original request method was POST,
        //     the redirected request will also use the POST method.
        TemporaryRedirect = 307,
        //
        // Summary:
        //     Equivalent to HTTP status 307. System.Net.HttpStatusCode.RedirectKeepVerb indicates
        //     that the request information is located at the URI specified in the Location
        //     header. The default action when this status is received is to follow the Location
        //     header associated with the response. When the original request method was POST,
        //     the redirected request will also use the POST method.
        RedirectKeepVerb = 307,
        //
        // Summary:
        //     Equivalent to HTTP status 400. System.Net.HttpStatusCode.BadRequest indicates
        //     that the request could not be understood by the server. System.Net.HttpStatusCode.BadRequest
        //     is sent when no other error is applicable, or if the exact error is unknown or
        //     does not have its own error code.
        BadRequest = 400,
        //
        // Summary:
        //     Equivalent to HTTP status 401. System.Net.HttpStatusCode.Unauthorized indicates
        //     that the requested resource requires authentication. The WWW-Authenticate header
        //     contains the details of how to perform the authentication.
        Unauthorized = 401,
        //
        // Summary:
        //     Equivalent to HTTP status 402. System.Net.HttpStatusCode.PaymentRequired is reserved
        //     for future use.
        PaymentRequired = 402,
        //
        // Summary:
        //     Equivalent to HTTP status 403. System.Net.HttpStatusCode.Forbidden indicates
        //     that the server refuses to fulfill the request.
        Forbidden = 403,
        //
        // Summary:
        //     Equivalent to HTTP status 404. System.Net.HttpStatusCode.NotFound indicates that
        //     the requested resource does not exist on the server.
        NotFound = 404,
        //
        // Summary:
        //     Equivalent to HTTP status 405. System.Net.HttpStatusCode.MethodNotAllowed indicates
        //     that the request method (POST or GET) is not allowed on the requested resource.
        MethodNotAllowed = 405,
        //
        // Summary:
        //     Equivalent to HTTP status 406. System.Net.HttpStatusCode.NotAcceptable indicates
        //     that the client has indicated with Accept headers that it will not accept any
        //     of the available representations of the resource.
        NotAcceptable = 406,
        //
        // Summary:
        //     Equivalent to HTTP status 407. System.Net.HttpStatusCode.ProxyAuthenticationRequired
        //     indicates that the requested proxy requires authentication. The Proxy-authenticate
        //     header contains the details of how to perform the authentication.
        ProxyAuthenticationRequired = 407,
        //
        // Summary:
        //     Equivalent to HTTP status 408. System.Net.HttpStatusCode.RequestTimeout indicates
        //     that the client did not send a request within the time the server was expecting
        //     the request.
        RequestTimeout = 408,
        //
        // Summary:
        //     Equivalent to HTTP status 409. System.Net.HttpStatusCode.Conflict indicates that
        //     the request could not be carried out because of a conflict on the server.
        Conflict = 409,
        //
        // Summary:
        //     Equivalent to HTTP status 410. System.Net.HttpStatusCode.Gone indicates that
        //     the requested resource is no longer available.
        Gone = 410,
        //
        // Summary:
        //     Equivalent to HTTP status 411. System.Net.HttpStatusCode.LengthRequired indicates
        //     that the required Content-length header is missing.
        LengthRequired = 411,
        //
        // Summary:
        //     Equivalent to HTTP status 412. System.Net.HttpStatusCode.PreconditionFailed indicates
        //     that a condition set for this request failed, and the request cannot be carried
        //     out. Conditions are set with conditional request headers like If-Match, If-None-Match,
        //     or If-Unmodified-Since.
        PreconditionFailed = 412,
        //
        // Summary:
        //     Equivalent to HTTP status 413. System.Net.HttpStatusCode.RequestEntityTooLarge
        //     indicates that the request is too large for the server to process.
        RequestEntityTooLarge = 413,
        //
        // Summary:
        //     Equivalent to HTTP status 414. System.Net.HttpStatusCode.RequestUriTooLong indicates
        //     that the URI is too long.
        RequestUriTooLong = 414,
        //
        // Summary:
        //     Equivalent to HTTP status 415. System.Net.HttpStatusCode.UnsupportedMediaType
        //     indicates that the request is an unsupported type.
        UnsupportedMediaType = 415,
        //
        // Summary:
        //     Equivalent to HTTP status 416. System.Net.HttpStatusCode.RequestedRangeNotSatisfiable
        //     indicates that the range of data requested from the resource cannot be returned,
        //     either because the beginning of the range is before the beginning of the resource,
        //     or the end of the range is after the end of the resource.
        RequestedRangeNotSatisfiable = 416,
        //
        // Summary:
        //     Equivalent to HTTP status 417. System.Net.HttpStatusCode.ExpectationFailed indicates
        //     that an expectation given in an Expect header could not be met by the server.
        ExpectationFailed = 417,
        //
        // Summary:
        //     Equivalent to HTTP status 426. System.Net.HttpStatusCode.UpgradeRequired indicates
        //     that the client should switch to a different protocol such as TLS/1.0.
        UpgradeRequired = 426,
        //
        // Summary:
        //     Equivalent to HTTP status 500. System.Net.HttpStatusCode.InternalServerError
        //     indicates that a generic error has occurred on the server.
        InternalServerError = 500,
        //
        // Summary:
        //     Equivalent to HTTP status 501. System.Net.HttpStatusCode.NotImplemented indicates
        //     that the server does not support the requested function.
        NotImplemented = 501,
        //
        // Summary:
        //     Equivalent to HTTP status 502. System.Net.HttpStatusCode.BadGateway indicates
        //     that an intermediate proxy server received a bad response from another proxy
        //     or the origin server.
        BadGateway = 502,
        //
        // Summary:
        //     Equivalent to HTTP status 503. System.Net.HttpStatusCode.ServiceUnavailable indicates
        //     that the server is temporarily unavailable, usually due to high load or maintenance.
        ServiceUnavailable = 503,
        //
        // Summary:
        //     Equivalent to HTTP status 504. System.Net.HttpStatusCode.GatewayTimeout indicates
        //     that an intermediate proxy server timed out while waiting for a response from
        //     another proxy or the origin server.
        GatewayTimeout = 504,
        //
        // Summary:
        //     Equivalent to HTTP status 505. System.Net.HttpStatusCode.HttpVersionNotSupported
        //     indicates that the requested HTTP version is not supported by the server.
        HttpVersionNotSupported = 505
    }
}



Most data sets define relations between entities: Customers have orders; books have authors; products have
suppliers. Using OData, clients can navigate over entity relations



Relationship Between Entities  (reference)
OData supports creating or removing relationships between two existing entities. In OData v4 terminology,
 the relationship is a "reference". (In OData v3, the relationship was called a link. The protocol
 differences don't matter for this tutorial.)



A reference has its own URI, with the form /Entity/NavigationProperty/$ref. For example, here is the
URI to address the reference between a product and its supplier:


Remove navigation property Products(1)/Supplier
DELETE http://host/Products(1)/Supplier/$ref


to remove a product from the Supplier.Products
Remove navigation property  Suppliers(1)/Products for Products(1)
DELETE http://host/Suppliers(1)/Products/$ref?$id=http://host/Products(1)



TODO...

this and after
https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/supporting-odata-query-options

this and after
https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/odata-actions-and-functions

Call oData Webapi from angular






Sql Server LocalDb:
https://stackoverflow.com/questions/27197359/localdb-sql-server-2014-express-creates-2-instances-localdb-projectsv12-loc

(localdb)\MSSQLLocalDB is the SQL Server 2014/2016 LocalDB default instance name and i an "automatic instance".

You can use the sqllocaldb.exe command line tool to manage which version (2014 or 2016) owns the MSSqlLocaldb instance

And (localdb)\v11.0 is the SQL Server 2012 LocalDB default instance name


ReplaySubject Vs Subject
https://stackoverflow.com/questions/36240448/difference-between-cold-observable-and-replay-subject
https://juristr.com/blog/2016/06/rxjs-1st-steps-subject/
https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/subjects/replaysubject.md

Caching Webapi calls.
If you initialize a ReplaySubject with a cache value of 1. If the value has already been emitted, it'll be cached.
upon subscribing, the subscriber will get the cached value...

rxjs > takeuntil
https://alligator.io/angular/takeuntil-rxjs-unsubscribe/




**return all dates greater than today's month- assuming dates in utc. sorted

use chrome s console to test JSON.parse

paste json in 1 line from postman
const testaff:fgdg = JSON.parse(JSON.stringify({"id":1},{"id":2}))

let data = JSON.parse(`[{"month":"2017-06-01"},
			{"month":"2017-07-01"},
			{"month":"2017-08-01"},
			{"month":"2017-09-01"},
			{"month":"2017-10-01"},
			{"month":"2017-11-01"},
			{"month":"2017-12-01"},
			{"month":"2018-01-01"}]`);

 const testdata =
				data.filter((obj) => this.moment.utc(obj.month).isSameOrAfter(this.moment.utc().startOf('month')))
				.sort((dateA, dateB) => {
						if (this.moment.utc(dateA.month).isBefore(this.moment.utc(dateB.month))) {
							return -1;
						} else if (this.moment.utc(dateA.month).isAfter(this.moment.utc(dateB.month))) {
							return 1;
						} else {
							return 0;
						}
				});

		return testdata;


--------------------------------------------------------------------------------------------------------------------------

C:\Users\z49DXL\Documents\Anglr4Stuff\SampleNG2Apps\oDataWebApi_VS2017\ProductService\ProductService\Controllers

http://localhost:57712/Products               (Get All Products)
http://localhost:57712/Products(1)            (Get Product by Id)

http://localhost:57712/Products(1)/Supplier   (For a specific Product get related Supplier-virtual navigation property)
   public SingleResult<Supplier> GetSupplier([FromODataUri] int key)-> key is Product id

http://localhost:57712/Suppliers(1)/Products  (For a specific Supplier, get related Products- ICollection<Products)
   public IQueryable<Product> GetProducts([FromODataUri] int key) -> key is Supplier Id


convention- navigation property
// GET /Products(1)/Supplier
// Method name: GetX, where X is the navigation property


Actions & Functions:  https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-v4/odata-actions-and-functions

In OData, actions and functions are a way to add server-side behaviors that are not easily defined as CRUD operations on entities

The difference between actions and functions is that actions can have side effects, and functions do not. Both actions and functions can return data.


-------------------------------------------------------------------------------------------


In OData, actions and functions are a way to [add server-side behaviors that are not easily defined as CRUD operations on entities]
You can also have "unbound" actions/functions, which are called as static operations on the service (not targeting a single entity or a collection)

Actions***

Actions can have side effects
Actions can return data
An Action can target a single entity or a collection

Some uses for actions include:
 - Complex transactions.
 - Manipulating several entities at once.
 - Allowing updates only to certain properties of an entity.
 - Sending data that is not an entity.


Functions***
Functions do NOT have side effects
Functions can return data
A Function can target a single entity or a collection
Functions are useful for returning information that does not correspond directly to an entity or collection


You can expand more than one level of navigation property. The following example includes all the products for a category and also the supplier for each product.

GET http://localhost/odata/Categories(1)?$expand=Products/Supplier

By default, Web API limits the maximum expansion depth to 2. That prevents the client from sending complex requests like $expand=Orders/OrderDetails/Product/Supplier/Region, which might be inefficient to query and create large responses


You can also select the properties within an expanded property. The following request expands Products and selects category name plus product name.

GET http://localhost/odata/Categories?$expand=Products&$select=Name,Products/Name


 I describe the built-in OData routing conventions. These conventions are designed specifically for OData endpoints, and they replace the default Web API routing system

***Reason of using Action here...Using Action since Manipulating several entities at once.***  Entities: Region, Location, State
Use [action] if [FK table] needs to be updated (update Location.RegionId, update States.RegionId) plus Add Region first
Region
  Region Id

  FK 1 -> Location
  FK 2 -> States




-------------------------------------Functions------------------------------------

1) Function bound to a collection
    oDate.service: getFunction<T>

    http://localhost:57712/Products/ProductService.MostExpensive


 builder.EntityType<Product>().Collection  (Collection**)
  .Function("MostExpensive")
   .Returns<double>();

  Reason of using Function here: Functions are useful for returning information that does not correspond directly to an entity(db) or collection****
  return type: xxx (not entity but viewmodel)

2) Adding an Unbound Function
   The previous example was a function bound to a collection. In this next example, we'll create an unbound function. Unbound functions are
   called as static operations on the service
   //GET http://localhost:38479/GetSalesTaxRate(PostalCode=10) HTTP/1.1

---------------------------------------------------------------------------------------------------


Visual Studio Course - John Papa - PluralSight

https://app.pluralsight.com/player?course=visual-studio-code&author=john-papa&name=visual-studio-code-m8&clip=0&mode=live



Odata Resources******
OData 4: http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part2-url-conventions.html
Odata cheat sheet:  http://help.nintex.com/en-us/insight/OData/HE_CON_ODATAQueryCheatSheet.htm
https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/odata-routing-conventions
https://docs.microsoft.com/en-us/aspnet/web-api/overview/odata-support-in-aspnet-web-api/using-select-expand-and-value
http://www.odata.org/blog/support-for-any-and-all/
http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/cs01/odata-data-aggregation-ext-v4.0-cs01.html   ($apply)

Entity Framework CodeFirst
http://www.entityframeworktutorial.net/code-first/configure-one-to-many-relationship-in-code-first.aspx
https://msdn.microsoft.com/en-us/library/jj591620(v=vs.113).aspx


---------------------------------------------------------------GIT------------------------------------------------------------

TODO:

list files local and remote

Git Fundamentals:
done..  Git Fundamentals:https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m0&clip=0&mode=live
        How Git Works:    https://app.pluralsight.com/library/courses/how-git-works/table-of-contents
        Advanced Git Tips and Tricks:    (Branching) https://app.pluralsight.com/library/courses/git-advanced-tips-tricks/table-of-contents,
				   (Branching) https://app.pluralsight.com/library/courses/advanced-git/table-of-contents

Git for Visual Studio:
       https://app.pluralsight.com/library/courses/git-visual-studio-developers/table-of-contents
       https://www.visualstudio.com/en-us/docs/git/overview


git cheatsheet/reference:
https://git-scm.com/docs
https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf
https://scotch.io/bar-talk/git-cheat-sheet
https://www.git-tower.com/blog/git-cheat-sheet/

-------------------------

git status (to check status)
git log (view history)


git add -u     -  Stage modified and deleted files (not new)  -   git add file1.txt
git commit -m "Updated Read Me.txt"

view change between 2 commits
commit a-> a15ec67b...
commit b-> dd68199d...
git diff dd6819..a15ec6

'HEAD' pointer pointing to master or your branch  <-- https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell

HEAD  <----
HEAD~1 <---

git diff HEAD~1..HEAD (same as above)- difference  OR
git diff HEAD~1..


rm file2.txt (regular os system commands)
git status

git delete local and remote branches
$ git branch -d <branch_name>        (local)
$ git push -d origin <branch_name>   (remote)


------------------------------command reference----------------------------------------
https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m1&clip=8&mode=live

HEAD
You can think of the HEAD as the "current branch". When you switch branches with git checkout, the HEAD revision changes to point
to the tip of the new branch.

You can see what HEAD points to by doing:
cat .git/HEAD

PS C:\Users\z49DXL\Documents\SunocoPortal\UI> cat .git/HEAD
ref: refs/heads/UI-Bug-Fixes-Dan   (Head pointing to Local Branch)


git branch -a  (show both local and remote branches)
git status (to check status)
git log (view commit history- local repo)

git checkout BranchA -> Switches to BranchA as the working tree branch

Create Branch
git checkout -b Name  (-b creates a new branch from local branch and switches to that branch)
Vs <=> same as
git branch Name
git checkout Name

***Process for Merging LocalBranch to RemoteBranch>Origin/Master***
git pull origin master (merge remote/origin master with Local Repository)  (check status- git status or git pull origin master again)
resolve merge issues ***$TODO....
git push (push back Local Repository to Remote Respository)
create pull request while on branch (vs online) - set auto complete
pull request will [merge my LocalBranch/Dan_UI_Changes with RemoteBranch/remotes/origin/master]
after approve, complete

*** git fetch, git merge => git pull (pull from remote) ***

				   ---Pull-->
				   <--Push---
Local Branch & Remote Respository              Local Repository (VS Code). Stage/Unstage/Discard
  master
  Dan_UI_Changes  			       Dan_UI_Changes


Remote Branch
  remotes/origin/master
  remotes/origin/Dan_UI_Changes


Pluralsight course: Git Fundamentals
https://app.pluralsight.com/player?course=git-fundamentals&author=james-kovacs&name=git-fundamentals-m2&clip=10&mode=live


1) Working with local repository--(Stage, Unstage, Discard changes)

local repository UI
   git add -A                          Stage Changes. put in working copy- (add changes from all tracked and untracked files)
   git reset HEAD                      Unstage Changes  (HEAD pointing to current branch)
   git reset --hard                    Discard Unstaged Changes
   git reset --soft HEAD~1             not used often - (undo last commit to local Repository and show in staged changes)
   git reset --hard HEAD~1             not used often - (rollback last commit)
   git commit -m "Updated Read Me.txt"  Commit all staged changes

remote repository UI
   git push   (push local to remote repository)
   git pull   (pull from remote to local repository)

2) Working with remote repository-- (Push, Pull...)

   git log   (view commits)
   git log --oneline  (view commits - 1 line)
   git log --oneline --graph  (show branches and merges)
   git log --oneline --graph -all --decorate  (details - show branches and merges)

   git remote (where source came from)
   git remote -v (push and fetch urls)

   git branch    (show local branches)
   git branch -r (show remote branches)
   git branch -a (show both local and remote branches)

   git fetch, git merge => git pull (pull from remote)

tags to setup stable build points(like beta etc)
   git tag       (how tags)
   git tag v1.0   (tag a branch. last commit)
   git tag -a v1.0_with_message  (tag with message)
   git tag -s v1.0_with message (signing a tag, with password)

3) Local/Remote Branches, Merging and Rebasing

   Stash Changes that you may not want to commit right now but save for later

   Delete Branch
   git branch -d branchA
   git branch -D branchA

   Stashing Changes (half thought ideas - not ready to stage changes...
		    like shelveset. holding area for pending changes- only difference is that pending changes are rolled back in stashing
		    unlike shelveset)
   git stash   (to apply)
   git stash apply (to reapply)

   Rebasing(not used often)
   changes made in feature branch replay in master branch as if changes were made there



   git show HEAD  (last changes to HEAD)

TODO--
How Git Works:    https://app.pluralsight.com/library/courses/how-git-works/table-of-contents


somearray[
  { prop1:'sdsdf', prop2:'wwe'},
  { prop1:'gdgrf', prop2:'qed'}
]

observable.pluck can be used to extract array of prop1

Observable.from(array).pluck('PropToExtract').distinct((t: typeA) => {return t.id} )
			.subscribe((otypeA: typeA) => {
				this.someobj.push(otypeA:);
			});


--------------------------------------------------------RSJS Reference----------------------------------------

TODO...................Review All operators....(1st referring to application then others....

ResourceList:
https://www.learnrxjs.io/operators/transformation/mergemap.html
https://www.learnrxjs.io/operators/multicasting/share.html
http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/share.html
http://reactivex.io/rxjs/manual/overview.html#transformation-operators


https://github.com/Reactive-Extensions/RxJS/tree/master/doc



http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/share.html------

http://rxmarbles.com/

https://www.learnrxjs.io/operators/transformation/pluck.html
http://reactivex.io/rxjs/manual/overview.html#transformation-operators

Transformation
Rxjs flatmap Good!:  https://blog.thoughtram.io/rx/2016/08/01/exploring-rx-operators-flatmap.html
flatmap with http: http://blog.danieleghidoli.it/2016/10/22/http-rxjs-observables-angular/  (good!!)
flatmap/mergemap: scenario. need to make 2 http calls in seqeuence(wait for 1st to complete) but don't want to use subscribe and need to return the result of 2nd call (or 1st call...)****

flatmap in general/flatMap for Observables: https://blog.thoughtram.io/rx/2016/08/01/exploring-rx-operators-flatmap.html#understanding-flatmap-for-observables
instead of 2 nested subscribes, use 1 subscribe

In this case we ll have to use the flatMap RxJS operator, which is similar to the usual map RxJS operator. The difference is that lets you [chain two Observables], returning a new Observable (2 observables could just be http or could be http + subject

http call--flatmap--subject.(since subject can be an observable as well)


Filtering
flatMap/mergeMap :    flatMap is an alias for mergeMap. can use either. mergeMap is newer
https://coryrylan.com/blog/angular-multiple-http-requests-with-rxjs


when to use xx.asObservable--  https://stackoverflow.com/questions/36986548/when-to-use-asobservable-in-rxjs
when you don't want caller to use (next on the observable)


Content Projection - Ng content
https://angular.io/guide/content-projection
https://codecraft.tv/courses/angular/components/content-projection/
https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/
https://www.bitovi.com/blog/supercharged-content-projection-with-ng-template
https://www.tektutorialshub.com/angular/ng-content-content-projection-in-angular/#:~:text=Content%20projection%20is%20a%20way,template%20of%20the%20child%20component.
https://medium.com/dvt-engineering/content-projection-in-angular-c23320ba3a70
https://blog.angular-university.io/angular-ng-content/

From Projection: https://stackblitz.com/edit/forms-with-content-projection?file=src%2Fapp%2Fapp.component.html


Transformation
---map -- Apply projection with each value from source. right side may not be an observable but just a mapping function- source.map(val => val + 10);
		-->apply projection ().map(val => val + 10) OR just extract properties -- ().map(o => o.name)

---mergeMap/flatmap --  need to make 2 http calls in seqeuence(wait for 1st to complete) but don't want to use subscribe and need to return the result of 2nd call (or 		        1st call...) lets you [chain two Observables], returning a new Observable (2 observables could just be http or could be http + subject
			both sides are observables. source.mergeMap(val => Rx.Observable.of(`${val} World!`));
			merge 2 observables. both could be http calls.

---pluck --             Pluck object property
---switchMap --         Request, Cancel, Request Again(since new value)--params
   concatMap 	        Map values to inner observable, subscribe and emit in order
   groupBy              Group into observables based on provided value

Filtering
  take --               Emit provided number of values before completing. E.g. Take 1 value from source. const source = Rx.Observable.of(1,2,3,4,5);
			source.take(1);--> //take the first emitted value then complete // //output: 1
  takeWhile --          Emit values until provided expression is false.
  debounce --           Discard emitted values that take less than the specified time
  debounceTime--
  distinctUntilChanged-- Only emit when the current value is different than the last
---filter--               Emit values that pass the provided condition

Utility
--do --			Perform misc functions/side effects eg logging
  let --                Let me have the whole observable. Applying map with let
  toPromise		Convert observable to promise                         <----------------------

Multicasting (share)
  publish		Share source and make hot by calling connect.
  share                 Share source among multiple subscribers


Combination
--forkJoin 		When all observables complete emit the last value from each. make https requests and wait till all of them succeed.
  concat--		Concats Observables. Subscribe to observables in order as previous completes, emit values
--zip -- 		combines properties from different objects----
  every                 If all values pass predicate before completion emit true, else false

Creation
--from			Turn an array, promise, or iterable into an observable  <-------------------------------------
--create		create observable. Emit values on subscribe
--of			useful for creating a simple Observable that only emits the arguments given
--throw			Throw error on subscription

Error Handling
--catch			Gracefully handle errors in an observable sequence

Converting Promise to Observable
'from' operator Converts Promise to Observable

this.todoService.getTodos() returns Promise<Todo[]>

       from(this.todoService.getTodos()).pipe(
          // Take the returned value and return a new success action containing the todos
          map((todos) => loadTodosSuccess({ todos: todos })),
          // Or... if it errors return a new failure action containing the error
          catchError((error) => of(loadTodosFailure({ error })))
        )

Convert Observable to Promise
toPromise

pg 558
Services in Feature Module are available application wide:
When you use providers in a feature module, they
are registered with the root module’s injector, which means they are available throughout the application,
which is exactly what is required for the data model in the example application

A common mistake is to assume that services defined in a module are accessible only to the classes
within that module. There is no module scope in Angular. Providers defined by a feature module are used as
though they were defined by the root module. Local providers defined by directives and components in the
feature module are available to their view and content children even if they are defined in other modules.

exhaustMap (discard others until inner one completes)
https://www.youtube.com/watch?v=nh13_aPRQ0Q
https://www.youtube.com/watch?v=twT0KEheBW4

WithLatestFrom
https://www.youtube.com/watch?v=kFRU1I30Cvc&t=351s

mergemap
https://dev.to/bhagatparwinder/map-vs-mergemap-vs-switchmap-5gee
https://www.youtube.com/watch?v=3e8MJ0loNbU


Difference between   <-----------good example
mergemap(no order),
concatmap(same order),
exhaustmap (discard[not queue] until last one completes) and
switchmap- (cancel last one if not completed)

1hr 20min
https://www.youtube.com/watch?v=iWX7qCGVt9U

Recomments using concatmap if not sure  <-----
(little performance consideration)


mergemap => Deleting items

concatmap => Updating or creating items

exhaustmap => Non-parameterized queries

switchmap => Parameterized queries

-----------------------
function returns observable<class>
return http.asd()
.catch(()=> {
   return Observable.throw(err);
})

susbcribe to that observable
   next, error(Observable.throw caught here), complete
----------------------

Subject: is the equivalent to an EventEmitter  (http://reactivex.io/rxjs/manual/overview.html)
An Observer is a consumer of values delivered by an Observable
A Subject is like an Observable, but can ***multicast to many Observers***
Observables can be created with create, but usually we use the so-called creation operators, like of, from, interval, etc.


Error Handling



See other websites-- same properties--description



toArray: Creates a list from an observable sequence. create xxx[] from Observable<xxx>
https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/toarray.md


lodash: array- orderby, clonedeep (make deep copy to compare to original property), sum a property in an array, chain (original obj wont be modified)


key value
	pagesfd: { [component: string]: Someclass } = {
		'Txtsdfsdf': this.canCreatesdf,
		'Txsdf': this.termsdf,
	};

----------------------------------------


ng-template vs ng-container difference
https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/
Both of them are used to group elements together without having to introduce another element which will be rendered on the page (such as div or span)


ng-container (prefer)
<ng-container> if you need a helper element for nested structural directives like *ngIf or *ngFor or if you want to wrap more than one element inside such a structural directive;

ng-template (view snippet or template that you can use multiple places)
<ng-template> if you need a VIEW(markup) "snippet" that you want ****to stamp at various places**** using ngForTemplate, ngTemplateOutlet, or createEmbeddedView().
inject html component at various places


-------------

force angular to detect change-

ChangeDetectorRef Vs settimeout
https://github.com/angular/angular/issues/17572 - explicitly trigger change detection - (see comment -robwormald commented on Aug 18  )

https://github.com/angular/angular/issues/14748#issuecomment-307291715
https://blog.angularindepth.com/everything-you-need-to-know-about-change-detection-in-angular-8006c51d206f

----------------------------------------------------------
Async Validation (eg to check if username is taken- in combination with debounce)
https://angular.io/guide/form-validation#validator-functions

Async Validation with Reactive Forms
  https://auth0.com/blog/angular2-series-forms-and-custom-validation/

Async Validation with Template Forms
  - https://netbasal.com/angular-2-forms-create-async-validator-directive-dd3fd026cb45
  - https://dzone.com/articles/custom-validators-in-template-driven-angular-2-for
  - https://stackoverflow.com/questions/43033025/in-angular-2-how-to-setup-an-asynchronous-validator-when-using-template-driven
	http://plnkr.co/edit/6x0vNWQLQYCxd7sAIouh?p=preview

  - https://juristr.com/blog/2016/11/ng2-template-driven-form-validators/#building-a-custom-validator
  - https://stackoverflow.com/questions/36235446/angular2-template-driven-async-validator


ng-5

import { Observable } from 'rxjs/Observable'
import 'rxjs/add/operator/map'; // individual operators must now be imported
...
myObservable.map(x => x.Item);


log sql query output window VS
public SomeDbContext() : baseSomeDbContext
{
      this.Database.Log = s => Debug.WriteLine(s);
}


Error:  Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked
https://angular.io/errors/NG0100

Optimal
 Restructure/Redesign code so the error won't be triggered

Workaround
   Promise
   Use Settimeout
   Use ChangeDetectorRef


//setTimeout(() => { statement  }, 0);
Promise.resolve(null).then(() => statement);
//this.changeDetectorRef.detectChanges();



following operations performed in the specified order:

update bound properties for all child components/directives -->
call ngOnInit, OnChanges and ngDoCheck lifecycle hooks on all child components/directives
update DOM for the current component  -->
run change detection for a child component
call ngAfterViewInit lifecycle hook for all child components/directive


 Run code like this to prevent angular to run any change detection: https://blog.thoughtram.io/angular/2017/02/21/using-zones-in-angular-for-better-performance.html
 showing message should not cause angular to run change detection
 this.ngZone.run(() =>  this.messageService
            .reportMessage(new Message(msg, true)), 0);


IMP***********************************
Use EventEmitter in components and directives  (to raise and catch events)
Use Subject in Services
https://angular.io/api/core/EventEmitter
https://stackoverflow.com/questions/36076700/what-is-the-proper-use-of-an-eventemitter
https://stackoverflow.com/questions/40238549/angular-2-event-emitters-vs-subject


to returning lists (HttpGet- return Iqueryable<concreteclass>)
return type concrete class Iqueryable
  keep [EnableQuery]. UI end check if no entry or not

to return 1 concrete class (HttpGet- return SingleResult<concreteclass>)
return type concrete class SingleResult
  take out [EnableQuery]. if wanna return null




***FormControl, FormGroupand FormArray***

Nested Parent>Child Reactive Form- connecting child form to parent
https://stackoverflow.com/questions/40172270/angular-2-form-containing-child-component
https://toddmotto.com/component-architecture-reactive-forms-angular
(download source code- nested components- reactive form- pass down formgroup) - good example- source code
https://alligator.io/angular/reactive-forms-formarray-dynamic-fields/  (good)


1) Template Forms********

<form #myForm="ngForm"

myForm is an instance of ngForm directive
    ngForm builds a form model by reading the HTML template

myForm.form is an instance of FormGroup
For each element with a NgModel directive, Angular creates a FormControl
All these FormControls are added to the parent FormGroup

with template-driven forms we declare our form model by writing plain-old-fashioned HTML forms and let Angular create a form model out of the DOM


2) Reactive Forms********

in reactive forms we write that form model in code and then bind instances of FormGroup and FormControl into the DOM



Nested Reactive Forms: https://medium.com/spektrakel-blog/angular2-building-nested-reactive-forms-7978ecd145e4




<form [formGroup]="myForm"
   <items-array
 formArrayName="items" [itemsFormArray]="myForm.get('items')">
 </items-array>


<input type="submit" class="form-control" value="Submit" [disabled]="myForm?.invalid">



   myForm: FormGroup;
   this.myForm = this.fb.group({
items: ItemsFormArrayComponent.buildItems()})  //FormGroup has FormArray with Validation on FormGroup


  static buildItems() {
   FormArray has list of FormGroups
	return new FormArray([
ItemFormControlComponent.buildItem('aaa'),
 ItemFormControlComponent.buildItem('')],  ItemsValidators.minQuantitySum(300))
  }


  static buildItem(val: string) {
   FormGroups has FormControls with Validation with it
         return new FormGroup({name: new FormControl(val, Validators.required),
 quantity: new FormControl(100)
})
  }



  FormGroup
      FormArray
	 ([
	      FormGroup   [name FormControl with Validation, quantity FormControl with Validation ]
	      FormGroup   [name FormControl with Validation, quantity FormControl with Validation ]

          ]
           Validation on Form Array Items
	  )


Validations
  https://angular.io/api/forms/Validators


NgTemplateOutlet Directive
Purpose: Repeat a template with binding in the "same html" multiple times (using different data). If we're going to re-use in different html,
         then create a component

https://angular.io/api/common/NgTemplateOutlet


dynamic imports: https://netbasal.com/using-typescript-dynamic-imports-in-angular-d210547484dd


***search in sproc or function for a text***
SELECT [Scehma]=schema_name(o.schema_id), o.Name, o.type
FROM sys.sql_modules m
INNER JOIN sys.objects o
ON o.object_id = m.object_id
WHERE m.definition like '%BarsUsers%'

conditionally disable anchor tag: https://stackoverflow.com/questions/35431188/how-can-i-conditionally-disable-the-routerlink-attribute


Cross apply (used for table valued functions--) Vs Inner Join
https://www.mssqltips.com/sqlservertip/1958/sql-server-cross-apply-and-outer-apply/


$any type cast

Sometimes a binding expression will be reported as a type error and it is not possible or difficult to fully specify the type. To silence the error, you can use the $any cast function to cast the expression to the any type.

<div>
  The hero's marker is {{$any(hero).marker}}
</div>

global styles are stored under styles.css


View encapsulation
As discussed earlier, component CSS styles are encapsulated into the component's view and don't affect the rest of the application.


Emulated view encapsulation (the default)

under shared
custom orderby, filterby & groupby pipes
no orderby, filterby & groupby pipes in angular 2
create custom orderby pipe. in custom pipe use orderby from lodash
create custom filterby pipe. in custom pipe make use of lodash. make sure in html dont add/remove any items. if do will need to mark pipe as impure(else html wont be updated). default pure
create custom groupby pipe. in custom pipe make use of lodash.


Template Forms
have to use name attribute with ngmodel
Defining a name attribute is a requirement when using [(ngModel)] in combination with a form.
Any unique value will do, but using a descriptive name is helpful. . name same as the class.property name to whcih its bound

TemplateForm- FormsModule  (ngModel)
ReactiveForm - ReactiveFormsModule (FormControlName)

Reactive forms are synchronous, and template-driven forms are asynchronous.


private cdr: ChangeDetectorRef
this.cdr.detectChanges();  -Manually trigger Change Detection- not recommended though- change code

Vs

setTimeout

Observable.of(...items) Returns an Observable instance that synchronously delivers the values provided as arguments.
Observable.from(iterable) Converts its argument to an Observable instance. This method is commonly used to convert an array to an observable.

he AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.

<code>observable|async</code>:


BrowserModule imports CommonModule, which contributes many common directives such as ngIf and ngFor. Additionally, BrowserModule re-exports CommonModule making all of its directives available to any module that imports BrowserModule.


Beginning with Angular 6.0, the preferred way to create a singleton services is to specify on the service that it should be provided in the application root. This is done by setting providedIn to root on the service's @Injectable decorator:
https://angular.io/guide/singleton-services#providing-a-singleton-service

he forRoot() static method is a convention that makes it easy for developers to configure services and providers that are intended to be singletons. A good example of forRoot() is the RouterModule.forRoot() method.

@Injectable({
  providedIn: 'root',
})
export class HeroService {
  constructor() { }
}


providedIn tells Angular that the root injector is responsible for creating an instance of the HeroService (by invoking its constructor) and making it available across the application


The 30 CSS Selectors You Must Memorize
CSS selectors
https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048

Get and Set.
class MyClass {
constructor(name, weather) {
this.name = name;
this._weather = weather;
}
set weather(value) {
this._weather = value;
}
get weather() {
return `Today is ${this._weather}`;
}
printMessages() {
console.log("Hello " + this.name + ". ");
console.log(this.weather);
}
}
let myData = new MyClass("Adam", "sunny");
myData.printMessages();


in typescript - Ref: https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords/
class TestClass {
  public name: string;

  constructor(name: string) {
    this.name = name;
  }
}

same as

class TestClass {
  constructor(public name: string) { }
}


 The Angular Ahead-of-Time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code

The forRoot is a static method and it helps to configure the modules. For example, RouterModule.forRoot.

https://www.javapedia.net/Angular2-basics/2061
The RouterModule also has forChild method, static method used to configure the routes of lazy-loaded modules. The forRoot and forChild are the traditional names for methods that configure services in root.


What is the difference between RouterModule.forRoot() vs RouterModule.forChild()? Why is it important?

A: forRoot is a convention for configuring app-wide Router service with routes, whereas forChild is for configuring the routes of lazy-loaded modules.

You can use ViewChild to get the "first element" or the directive matching the selector from the view DOM

What are the advantages of Angular 2 over Angular 1
Better performance because of these reasons

Better change detection.
Ahead of Time compilation (AOT) improves rendering speed.
Lazy Loading.
TypeScript can be used for developing Angular 2 applications.
Better syntax and application structure.

performance
Consider AOT compilation.
2.         Consider lazy loading instead of fully bundled app if the app size is more.

css difference between + and > operator
https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048
https://www.toptal.com/css/interview-questions

webapi
SelectMany flattens queries that return lists of lists
https://stackoverflow.com/questions/958949/difference-between-select-and-selectmany


linq

first(throws exception if not found) vs firstordefault
https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/supported-and-unsupported-linq-methods-linq-to-entities


Single Vs SingleOrDefault(throws exception if multiple)



 difference between Interface and Abstract Class
https://www.c-sharpcorner.com/UploadFile/8ef97c/C-Sharp-net-interview-questions-and-answers/


sql server joins
https://www.codeproject.com/Articles/33052/Visual-Representation-of-SQL-Joins



Pro TypeScript - Chapter 3 - Object Orientation in Typescript  - Design Patterns - Pro Typescript - pg 62

The concepts are normally modelled as classes, with
properties => for the data and
methods    => for the behavior

Robert C. Martin said well-written,  polite  code was like reading a newspaper. You could scan the higher level code in the
program as if they were headlines.


--------------------------------Open Recursion----------------------------

Open recursion is a combination of recursion and late binding. When a method calls itself within a class, that call can
be forwarded to a replacement defined in a subclass.

Typescript
Super Class -> Base class
Sub Class   -> Derived class

When a method calls itself within a super class(base class), that call can be forwarded to a replacement defined in a subclass(derived class).


class FileReader {
   getFiles(path: string, depth: number = 0) {
      var fileTree = [];
      ...
      this.getFiles(file, (depth + 1))     --> calls LimitedFileReader.getFiles() Subclass/Derived class !!!! since called from LimitedFileReader instance. If called from FileReader instance
					       the call would go to FileReader.getFiles
   }
}



class LimitedFileReader extends FileReader {
   constructor(public maxDepth: number) {
    super();
   }

   getFiles(path: string, depth = 0) {
      if (depth > this.maxDepth) {
         return [];
      }
      return super.getFiles(path, depth);  --> calls super class
    }
}

var fileReader = new LimitedFileReader(1);
var files = fileReader.getFiles('path');

The beauty of open recursion is that the original class remains unchanged and needs no knowledge of the
specialization offered by the subclass.


--------------------------------Encapsulation----------------------------

Encapsulation = data hiding

A class instance can contain both properties and methods that operate on those properties; this is the encapsulation of data and behavior

Hide the property from outside world by marking it as private. Use methods to update or get access to it so outside world can't accidently change it

class Totalizer {
  private total = 0;
  private taxRateFactor = 0.2;   <--property

  addDonation(amount: number) {  <--method
    update total property using
  }

  getAmountRaised() {
    return this.total;
  }
}


--------------------------------Delegation----------------------------

One of the most important concepts in terms of re-use in your program is delegation.

If it fails a "is a" test. No inheritance. Then you can use Delegation.

WrapperClass would call DelegateClass, passing the keyword this as an argument. DelegateClass can then call methods on WrapperClass. This allows the wrapper and delegate
to behave as a subclass and superclass

A  has a  relationship requires delegation (or forwarding), not inheritance.

A Car has a Chassis -> Composition. Need to use Delegation
A Cat is a Mammal  -> Inheritance


The only job of an interface in TypeScript is to describe a type.
Therefore you can do something like the following

interface Sensor {   --> Stating that Sensor type has check() method. A class that has a check() method can be passed into a parameter accepting Sensor Type
   check(): any;
}

private sensors: Sensor[] = [];   <--declare type Sensor which should have a check() method

interface ControlPanel {          <-- declare type ControlPanel which should have a check() method
  startAlarm(message: string): any;
}

class HeatSensor {

  constructor(private controlPanel: ControlPanel) {    <--controlPanel should have a startAlarm() method per Interface
  }

  check() {
	this.controlPanel.startAlarm('Overheating!');
  }
}


class MasterControlPanel {
  private sensors: Sensor[] = [];      <-- sensor should have a check() method per Interface

  constructor() {
   // Instantiating the delegate HeatSensor
   this.sensors.push(new HeatSensor(this));   <-- this is MasterControlPanel which has a startAlart method
  }

  startAlarm(message: string) {
    console.log('Alarm! ' + message);
  }
}

**Specify Interface as a parameter (which declares which methods it should have) but then pass a class to it (which implements those methods)****
also referred to as a The Dependency Inversion Principle (DIP) pg 76



--------------------------------Polymorphism----------------------------


interface Vehicle {
  moveTo(x: number, y: number);
}

class Car implements Vehicle {
  moveTo(x: number, y: number) {
    console.log('Driving to ' + x + ' ' + y);
 }
}

class SportsCar extends Car {
}

class Airplane {
  moveTo(x: number, y: number) {
    console.log('Flying to ' + x + ' ' + y);
  }
}

--we can pass Airplane here or SportsCar
function navigate(vehicle: Vehicle) {     <--polymorphism- The navigate function accepts any type compatible with the Vehicle interface. Specifically, this means any class
						or object that has a method named moveTo that accepts up to two arguments of type number.
   vehicle.moveTo(59.9436499, 10.7167959);
}


var airplane = new Airplane();
navigate(airplane);   <-- ok even though Airplane does not implment interface Vehicle. Since Airplane also has moveTo function it'll be accepted in the Vehicle parameter

var car = new SportsCar();
navigate(car);






--------------------------------Typescript- SOLID principles----------------------------

In general, the principles provide guidance for creating readable and maintainable code.


1) The Single Responsibility Principle (SRP) ******************************************************

A class should have one, and only one, reason to change.

When designing your classes, you should aim to put related features together, ensuring that they are likely to change for the same reason, and keep features apart if
they will change for different reasons.

E.g.

Wrong**
class Movie {
  private db: DataBase;

  constructor(private title: string, private year: number) {
    this.db = DataBase.connect('user:pw@mydb', ['movies']);
  }

   save() {
     this.db.movies.save({ title: this.title, year: this.year });
    }
}


Movie class as an object that defines the data structure merged with Movie Repository which provides the persistence logic.
Movie class should just do 1 thing- i.e. declare/define the data structure
Movie Repository should just do 1 thing- i.e. define the DB Persistence Logic

Therefore if we want to make chages to Movie class data structure it won't impact Movie Repository. and if we want to change
the Movie Repository persistence logic then we won't have to change the Movie class.

Movie class and Movie Repository have a Single Responsibility


class Movie {
  constructor(private title: string, private year: number) {
  }
}

class MovieRepository {
 private db: DataBase;

  constructor() {
   this.db = DataBase.connect('user:pw@mydb', ['movies']);
  }

  save(movie: Movie) {
    this.db.movies.save(JSON.stringify(movie));
  }
}

//or you can inject MovieRepository into Movie class
// Movie
var movie = new Movie('The Internship', 2013);
// MovieRepository
var movieRepository = new MovieRepository();
movieRepository.save(movie);

Keep on eye on Class level Responsibilities. Make sure they have Single Responsibility



2) The Open Closed Principle (OCP)    ******************************************************

Software entities should be open for extension but closed for modification.

If RewardPointsCalculator logic will be the same for all classes

class RewardPointsCalculator {
   getPoints(transactionValue: number) {
    // 4 points per whole dollar spent
    return Math.floor(transactionValue) * 4;
   }
}

class DoublePointsCalculator extends RewardPointsCalculator {
  getPoints(transactionValue: number) {
								<--Can put in adiditional logic here before calling base class
    var standardPoints = super.getPoints(transactionValue);     <---call super class
    return standardPoints * 2;
  }
}



3) The Liskov Substitution Principle (LSP)   ******************************************************

The essence of this is that if you substitute a subclass(derived class) for a superclass(base class), the code that uses the class(calling code) shouldn t need
to know that the substitution has taken place.

Shape s = new Rectangle(10, 4);  -- substituted Rectangle for Shape. s Reference shouldn't care


We must make sure that the ****new derived classes just extend without replacing the functionality of old classes****. Otherwise the new classes can produce undesired effects when
they are used in existing program modules.

/ Violation of Likov's Substitution Principle
class Rectangle
{
	protected int m_width;
	protected int m_height;

	public void setWidth(int width){
		m_width = width;
	}

	public void setHeight(int height){
		m_height = height;
	}

	public int getArea(){
		return m_width * m_height;
	}
}

class Square extends Rectangle    (Square is not a Rectangle!. No is a )
{
	public void setWidth(int width){   <--wrong replacing functionality of old class
		m_width = width;
		m_height = width;
	}

	public void setHeight(int height){
		m_width = height;
		m_height = height;
	}

}

Rectangle r = new Square();
r.setWidth(5);
r.setHeight(10);   //setting Square's Height & Width to 10. Even though the Reference is of a Rectangle

var area = r.getArea()
// now he's surprised to see that the area is 100 instead of 50.

https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle
https://www.infragistics.com/community/blogs/b/dhananjay_kumar/posts/simplifying-the-liskov-substitution-principle-of-solid-in-c
https://www.oodesign.com/liskov-s-substitution-principle.html


Correct Way


abstract class Shape
{
   length: number;
   width: number;
   getArea(): number {
      return length * width;
   }
}


class Square extends Shape
{
    constructor(sides: number){
	this.length = sides;
	this.width = sides;
    }
}


class Rectangle extends Shape
{
    constructor(length: number, width: number){
	this.length = length;
	this.width = width;
    }
}

Shape s = new Rectangle(10, 4);     -- s.getArea()   should return  40
Shape s  = new Square(10);	    -- s.getArea()   should return  100

r.getArea()   should return



4) The Interface Segregation Principle (ISP)   ******************************************************

Interface should not have a lot of functions (no big interface). Rather we should have several interfaces so that classes can implement them as needed,

The ISP states that we should not create these big interfaces, but instead write a series of smaller, more specific,
interfaces that are implemented by the class

interface Printer {
   copyDocument();
   printDocument(document: Document);
   stapleDocument(document: Document, tray: number);
}

interface Printer {
   printDocument(document: Document);
}

interface Stapler {
  stapleDocument(document: Document, tray: number);
}

interface Copier {
  copyDocument();
}

class SimplePrinter implements Printer {
  printDocument(document: Document) {
  //...
  }
}

class SuperPrinter implements Printer, Stapler, Copier {
  printDocument(document: Document) {
  //...
}





5)The Dependency Inversion Principle (DIP)   ******************************************************

The DIP simply states that high-level modules shouldn t depend on low-level components, but instead depend
on an abstraction. *****You can satisfy the DIP by depending on an interface (eg on a parameter), rather than a class.******

interface LightSource {   --> specify that type LightSource has 2 methods: switchOn & switchOff
  switchOn();
  switchOff();
}

class Light implements LightSource {  --> class Light implementing LightSource interface
  switchOn() {
   //...
  }
  switchOff() {
   //...
  }
}

class LightSwitch {
  private isOn = false;
  constructor(private light: LightSource) {   <--specify interface. not a class. implying whatever class instance you pass in must implement switchOn & switchOff methods.
   }

  onPress() {
    this.light.switchOff();
  }


new LightSwitch(new Light());



pg 77 - Design Patterns....

In software, design patterns provide a catalog of known problems along with a design solution for each problem
described.

The definitive source for the most common design patterns is the original  Gang of Four  book


Abstract factory pattern **

Class does not have dependency on concrete classes

constructor parameter is an Interface that has 2 methods. Concrete classes get passed to theis constructor whoever implements this interface
constructor(private cleaningFactory: ValetFactory) {

interface ValetFactory {
  getWheelCleaning() : WheelCleaning;
  getBodyCleaning() : BodyCleaning;
}


Mixins  (skim)
combine classes


css-
Can you describe the rules around specificity

What that means is which rules override others simply by being *more specific*.

The following list displays the order of specificity, from low to high:

1) Type selectors (e.g. h1) and pseudo-elements (e.g. ::before)
2) Class selectors (e.g. .nav-item), attributes selectors (e.g. [type="radio"]) and pseudo-classes (e.g. :hover)
3) ID selectors (e.g. #example)   More specific will override 2 & 3


https://www.goskills.com/Development/Articles/CSS-interview-questions-answers

What !important does, is make that particular style have the highest specificity possible. Nothing else can override it, apart from another !important

em - relative font size - by default 1em = 16px
Defining your font sizes in em allows you to change the size of your text based on the size defined at a higher level

em vs rem

Defining your font sizes in em allows you to change the size of your text based on the size defined at a higher level. For example, if a container has specified a font-size of 2em, and you specify a font-size of 2em on an element inside that container, that element has an effective font-size of 4em! However, this can be a little confusing as you might not always see the size you expect!

.container {
    font-size: 2em;
}

.container > p {
    font-size: 2em; /* this is 2em x 2em = 4em! */
}

The rem unit was created to remedy that confusion. It scales well in the browser, just like em and px, but it uses a base size. From that, all further rem values are calculated. For example, if your base rem value is equal to 16px, then 1rem will always be equal to 16px, 2rem will always be equal to 32px, and so on.

em is relative to size defined at a higher level
rem is always relative to the base size (e.g. base rem value is equal to 16px)



https://www.sitepoint.com/what-is-this-in-javascript/
In JavaScript,  this  normally refers to the object which  owns  the method, but it depends on how a function is called.

typescript
/// <reference path="..." />
Triple-slash references instruct the compiler to include additional files in the compilation process.


TakeUntil used for unsubscribing from multiple subscriptions
https://alligator.io/angular/takeuntil-rxjs-unsubscribe/




string:
Count number of characters in a string*******
   int count = test.Split('&').Length - 1;
   test.Count(x => x == '&');

Reverse a string*********

	    String reverse = "";

	    Console.WriteLine("Enter the string to reverse :");
            string name = Console.ReadLine();

            char[] cArray = name.ToCharArray();
            string nameReverse = String.Empty;

            for (int i = cArray.Length - 1; i > -1; i--)
            {
                nameReverse += cArray[i];
            }

            Console.WriteLine(nameReverse);



Search all occurences of a string within a substring*****
https://msdn.microsoft.com/en-us/library/7cct0x33(v=vs.110).aspx

string strSource = "This is the string which we will perform the search on";
string strTarget = "";

int found = 0;

for (int i = 0; i < strSource.Length; i++) {

  found = strSource.IndexOf(strTarget, i);

  if (found >= 0) {
      totFinds++;
      i = found;
  }
  else
    break;
  }


/* 	getAllCalls() {
			this.callInProgress = true;
			this.dataTempService.getCalls().subscribe(
				(data) => {

				 setTimeout(() => {
						this.allCalls = data;
						this.callInProgress = false;

					}, 5000);

					this.allCalls = data;
					this.callInProgress = false;
				},
				(err) => this.callInProgress = false
		);
	} */






PrimeNG:
Forum- https://forum.primefaces.org/viewtopic.php?f=35&t=56929
New P-table (legacy was DataTable)
Source Code- https://github.com/primefaces/primeng/blob/master/src/app/components/table/table.ts
Examples- https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table
Github - https://github.com/primefaces/primeng/issues?q=rowsPerPageOptions+sort%3Acomments-desc

grid css: https://github.com/primefaces/primeng/blob/master/src/app/components/grid/grid.css

https://forum.primefaces.org/viewtopic.php?t=47357

ui-g-12 ui-md-6 ui-lg-3   (ui-g-* primefaces overrides for mobile layout)

-----------------------------------------------------------------------------Angular 7----------------------------------------------------------

1 of 3 - *package.json*

{
  "name": "ng7-project",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~7.1.0",
    "@angular/cdk": "^7.1.0",
    "@angular/common": "~7.1.0",
    "@angular/compiler": "~7.1.0",
    "@angular/core": "^7.1.0",
    "@angular/forms": "~7.1.0",
    "@angular/http": "^7.1.0",
    "@angular/material": "^7.1.0",
    "@angular/platform-browser": "~7.1.0",
    "@angular/platform-browser-dynamic": "~7.1.0",
    "@angular/router": "~7.1.0",
    "@fortawesome/fontawesome-free": "^5.6.3",
    "@ng-bootstrap/ng-bootstrap": "^4.0.1",
    "bootstrap": "^4.2.1",
    "classlist.js": "^1.1.20150312",
    "core-js": "^2.5.4",
    "jquery": "^3.3.1",
    "loaders.css": "^0.1.2",
    "lodash": "^4.17.11",
    "moment": "^2.23.0",
    "popper.js": "^1.14.6",
    "primeflex": "^1.0.0-rc.1",
    "primeicons": "^1.0.0",
    "primeng": "^7.0.0",
    "rxjs": "~6.3.3",
    "toastr": "^2.1.4",
    "tslib": "^1.9.0",
    "web-animations-js": "^2.3.1",
    "zone.js": "~0.8.26"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.11.0",
    "@angular/cli": "~7.1.4",
    "@angular/compiler-cli": "~7.1.0",
    "@angular/language-service": "~7.1.0",
    "@types/node": "~8.9.4",
    "@types/jasmine": "~2.8.8",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "~4.5.0",
    "jasmine-core": "~2.99.1",
    "jasmine-spec-reporter": "~4.2.1",
    "json-server": "0.14.0",
    "jsonwebtoken": "8.3.0",
    "karma": "~3.1.1",
    "karma-chrome-launcher": "~2.2.0",
    "karma-coverage-istanbul-reporter": "~2.0.1",
    "karma-jasmine": "~1.1.2",
    "karma-jasmine-html-reporter": "^0.2.2",
    "protractor": "~5.4.0",
    "ts-node": "~7.0.0",
    "tslint": "~5.11.0",
    "typescript": "~3.1.6"
  }
}

2 of 3 - *angular.json*

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "NG7-Project": {
      "root": "",
      "sourceRoot": "src",
      "projectType": "application",
      "prefix": "app",
      "schematics": {},
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/NG7-Project",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "src/tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets",
			  "src/web.config"
            ],
            "styles": [
				"src/styles.css",
				"node_modules/bootstrap/dist/css/bootstrap.min.css",
				 "node_modules/@fortawesome/fontawesome-free/css/all.min.css",
				 "node_modules/primeicons/primeicons.css",
				 "node_modules/primeng/resources/themes/nova-light/theme.css",
				 "node_modules/primeng/resources/primeng.min.css",
				 "node_modules/primeflex/primeflex.css",
				 "node_modules/toastr/build/toastr.min.css",
				 "node_modules/loaders.css/loaders.min.css"
            ],
            "scripts": [
				"node_modules/jquery/dist/jquery.min.js",
				"node_modules/popper.js/dist/umd/popper.min.js",
				"node_modules/bootstrap/dist/js/bootstrap.min.js",
				"node_modules/moment/min/moment.min.js",
				"node_modules/toastr/build/toastr.min.js",
				"node_modules/lodash/lodash.min.js"
			]
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "extractCss": true,
              "namedChunks": false,
              "aot": true,
              "extractLicenses": true,
              "vendorChunk": false,
              "buildOptimizer": true,
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "5mb"
                }
              ]
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "NG7-Project:build"
          },
          "configurations": {
            "production": {
              "browserTarget": "NG7-Project:build:production"
            }
          }
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "NG7-Project:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "src/tsconfig.spec.json",
            "karmaConfig": "src/karma.conf.js",
            "styles": [
              "src/styles.css"
            ],
            "scripts": [],
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ]
          }
        },
        "lint": {
          "builder": "@angular-devkit/build-angular:tslint",
          "options": {
            "tsConfig": [
              "src/tsconfig.app.json",
              "src/tsconfig.spec.json"
            ],
            "exclude": [
              "**/node_modules/**"
            ]
          }
        }
      }
    },
    "NG7-Project-e2e": {
      "root": "e2e/",
      "projectType": "application",
      "prefix": "",
      "architect": {
        "e2e": {
          "builder": "@angular-devkit/build-angular:protractor",
          "options": {
            "protractorConfig": "e2e/protractor.conf.js",
            "devServerTarget": "NG7-Project:serve"
          },
          "configurations": {
            "production": {
              "devServerTarget": "NG7-Project:serve:production"
            }
          }
        },
        "lint": {
          "builder": "@angular-devkit/build-angular:tslint",
          "options": {
            "tsConfig": "e2e/tsconfig.e2e.json",
            "exclude": [
              "**/node_modules/**"
            ]
          }
        }
      }
    }
  },
  "defaultProject": "NG7-Project"
}


3 of 3 - *styles.css*

@import '~@angular/material/prebuilt-themes/indigo-pink.css';

/* You can add global styles to this file, and also import other style files */

html {
  position: relative;
  min-height: 100%;
}


scroll to id via javascript (in a scrollbar)
scrollIntoView - js
https://levelup.gitconnected.com/reactive-form-validation-with-smooth-scrolling-to-errors-in-angular-8-57fa63b2689d
https://www.w3schools.com/jsref/met_element_scrollintoview.asp
https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_element_scrollintoview

--------------------------------------------------------------------------

typescript method overriding
https://www.tutorialkart.com/typescript/typescript-method-overriding/
https://tutorials4sharepoint.wordpress.com/2018/12/21/method-overriding-in-typescript/

inheritance in angular services
https://softwareengineering.stackexchange.com/questions/371549/making-all-angular-services-extend-a-single-base-service
https://stackblitz.com/edit/angular-service-inheritance?file=src%2Fapp%2Fanimal.service.ts


***app.component.ts***
import { Component, OnInit } from '@angular/core';
import { DogService } from './animal.service';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {

  text: String;

  constructor(private dogService: DogService) { }

  ngOnInit() {
    this.text = this.dogService.move();
  }
}

***animal.service.ts***
import { Injectable } from '@angular/core'

@Injectable({providedIn: 'root'})
export abstract class AnimalService {
  constructor() { }
  move(): any {
    return 'move parent';
  }
}

@Injectable({providedIn: 'root'})
export class DogService extends AnimalService {

  constructor() {
    super();
  }

  move(): any {
    return 'move child';
  }
}



Python Environments Info

Conda: cheatsheet: https://docs.conda.io/projects/conda/en/4.6.0/_downloads/52a95608c49671267e40c689e0bc00ca/conda-cheatsheet.pdf

Anaconda environment reference:
https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html

How to export existing python environment to a yaml file
To export an existing python environment, execute the following command on Anaconda prompt.

conda create --name conceptselection_jingbo_duplicate --clone conceptselection_jingbo

This command will clone environment  conceptselection_jingbo  and export a yaml file 'conceptselection_jingbo_duplicate' duplicating the 'conceptselection_jingbo' environment, Then you can use 'conceptselection_jingbo_duplicate.yml' yaml file to recreate  conceptselection_jingbo  elsewhere for instance on a different computer.

How to import and create an environment based on a yaml file
Before proceeding, please make sure your environment.yml file is in correct format per below.

test.yaml
name: Dans_environment
channels:
   - anaconda
   - conda forge
dependencies
  -
  -
  - pip:  (extract this pip section & put in a seperate requirements.txt file
      -
      -
prefix: C:\Users\danial.lokman\AppData\Local\Continuum\anaconda3\envs\Dans_environment


requirements.txt (txt file sample contents)
attrs==19.1.0
backcall==0.1.0
bleach==3.1.0
cffi==1.12.3

Make sure C:\Users\xxx specifies your name plus the same name is used in the path as is used on top. See red boxes below

Steps to recreate Leanne's environment
conda create -n conceptselection_leanne python=3.6.4 anaconda      (create base python 3.6.4 environment)
conda activate conceptselection_leanne                           (activate the environment)
conda env update --file environment.yml                          (update the environment with the leanne's yaml file)
pip install -r requirements.txt                                      (extract all pip section from yaml file to
     requirements.txt and install separately. Currently its
     embedded within yaml file)

Dev Server specific instructions
On dev server (if behind proxy), you have to modify the pip install command as follows:
pip install --proxy http://proxy-eu.xxx.com:8080 -r requirements.txt

Steps to recreate Leanne's environment on Dev Server
conda create -n conceptselection_leanne python=3.6.4 anaconda     (create base python 3.6.4 environment)
conda activate conceptselection_leanne
conda env update --file environment.yml                          (update the environment with the leanne's yaml file)
pip install --proxy http://proxy-eu.xxx.com:8080 -r requirements.txt  (extract all pip section from yaml file to
                                                                                                                               requirements.txt and install separately.
                Currently its embedded within yaml
               file)


Using pip install modulename from anaconda command prompt will install the modules under
C:\Users\xxxx\AppData\Local\Continuum\anaconda3\Lib\site-packages



-----------------------------------------------------------------Azure DevOps--------------------------------------------------


Azure Boards:
Just start out with 1 area
Iterations: Sprint 1- sprint 50

Default Git repository and branch permissions:
https://learn.microsoft.com/en-us/azure/devops/organizations/security/default-git-permissions?bc=%2Fazure%2Fdevops%2Frepos%2Fbreadcrumb%2Ftoc.json&toc=%2Fazure%2Fdevops%2Frepos%2Ftoc.json&view=azure-devops

Permissions:
https://learn.microsoft.com/en-us/azure/devops/boards/get-started/permissions-access-boards?view=azure-devops

Use contributors access for team members

*****Branching*****

feature/feature1  <-- if needed
users/user        <-- if needed

develop  checkins here. Create PR to merge back to main branch.

main   (always production ready) - lock the main branch once its ready to be merged with dev, uat or prod branch. unlock after deployment so developers can merge again

release/dev
       /uat
       /prod

Azure Features: https://learn.microsoft.com/en-us/azure/devops/user-guide/services?view=azure-devops
Docs: https://learn.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops


Azure Devops Organization:
danlokman


Repos:
https://www.youtube.com/watch?v=-mlpJbPS_H0


Azure Boards:
https://learn.microsoft.com/en-us/azure/devops/boards/get-started/what-is-azure-boards?view=azure-devops

Bug

Epic
  Feature
    Product Backlog Item
      Task
Impediment

(No User Story - Used Scrum defaults)


Azure DevOps Work Items explained:
https://wiliammbr.com/azure-devops-work-items-explained/

Example:
https://learn.microsoft.com/en-us/azure/devops/boards/get-started/plan-track-work?view=azure-devops&tabs=scrum-process

Scrum Process Guidelines

Create Backlog
Prioritize Backlog
Estimate Work
Assign Work

https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/scrum-process?view=azure-devops



Scrum Process
  Epic  (days/months)
    --Feature  (days/weeks)
          --Product Backlog Item (days)           Bug
               --Task                              --Task

  Impediment  (Hinderence/Obstruction) - This will be the option your team should go for when they find an obstacle to accomplish a task

----> We recommend you start by adding product backlog items. If you need to group them into a hierarchy, you can define features


A sprint cadence can vary between one week to four weeks or longer. E.g. 2 weeks

Sprint 1
    --Product Backlog Item (days)           Bug
         --Task 1			      --Task
         --Task 2

Product Backlog Item complete within a Sprint.
Features to be completed within a sprint or several sprints
Epics to be delivered quarterly or to some milestone objective


Project managers manage the Features and the development team manages the PBI

Features backlog: https://learn.microsoft.com/en-us/azure/devops/boards/best-practices-agile-project-management?view=azure-devops&tabs=scrum-process#features-backlog
Project managers initiate the product plan by adding features to the Features backlog. Each feature should represent a shippable deliverable that addresses a customer need.

Order the features backlog in priority order

Priority: https://learn.microsoft.com/en-us/azure/devops/boards/get-started/plan-track-work?view=azure-devops&tabs=scrum-process#field-descriptions

1- Highest Priority
4- Lowest Priority


PBI workflow: https://learn.microsoft.com/en-us/azure/devops/boards/get-started/plan-track-work?view=azure-devops&tabs=scrum-process#update-work-status
New -> Approved (by Product Owner) -> Committed (Committed by Team)- > Done

https://learn.microsoft.com/en-us/azure/devops/boards/get-started/plan-track-work?view=azure-devops&tabs=scrum-process#field-descriptions-1
Remaining Work: in hours

Members of the Project Administrators group can add users to a project. Adding users to a team or project automatically adds them to the project's Contributors group.

Ticket States: https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process?view=azure-devops&tabs=agile-process

Work Item Reference: https://learn.microsoft.com/en-us/azure/devops/boards/work-items/about-work-items?view=azure-devops&tabs=agile-process#work-item-form

AreaPaths: https://learn.microsoft.com/en-us/azure/devops/organizations/settings/set-area-paths?toc=%2Fazure%2Fdevops%2Fboards%2Ftoc.json&bc=%2Fazure%2Fdevops%2Fboards%2Fbreadcrumb%2Ftoc.json&view=azure-devops&tabs=browser
Iterations: https://learn.microsoft.com/en-us/azure/devops/organizations/settings/set-iteration-paths-sprints?toc=%2Fazure%2Fdevops%2Fboards%2Ftoc.json&bc=%2Fazure%2Fdevops%2Fboards%2Fbreadcrumb%2Ftoc.json&view=azure-devops&tabs=browser


difference between areas and iterations: https://learn.microsoft.com/en-us/azure/devops/organizations/settings/about-areas-iterations?view=azure-devops
Area paths allow you to group work items by team, product, or feature area. Iteration paths allow you to group work into sprints, milestones, or other event-specific or time-related period. Both these fields allow you to define a hierarchy of paths.


Area:

Sprint should be between 1 and 4 weeks. Set to 2 weeks.

Release 1   Area
  sprint 1  Iteration
  sprint 2
  sprint 3

---------------------------------------------------------------Azure Devops Artifacts------------------------------------------------------------
Azure Artifacts enables developers to share their CODE efficiently and manage all their PACKAGES from one place. With Azure Artifacts, developers can
publish packages to their feeds and share it within the same team, across organizations, and even publicly.


With Azure Artifacts, you can publish and consume different types of packages. Select your package type to get started:
NuGet
npm
Maven
Python
Universal Packages


You can store all the following package types in a single feed: npm, NuGet, Maven, Python, and Universal packages.

A release is a collection of artifacts in your DevOps CI/CD processes. An artifact is a deployable component of your application.Azure Pipelines can
deploy artifacts that are produced by a wide range of artifact sources, and stored in different types of artifact repositories.

After a release is created, you cannot change these versions. A release is fundamentally defined by the versioned artifacts that make up the release.

Azure DevOps Labs: https://azuredevopslabs.com//default.html


---------------------------------------------------------------Azure Devops Pipelines Reference------------------------------------------------------------

DevOps Starter<------------------
https://learn.microsoft.com/en-us/azure/devops-project/overview?view=azure-devops


System/Predefined Variables: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml    (e.g. Build.ArtifactStagingDirectory) <--------------------------------------------------------------

Javascript Task- Quick Reference <-------------------------------------------
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/javascript?view=azure-devops&pivots=pipelines-yaml
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/customize-javascript?view=azure-devops

Tasks
https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops

Azure DevOps Labs: https://azuredevopslabs.com/

Azure DevOps Marketplace Extentions: https://marketplace.visualstudio.com/azuredevops

Azure Devops Environments: https://www.youtube.com/watch?v=gN4j65w7wIM

Azure Devops Log to Console:
- script: |
    echo $(Build.SourcesDirectory)
  displayName: 'Echo Test'

- script: echo $(Build.SourcesDirectory)
  displayName: 'Echo Test'

- Secrets can store on Variables (Locked) on Azure Devops UI Or in Azure Key Vault
- Azure Key Vault Secrets within Azure DevOps Pipelines
  How to use Secrets from Azure Key Vault in Azure Pipelines

  https://www.youtube.com/watch?v=UCKqDdizeVg




https://www.youtube.com/watch?v=RVmbDOmj-_E

Which Yaml version will be used (source or target):
https://learn.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops#branch-consideration-for-triggers-in-yaml-pipelines

Continuous Integration (CI) is the practice used by development teams of automating merging and testing code.
Automated tests execute as part of the CI process to ensure quality
Artifacts are produced from CI systems and fed to release processes to drive frequent deployments.


Continuous Delivery (CD) is a process by which code is built, tested, and deployed to one or more test and production environments.

***CI systems produce deployable artifacts*****, which include infrastructure and apps. Automated release processes consume these artifacts to release
new versions and fixes to existing systems.

Continuous Testing (CT) on-premises or in the cloud is the use of automated build-deploy-test workflows, with a choice of technologies and
frameworks that test your changes continuously in a fast, scalable, and efficient manner


Deployment targets: Use Azure Pipelines to deploy your code to multiple targets. Targets include virtual machines, environments, containers,
on-premises and cloud platforms, or PaaS services.

Continuous testing: Continuous testing with Azure DevOps Server ensures your app still works after every check-in and build, enabling you to
find problems earlier by running tests automatically with each build.

Azure Pipelines supports continuous integration (CI) and continuous delivery (CD) to continuously test, build, and deploy your code. You accomplish
this by defining a pipeline.

The latest way to build pipelines is with the YAML pipeline editor. You can also use Classic pipelines with the Classic editor.

Code coverage is a metric that can help you understand how much of your source is tested.


Define pipelines using YAML syntax


You define your pipeline in a YAML file called azure-pipelines.yml with the rest of your app.

Follow these basic steps:
Configure Azure Pipelines to use your Git repo.
Edit your azure-pipelines.yml file to define your build.
Push your code to your version control repository. This action kicks off the default trigger to build and deploy and then monitor the results.

git config --global user.email "961702@cognizant.com"
git config --global user.name "Danial Lokman"

A pipeline is defined using a YAML file in your repo. Usually, this file is named azure-pipelines.yml and is located at the root of your repo.

This pipeline runs whenever your team pushes a change to the main branch of your repo or creates a pull request. It runs on a Microsoft-hosted
Linux machine.


# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0      <-----------------------------
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |             <-----------------------------
    npm install
    npm run build
  displayName: 'npm install and build'


You can add more scripts or tasks as steps to your pipeline. A task is a pre-packaged script. You can use tasks for building, testing, publishing,
or deploying your app.

Pipeline triggers cause a pipeline to run.

YAML pipelines are configured by default with a CI trigger on your default branch (which is usually main). You can set up triggers for specific
branches or for pull request validation.

For a pull request validation trigger, just replace the trigger: step with pr: as shown in the two examples below.

***By default, the pipeline runs for each pull request change.***

There are some pipeline settings that you don't manage in your YAML file, such as the YAML file path and enabled status of your pipeline.

When are runs deleted
Your retention policies are processed once a day.

You can use the Copy Files task to save your build and artifact data for longer than what is set in the retention policies. The Copy Files task
is preferable to the Publish Build Artifacts task because data saved with the Publish Build Artifacts task will get periodically cleaned up and
deleted.


How many parallel jobs do I need?
As the number of queued builds and releases exceeds the number of parallel jobs you have, your build and release queues will grow longer.
When you find the queue delays are too long, you can purchase additional parallel jobs as needed


Check the parallel jobs setting directly: https://learn.microsoft.com/en-us/azure/devops/pipelines/licensing/concurrent-jobs?view=azure-devops&tabs=ms-hosted#check-the-parallel-jobs-setting-directly


Pipelines are made up of: Stages(e.g. Build Stage, Test Stage, Deploy Stage)
=> Each Stage can have multiple Jobs
=> Each job can have multiple Steps/Tasks

When you define multiple stages in a pipeline, by default, they run one after the other

A step can either be a task or script
A task is a pre-packaged script that performs an action, such as invoking a REST API or publishing a build artifact.
An artifact is a collection of files or packages published by a run.

Concepts:
A trigger tells a Pipeline to run.
A pipeline is made up of one or more stages. A pipeline can deploy to one or more environments.
A stage is a way of organizing jobs in a pipeline and each stage can have one or more jobs.
Each job runs on one agent. A job can also be agentless.
Each agent runs a job that contains one or more steps.
A step can be a task or script and is the smallest building block of a pipeline.
A task is a pre-packaged script that performs an action, such as invoking a REST API or publishing a build artifact.
An artifact is a collection of files or packages published by a run.

Items known as artifacts are produced from CI systems. They're used by the continuous delivery release pipelines to drive automatic deployments.

**Environment**
An environment is a collection of resources, where you deploy your application.
It can contain one or more virtual machines, *containers*, web apps, or any service that's used to host the application being developed.

A RUN represents one execution of a pipeline.

A script runs code as a step in your pipeline using command line, PowerShell, or Bash.
Unlike a task, a script is custom code that is specific to your pipeline

Ref- Build & Release Tasks: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops

A trigger is something that's set up to tell the pipeline when to run. You can configure a pipeline to run upon a push to a repository,
at scheduled times, or upon the completion of another build.

Library
The Library includes secure files and variable groups.

Secure files are a way to store files and share them across pipelines.

You may need to save a file at the DevOps level and then use it during build or deployment. In that case, you can save the file within Library and use it
when you need it.

Variable groups store values and secrets that you might want to be passed into a YAML pipeline or make available across multiple pipelines.

Choose Ctrl+Space for Intellisense support while you're editing the YAML pipeline.

trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    include:
    - docs
    exclude:
    - docs/README.md

If your pipeline has path filters, it will be triggered only if the new branch "has changes to files" that match that path filter.
If your pipeline does not have path filters, it will be triggered even if there are no changes in the new branch.

Wildcards
When specifying a branch, tag, or path, you may use an exact name or a wildcard.
Wildcards patterns allow * to match zero or more characters and ? to match a single character.

If the trigger has both branches and paths, then changed files in the included paths within the branches will cause the pipeline trigger

Angular CI/CD with Azure Devops to Azure App Service
https://www.youtube.com/watch?v=o9oeMZjrZp4
https://www.youtube.com/watch?v=xoz_iZh5NRY
https://www.youtube.com/watch?v=NFqrWsUPCAM


************CI Trigger******
Continuous integration (CI) triggers cause a pipeline to run whenever you push an update to the specified branches or you push specified tags.

You can control which branches get CI triggers with a simple syntax:

------azure-pipelines.yml----
trigger:
- master
- releases/*

CI Trigger---------> If a change gets pushed to master or release branch above, then this yaml pipeline (azure-pipelines.yml) will be run

When you push a change to a branch, the YAML file in that branch is evaluated to determine if a CI run should be started.<-------------------------




**********PR Trigger*******

Pull request (PR) triggers cause a pipeline to run whenever you open a pull request, or when you push changes to it. In Azure Repos Git, this functionality is implemented using branch policies. To enable PR validation, navigate to the branch policies for the desired branch, and configure the Build validation policy for that branch.

A wrong version of the YAML file is being used in the pipeline. Why is that?
For CI triggers, the YAML file that is in the branch you are pushing is evaluated to see if a CI build should be run.
For PR triggers, the YAML file resulting from merging the source and target branches of the PR is evaluated to see if a PR build should be run.

PR Trigger--------->Merges Source to Target. Select the Source Branch > Under Branch Policies > Build Validation > Pipeline to execute


Good-->https://kumarashwinhubert.com/azure-devops-pull-request-build-validation-pipeline-for-net-5-project
Build Validation-> Pre-merges and runs the build pipelineA. Only if it passes successfully then then PR goes through.
pipelineA has no trigger since it'll be part of Build Validation
pipelineA will be triggered when a new PR is created.

When a new PR is created (it will pre-merge and run the PipelineA- specified in Build Validation to make sure there won't be any issues before hand)
No need for trigger in PipelineA since Build Validation will trigger it  <----------------------------------------


Types of Triggers: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/triggers?view=azure-devops#classic-build-pipelines-and-yaml-pipelines

CI Trigger, PR Trigger, Pipeline triggers in YAML pipelines, Scheduled trigger (are independent of the repository and allow you to run a pipeline according to a schedule)


--------------------------------------------------------------------------------
Event Based Triggers:
   CI trigger -> to validate the build every time a push is made
   PR trigger -> when a pull request is made

Scheduled Triggers:  e.g. a nightly build

Pipeline Completion Trigger

Build Completion Trigger

Release Triggers:
    New Build Trigger
    Scheduled Release Trigger
    Pull request Triggers

Release triggers are an automation tool to deploy your application. When the trigger conditions are met, the pipeline will deploy your artifacts to the environment/stages you already specified.
--------------------------------------------------------

s
If you want to build your pipeline only on a schedule, and not in response to event-based triggers, ensure that your pipeline doesn't have any other triggers enabled

Scheduled triggers defined using the pipeline settings UI take precedence over YAML scheduled triggers.

Scheduled triggers can be through yaml code or UI. UI gets preference and overrides yaml settings

By default, your pipeline doesn't run as scheduled if there have been no code changes since the last successful scheduled run.

Following builds the main branch on a daily basis

# YAML file in the main branch
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - main

The time zone for cron schedules is UTC.


To force a pipeline to run even when there are no code changes, you can use the always keyword.
schedules:
- cron: ...
  ...
  always: true


A task is a pre-packaged script.


steps:
- task: PublishTestResults@2   <--- Version 2 of Task PublishTestResults


https://stackoverflow.com/questions/57089370/azure-devops-using-taskgroup-in-yaml-build
According to the docs, Task groups are not supported in the YAML pipelines.
Instead, in that case you can use templates.


Templates
Templates let you define reusable content, logic, and parameters.


Templates function in two ways. You can insert reusable content with a template OR you can use a template to control what is allowed in a pipeline.


*******Jobs*******
You can organize your pipeline into jobs. Every pipeline has at least one job. A job is a series of steps that run sequentially as a unit. In other words, a job is the smallest unit of work that can be scheduled to run.


In the simplest case, a pipeline has a single job. In that case, you do not have to explicitly use the job keyword unless you are using a template. You can directly specify the steps in your YAML file. <---


Deployment Job
If the primary intent of your job is to deploy your app (as opposed to build or test your app), then you can use a special type of job called deployment job.

The syntax for a deployment job is:

- deployment: string        # instead of job keyword, use deployment keyword
  pool:
    name: string
    demands: string | [ string ]
  environment: string
  strategy:
    runOnce:
      deploy:
        steps:
        - script: echo Hi!


Although you can add steps for deployment tasks in a job, we recommend that you instead use a deployment job. A deployment job has a few benefits. For example, you can deploy to an environment, which includes benefits such as being able to see the history of what you've deployed.


Types of jobs:
Agent pool jobs run on an agent in an agent pool.  <-- most common
Server jobs run on the Azure DevOps Server.
Container jobs run in a container on an agent in an agent pool

When using Microsoft-hosted agents, each job in a pipeline gets a fresh agent.

Use demands with self-hosted agents to specify what capabilities an agent must have to run your job.

Server jobs
Tasks in a server job are orchestrated by and executed on the server (Azure Pipelines or TFS). A server job does not require an agent or any target computers.

Server jobs run on the Azure DevOps Server
Delay task
Invoke Azure Function task
Invoke REST API task
Manual Validation task
Publish To Azure Service Bus task
Query Azure Monitor Alerts task
Query Work Items task


Workspace
When you run an agent pool job, it creates a workspace on the agent.

The workspace is a directory in which it downloads the source, runs steps, and produces outputs.


The workspace directory can be referenced in your job using Pipeline.Workspace variable. Under this, various subdirectories are created:

Build.SourcesDirectory is where tasks download the application's source code.

Build.ArtifactStagingDirectory is where tasks download artifacts needed for the pipeline or upload artifacts before they are published.

Build.BinariesDirectory is where tasks write their outputs.

Common.TestResultsDirectory is where tasks upload their test results.

The $(Build.ArtifactStagingDirectory) and $(Common.TestResultsDirectory) are always deleted and recreated prior to every build.


When you specify one of the clean options, they are interpreted as follows:

outputs: Delete Build.BinariesDirectory before running a new job.
resources: Delete Build.SourcesDirectory before running a new job.
all: Delete the entire Pipeline.Workspace directory before running a new job.


*****Library*****


A library is a collection of build and release assets for an Azure DevOps project.   <-----------------------
Assets defined in a library can be used in multiple build and release pipelines of the project.

The library contains two types of assets:
1) variable groups and
2) secure files.

variable groups & secure files are available to build and release pipelines

Variables give you a convenient way to get key bits of data into various parts of the pipeline.
The most common use of variables is to define a value that you can then use in your pipeline. All variables are stored as strings and are mutable.


*****Variables*****
Variables give you a convenient way to get key bits of data into various parts of the pipeline.

The most common use of variables is to define a value that you can then use in your pipeline. All variables are stored as strings and are mutable.

The value of a variable can change from run to run or job to job of your pipeline. <---------------------

You can use variables with expressions to conditionally assign values and further customize pipelines.

Expressions
# Two examples of expressions used to define variables
# The first one, a, is evaluated when the YAML file is compiled into a plan.
# The second one, b, is evaluated at runtime.
# Note the syntax ${{}} for compile time and $[] for runtime expressions.
variables:
  a: ${{ <expression> }}   <--- compile time when the YAML file is compiled into a plan
  b: $[ <expression> ]     <--- run time

Expressions can be evaluated at compile time or at run time.Compile time expressions can be used anywhere; runtime expressions can be used in variables and conditions.

In a compile-time expression (${{ <expression> }}), you have access to parameters and statically defined variables.

In a runtime expression ($[ <expression> ]), you have access to more variables but no parameters.

When you define a variable, you can use different syntaxes (macro, template expression, or runtime) and what syntax you use will determine where in the pipeline your variable will render.

In YAML pipelines, you can set variables at the root, stage, and job level.

You can also specify variables outside of a YAML pipeline in the UI. When you set a variable in the UI, that variable can be encrypted and set as secret.

You can use a variable group to make variables available across multiple pipelines.

You can use templates to define variables that are used in multiple pipelines in one file.

System/Predefined Variables: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml    (e.g. Build.ArtifactStagingDirectory) <--------------------------------------------------------------


Environment variables are specific to the operating system you are using
On UNIX systems (macOS and Linux), environment variables have the format $NAME. On Windows, the format is %NAME% for batch and $env:NAME in PowerShell.

Azure Pipelines supports three different ways to reference variables:
1) macro
2) template expression and
3) runtime expression

Each syntax can be used for a different purpose and has some limitations.

1) In a pipeline, template expression variables (${{ variables.var }}) get processed at compile time, before runtime starts.
2) Macro syntax variables ($(var)) get processed during runtime before a task runs.
3) Runtime expressions ($[variables.var]) also get processed during runtime but were designed for use with conditions and expressions.

The recommended ways to set secret variables are in the UI, in a variable group, and in a variable group from Azure Key Vault.

Secret variables set in the pipeline settings UI for a pipeline are scoped to the pipeline where they are set. You can use variable groups to share secret variables across pipelines.

You'll need to map secret variable as environment variables to reference them in YAML pipelines

steps:
- powershell: |
      Write-Host "My first secret variable is $env:FOO_ONE"
      $env:FOO_ONE -eq "foo"
  env:
    FOO_ONE: $(SecretOne)


With runtime parameters you can:

Supply different values to scripts and tasks at runtime
Control parameter types, ranges allowed, and defaults
Dynamically select jobs and stages with template expressions


Dev, UAT, Prod Stages/Environments

As you compose the tasks for deploying your application into each stage in your DevOps CI/CD processes, variables will help you to:
Define a more generic deployment pipeline once, and then customize it easily for each stage. For example, a variable can be used to represent the connection string for web deployment, and the value of this variable can be changed from one stage to another. These are ***custom variables***.  <---

Use information about the context of the particular release, stage, artifacts, or agent in which the deployment pipeline is being run. For example, your script may need access to the location of the build to download it, or to the working directory on the agent to create temporary files. These are ***default variables***.

Share values across all of the definitions in a project by using variable groups. Choose a variable group when you need to use the same values across all the definitions, stages, and tasks in a project, and you want to be able to change the values in a single place. You define and manage variable groups in the Library tab.

Azure Key Vault enables developers to securely store and manage secrets such as API keys, credentials or certificates.


Pipeline run sequence

This ordering helps answer a common question: why can't I use certain variables in my template parameters? Step 1, template expansion, operates solely on the text of the YAML document. Runtime variables don't exist during that step. After step 1, template parameters have been resolved and no longer exist.

It also answers another common issue: why can't I use variables to resolve service connection / environment names? Resources are authorized before a stage can start running, so stage- and job-level variables aren't available. Pipeline-level variables can be used, but only those explicitly included in the pipeline.

Each step runs in its own process, isolating it from the environment left by previous steps. Because of this process-per-step model, environment variables are not preserved between steps


DevOps Starter<------------------
https://learn.microsoft.com/en-us/azure/devops-project/overview?view=azure-devops


System/Predefined Variables: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml    (e.g. Build.ArtifactStagingDirectory) <--------------------------------------------------------------

Javascript Task- Quick Reference <-------------------------------------------
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/javascript?view=azure-devops&pivots=pipelines-yaml
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/customize-javascript?view=azure-devops

Build.SourcesDirectory: The local path on the agent where your source code files are downloaded. For example: c:\agent_work\1\s

Build.ArtifactStagingDirectory: The local path on the agent where any artifacts are copied to before being pushed to their destination. For example: c:\agent_work\1\a. Note: Build.ArtifactStagingDirectory and Build.StagingDirectory are interchangeable. . This directory is purged before each new build, so you don't have to clean it up yourself.


TODO: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml


To create a .zip file archive that is ready for publishing to a web app, use the Archive Files task:


Set up a CI trigger for a topic/feature branch
*******Unless you specify a trigger in your YAML file*******, a change in ***any of the branches*** will trigger ***a build***.

Unless you specify pr triggers in your YAML file, pull request builds are automatically enabled for all branches.

trigger:
- main
- feature/*

If you need to access an operating system-provided value like PATH (Environment variables), you'll need different techniques per platform.
By surrounding a variable name in $( ), it will be expanded before the platform's shell ever sees it.

steps:
- script: echo This is pipeline $(System.DefinitionId)


Testing:
Code coverage helps you determine the proportion of your project's code that is actually being tested by tests such as unit tests.


****Deployments****

Environment

An environment is a collection of resources that you can target with deployments from a pipeline.
Typical examples of environment names are Dev, Test, QA, Staging, and Production.


While an environment is a grouping of resources, the resources themselves represent actual deployment targets.

The
1) Kubernetes resource and
2) virtual machine resource types           are currently supported.  <------------------------


After you define an environment, you can add VMs to target with deployments.


Classic release pipelines:

With classic release pipelines, developers can easily and safely deploy their applications to multiple environments.


https://learn.microsoft.com/en-us/azure/devops/pipelines/release/define-multistage-release-process?view=azure-devops#prerequisites
Deploy to an Azure Web App
Azure DevOps Project
Deploy to IIS web server on Windows


Deploy to Azure App Service: https://learn.microsoft.com/en-us/azure/app-service/deploy-azure-pipelines?view=azure-devops&tabs=yaml



-----------------------------------------------Hands-on Azure Pipelines  Book-------------------------------------------


CI/CD improves your delivery speed by automating the build and deployment process

When it comes to automation, you need a machine to do it for you without any human interaction. Azure DevOps provides **agents** to do CI/CD work for you.

two types of agent pools (projectSettings>Agent pools:
1) Azure Pipelines: Microsoft-hosted agent pool
2) Private /self-hosted Agent Pools

Public projects let you use ten parallel executions on hosted pipelines at a time while private projects (where your source code
or other project details are hidden from public access) only let you use one execution of
a build or deployment at a given time.


An agent is a dedicated machine that helps to perform build or deployment

A deployment group is a set of machines set up with agents. The specialty of the deployment group is that each
machine is an actual deployment target dedicated to each deployment environment with a role.

As an example, a deployment group can have a machine with dev as
the target and role as the webserver, which are used only to do deployments to dev
environment web applications.


Pipelines > Pipelines ----> Build Pipeline
Pipelines > Releases  ----> Release/Deployment Pipeline

***Build Pipeline***
Further, builds can be used to assign version numbers to the output packages

Azure DevOps supports two types of builds:
1) Classic editor allows you to use a **graphical view** and create build pipeline
2) But when it comes to a YAML build, you need to have a good understanding of YAML syntax

Azure Pipelines supports a wide range of repositories: Azure Repos, GitHub and GitHub Enterprise, Bitbucket,
Subversion, and other Git repos

Build Outputs publish to -> Server or file share or artifacts
When generating a build output, we can publish the package on a server or file share. Also, we can generate packages and push those packages to Azure DevOps artifact feeds using build pipelines

Build Trigger: Specific branch checkin, Specific folder path checkin, Scheduled Builds


***Release Pipeline/Deployment Pipeline***

The main purpose of a release pipeline is to deploy the deployable packages created
to the target hosting platform


The Azure DevOps pipeline has an artifacts section and stage section.

The artifact section allows you to select different types of artifacts such as build output,
a package from artifact feed, and third-party artifacts like Jenkins.

E.g Artifacts: Build Output, Package from Artifact Feeds, Third-party artifacts like Jenkins

Deploy due to Build in a given branch or deploy artifacts from Pull Request

pre-deployment conditions:
 - manual trigger
 - start deployment after creating a new release, and
 - trigger the deployment of the given stage if the deployment of the previous stages of pipeline have succeeded.

post-deployment conditions

Also, pre- and post-deployment approval let you control deployment flow based on manual approvals.

Azure DevOps has the gates feature that can control the deployment according to the result of the return value from the gate condition. Gates allow you to set various conditions based on Azure functions, REST API, work items
queries, and several other gates. Also, schedule deployments can be controlled with pre-deployment
conditions.

***So, we can set manual approvals in pre-deployment and post-deployment steps.***
As an example, once you deploy to a QA environment, if automated test
cases don t test a reasonable area of the application as coverage, we need to wait until
manual testing is completed to continue the deployment to production

Security: So, we can secure each deployment pipeline individually by giving admin permission to only the selected users or selected user groups, allowing only designated people to approve deployments to important
targets such as production


build pipelines -> for building, executing unit tests, and creating deployable packages
deployment pipelines -> To deploy versions of your applications to target platforms

TASK GROUP --------> Tasks you can use in multiple pipelines
task group feature ->  Create Group of Tasks that can be shared in different pipelines and send parameter values relevant to
each pipeline

A task group facilitates implementable, reusable steps as a single block in multiple pipelines.

LIBRARY
The library can be used to keep variable values of pipelines as variable groups and to store files as
secure files

Variable group in LIBRARY---------> Variables you can use in multiple pipelines or even share variables between build and
release pipelines (pg 78)
variable group:  (are Shared variables) are variables that can be used in multiple pipelines (We can define variables for pipeline tasks)

the Azure DevOps Library allows you to keep secured files like certificates and keys that can be used in pipelines.

***Service connection*** is one of the most important features required for deployment pipelines. Connect to external
services.

connections between our Azure DevOps organization and external resources such as platform services like Azure,
source control providers, or other external services like NuGet feeds


You may even want to connect to third-party build and deployment platforms or code quality
checking or code security validation tools. A few examples are Jenkins, Octopus, or to
deploy Sonar Cloud

You can create service connections to connect with deployment platforms like Azure.
Also, you can connect with external source control tools like Bitbucket
and GitHub using a service connection.


In some situations, we try to use multiple deployment tools. So Azure DevOps allows you to create service connections with servers like Jenkins and Octopus.

After adding a service connection, it should not be controllable by all the users of the
project.


Environments
Azure DevOps deployment/release pipelines can be used to do various kinds of
deployments. We mostly do web app deployments, DB deployments, AKS deployments,
function app deployments


If Azure is the deployment target, it is required to go
log in to the Azure portal to monitor each of these deployment targets. Azure DevOps
introduces a new feature that can be used to monitor deployment targets from the Azure
DevOps Server without logging in to the Azure portal.

Environment: represents a collection of resources that can be **targeted** by deployment pipelines

Also, you can track which change set deployed to each deployment environment, which is very helpful to identify which
feature or bug fix was deployed.

But while we do deployment using more than one pipeline, we need the capability to do parallel deployments. Otherwise it affects the efficiency of the project.


Public Project:
   Microsoft Hosted: 10 Parallel Jobs
   Self hosted: Unlimited

Private Project:
   Microsoft Hosted: 1 Parallel Jobs - 1800 minutes per month(Can purchase additional)
    Self hosted: 1

But if the organization has Visual Studio Enterprise subscriptions, one parallel job is
added to the self-hosted agent. If the organization has more and more subscriptions, it will add more parallel jobs to the pipeline

Boards and Repo are free for up to five users.

Testing: 30 day free trial
Testing also plays more importantly in the part of the build and deployment cycle.
So, Azure DevOps provides a thirty-day free trial for test plan creation

Azure Pipelines:
1) Using Microsoft servers  (advantage parallelism to expedite pipeline execution)
2) Self hosted - using your own machine s virtual or physical components to agent pools (advantage custom software can install,
deploy to machine behind corporate firewalls)


The major advantage of having a self-hosted agent is having custom versions of software requirements to build your software projects,e.g. specific SharePoint version - self-hosted agents come in handy ****as you can set
up whichever software you want in your machines****

Another good use of self-hosted (on premises   could be even cloud VMs) agents
would be when you try to deploy to on-premises environments where the machines sit
behind cooperate firewalls. In this scenario the Azure-hosted agent does not have a line
of sight to the machines behind cooperate firewalls

agents: can use self-hosted, on-premises machines, virtual machines, or cloud virtual machines as agents

define agent pools to keep agents as a group

One agent pool (group of agents to run jobs) can have multiple agents


New Agent Pool> Settings   (agent = machine)

For new projects: You can add the pool to new project from settings
For existing projects: You can only add the pool to existing projects at the time of the creation of the pool OR or by going to an individual team project and adding the existing pool

You can set up virtual machines or physical machines as self-hosted agents.


Deployment groups can be used for the purpose of keeping deployment targets in
machines

A deployment group can have multiple machines registered in it, and a
deployment agent can be set up in these machines tagged with different roles such as
webserver, dbserver, etc., denoting the purpose of the machine in the deployment group


In the Azure DevOps organization level, you can find deployment pools in the
settings. The deployment pool allows you to share a deployment group with multiple
team projects.

Build pipelines allow you to compile the source code, run unit tests, and publish your
code as deployable artifacts. In classic build pipelines, you can easily drag and drop steps
and set up the pipeline in a very visual way.

The main purposes of the build pipeline are building source code, executing unit tests,
and publishing and packaging the built source code as deployable artifacts.

In Build Pipelines, you can also connect external source control repos

2 types of pipelines
1) YAML
2) Classic Build (Graphical)


page 64- using 2 build agents
One is that you can build a mobile app for different platforms (ios & android) with the same build number using the one build pipeline.

agent phases -> one agent completes before second agent does something else

Task is a package of the code segment that is created to do some specific work in
the automated pipeline.

We have discussed the built-in tasks available in Azure DevOps. If the available
tasks don t suit your needs, you can install tasks from the marketplace

recommended to use tasks from trusted providers with good reviews or have good
documentation

For this
control purpose, only admin users are allowed to install the marketplace tools.


Tasks: Built-in or MArketplace(careful)


Can configure if a task can br run even if previous task failed

pg 73- can put in custom code to check if the next task should be run


Chp 5

Variables are useful to keep settings in a common location for multiple steps used in
a build

Variables:
Paths,Names, Passwords, or Configuration values used in your apps

1) Pre-defined/System variables: https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=classic

2) Custom variables - You Define  (Variables Tab: Edit>Triggers>Variables)

You can use System variables as well as custom variables in any pipeline task by using the syntax of $(variableName)

custom variables can be configured to be settable when the pipeline runs e.g. for system.debug
(Variable to update before running the pipeline)

You can store *secret variables* on *Azure Key Vault* and use them in required pipelines e.g DBconnection etc

It is possible for you to scope the variable groups to a given stage or to release them in Azure release pipelines

You can use variable groups in both Build Pipeline as well as Release Pipelines

Release Pipeline (Stages) - pg80
You can use clone the capability of variable groups and create the same set of variables into another group
with different values, which helps you to keep values for each stage (Dev, Release) in a variable group
scoped to that stage.  for same variable names but different API URLs.   ( ng build --configuration=dev, ng build --configuration=prod could do as well?)

Trigger Build- Execute Build Pipeline if some other Build Pipeline succeeds


Formatting the Build Number
The build number can be used to apply a version to a package/artifact generated as output from a build pipeline.

pg 88. Use work items to build release notes

Build Status Badge: which can be used to show the build status in documentations

It is possible to revert back a pipeline to a given historypoint, which would be really useful while doing maintenance or upgrade work on a build pipeline.


pg 92. You can revert to a previous version of pipeline


Accessing Secret Variable Values in PowerShell

So, in the PowerShell scripts, we can only access the variables by using a $env:variablename or $(variablename) for the non-secret
variables. But for secret variables, as the agent does not create environment variables in it, we cannot access the secret variables with the $env:variable format. The only possible way to access secret variables in PowerShell would be with a $(variablename) format

In Azure DevOps, the Personal Access Token (PAT) is the most common way of providing
authentication.

But a OAuth configuration in the agent phase allows us to execute API calls without using a PAT as a parameter for authentication.

API calls need authentication.
"Allow scripts to access the OAuth token" if enabled, can access token via SYSTEM.ACCESS.TOKEN variable or $env:SYSTEM_ACCESSTOKEN environment variable in the task scripts

The enable OAuth token configuration in the Azure DevOps build pipeline enables the scripts and other process launched by tasks to access the OAuth token through the SYSTEM.ACCESS.TOKEN variable. When access to the system access token is enabled, it is possible to use a $env:SYSTEM_ACCESSTOKEN environment variable in the task scripts that you are executing in a build pipeline job.

Task Groups
A task group is grouping a set of repetitive tasks and maintaining it as the shared component for multiple pipelines

we can create a task group using the repetitive tasks and ***pass parameters to it***, using each build pipeline so that it builds and
packages different projects.

Agentless Phases
An agentless phase has the tasks that can perform without help from the agent machine
As an example, in some situations we might need to make a time gap between two tasks available in the build pipeline

Hence, we can use agentless tasks to wait for the required time period to get the changes to be applied to the Azure resource and continue
with another agent phase for the next task,

Agentless Phases (example)
1) Delay By Minutes
2) Query work Items
3) Wait for User to approve or reject

Azure DevOps build pipelines are used to get the source from the repo, build the code, test the code, publish built binaries, and package it as deployable artifacts.

Artifacts (where save?)
1) Pipeline itself
2) File's share path  (within corporate network if security is a concern)

The most well-known, simple way of keeping artifacts is to save the published artifacts to the "pipeline itself" using the publish artifacts task.
Artifacts attached to the build pipelines have a shorter lifetime as they will be dependent on the build retention time.

Exporting and Importing Build Definition  (To Yaml or Json)

Artifacts
Artifacts or output from the build contain the binary files and required supportive filesto deploy software to a target environment.

Ways to publish artifacts in a build:
1) Making it available with the build
2) Putting the artifacts to a shared path
3) FTP
4) Creating it as a package and uploading it to a feed



1) Making Artifacts available with the build
The generated content is normally staged into a build artifact staging directory $(Build.ArtifactStagingDirectory). Then the artifact staging directory will be published to the build, as a drop.

Build.ArtifactStagingDirectory: The local path on the agent where any artifacts are copied to before being pushed to their destination. For example: c:\agent_work\1\a


2) Putting the artifacts to a shared path
You can make the file server path available to an "on-premise" agent (machine) scenario, where the agent (machine) can be allowed to have access to the shared path in your network.

3) The third option is to use an FTP upload task where you can set up a service
endpoint in your team project to the FTP server. For this purpose, you can use a generic
service connection type where you provide the FTP server URL and the credentials to the
FTP server.

4) Creating it as a Nuget package and uploading it to a feed
The next option would be to package your build artifacts as a NuGet package and upload it to a NuGet feed.

Benefits: Primarily it allows you to keep the packages released regardless of whether the build is removed from Azure
DevOps due to retention limits set for builds.

Using Nuget packages from feed in your Build Pipeline

Chp 9

Azure DevOps has two types of pipelines:
1) Classic Build and Release pipelines  (Graphical)
2) YAML pipelines (Only Build? No Release?)


YAML Build pipeline: an entire build pipeline is managed as one script without using any UI

YAML script: You can modify this YAML script to add or remove
1)tasks,
2)variables,
3)triggers, and
4)pools. (where this job will run)

YAML pipeline Benefit: User can version control the build


If 4 branches eg: Feature branches, Version branches, Development branches, and Master branches
If only want to trigger a build if code change is pushed to Feature branch, then you can use <------ "Branch Filters"
If requirement:only build if code change inside a specific folder. Then use  <---------------------- "Path Filters"

Microservices Architecture e.g of Azure function apps: Each component of the application should be able to be deployed separately

Requirement: Create a Build and Release pipeline for each Azure function app separately

Microservices: Same Branch. Multiple services in different folders. You need to use "Path Filter" so that it only triggers Build when
code change is pushed to a specific microservice code folder path.


E.g YAML file on master - azure-pipelines.yml

trigger:
  branches:
    include:
     - master
     - develop
     - version/*
     - feature/*
  paths:
    include:
     - Functions/UserRegistration

This Pipeline will only be triggered (under master) if a code change is pushed to Functions/UserRegistration folder within any of the included branches


If your pipeline has path filters, it will be triggered only if the new branch "has changes to files" that match that path filter.
If your pipeline does not have path filters, it will be triggered even if there are no changes in the new branch.

---> If the trigger has both branches and paths, then changed files in the included paths within the branches will cause the pipeline trigger <---


A YAML script can be written with mainly 4 types of variables.

1) Global variables: Can be used in multiple jobs and stages   (Jobs can be defined in a pipeline. pg 134)

2) Job-level variables: E.g. Want to build one agent job with debug configuration and another job with release configuration

3) Agent variables: Agent=Machine. Available both in jobs and agents/machines

4) Environment variables: Can access Environment variables within Pipeline


You can use two syntaxes to define variables.

variables:
    var1: 'testVal'

OR

variables:
- name: var1
  value: 'testVal'


Variable Groups allow users to keep variable values that are shared between more pipelines

variables:
 - name: MY_VARIABLE
   value: some value
 - group: my-variable-group-1   (group name. Group will have individual variables and their values)
 - group: my-variable-group-2


How to use variable groups inside YAML. Assume you have 'myvar' variable inside variable group called 'my-variable-group'


variables:
- group: my-variable-group
steps:
- script: echo $(myvar) # uses macro syntax              (1st way to use variable inside variable group)
- script: echo $[variables.myvar] # runtime expression   (2nd way to use variable inside variable group)


How to access "secret values" inside Yaml
1) Define as a pipeline variable using a web UI  (outside Yaml)
2) Keep it in a variable group  (Outside Yaml)


Jobs
Jobs are used to define pipeline execution phases. A job can be defined with steps/tasks to perform required actions.

Pipeline with single job:    You Do not need to specify job        <-----------
Pipeline with multiple jobs: You Need to specify jobs in the YAML  <-----------

When you have a pipeline with a single job, you do not have to specify the job
keyword, but you do have to specify the steps of the pipeline similar to that shown below.


How to specify multiple jobs in a pipeline:

pool:
  vmImage: 'ubuntu-16.04'
steps:
- bash: echo "Hello world"

jobs:
- job: A
  steps:
  - bash: echo "A"

- job: B
  steps:
  - bash: echo "B"


You can define stages in your build pipeline similar to the stages in release pipelines,


In each stage, you can use multiple jobs if required.

stages:
- stage: MyBuild
  jobs:
  - job: BuildJob
    steps:

Stages > Jobs > Steps   <-----------


When you are defining jobs, you can define the conditions and dependencies to
other jobs in the pipeline.


jobs:
- job: FirstJob
steps:
- script: exit 1
- job: SecondJob
dependsOn: FirstJob
condition: failed()
steps:
- script: echo this will run when FirstJob fails


Jobs can run as  (pg 136)
1) agent pool jobs  (run on an agent of a pool). An agent pool job can demand agent capabilities such as an operating system
2) server jobs (which run on Azure DevOps server)
3) container jobs

You can define YAML pipelines with jobs set to check out as none to prevent code
checkout to facilitate implementing deployment pipelines.  (pg 137)

steps:
- checkout: none

Jobs can be used to implement build pipelines as well as deployment pipelines

Multiple types of steps that can be defined in a Yaml pipeline

1) The command-line tasks can be defined in a pipeline as scripts

steps:
- script: echo Hello world!
  displayName: hellosample

steps:
- powershell: echo Hello $(name)

With all these step tasks, you can use the "failOnStderr" Boolean to define whether the
execution should fail the pipeline on script or command-line execution failures


Checkout set to "none" will prevent the checkout action

steps:
- checkout: none

Checkout set to "self" will check out the repo where the current YAML pipeline code is existing.

steps:
- checkout: self

Can also checkout a different repo  pg 138


Tasks Groups: shared/common steps that can be used in multiple pipelines
Templates:    shared/common steps that can be used in multiple pipelines --- with Yaml Pipelines (same purpose)

4 kinds of templates available in Azure YAML pipelines:
1) Stage Template
2) Job   Template
3) Step  Template
4) Variable Template  <----

Variable templates can be defined to keep the variables shared. The variable names
and values can be defined in the template as shown below

# File: variables/mybuildvartemplate.yml
variables:
- name: vmImage
  value: vs2017-win2016
- name: buildplatform
  value: x64

Then the variable template can be used in pipelines with the following syntax.

variables:
- template: variables/mybuildvartemplate.yml  <--- reference to shared variables
pool:
vmImage: ${{ variables.vmImage }}
steps:
- script: build x ${{ variables.buildplatform }} ${{ variables.
buildconfiguration }}


Azure Release Pipelines

You can run Deployment actions in the YAML Build pipelines

Azure DevOps release pipelines enable you to deploy to almost All targets and platforms available (e.g. AWS)

Service Connections (Targets examples: Cloud targets, On-premise targets)

Endpoint should be authenticated and a connection should be made to the endpoint as a "service connection" from Azure
DevOps, in order to allow the pipelines to interact with the resource

A service principle in Azure allows accessibility to Azure resources.

You can make service connections to: Azure, AWS, code repos such as Bitbucket and GitHub etc

For some Service Connections example AWS, you need to install extensions via marketplace extensions: https://marketplace.visualstudio.com/azuredevops

Templates are pre-created as a set of "pipeline tasks" grouped together, serving a given purpose.

New Release Pipeline Templates: Can also install from marketplace extensions: https://marketplace.visualstudio.com/azuredevops

Build pipelines generate artifacts that can be consumed in the release pipelines to get their content downloaded to a target and
deploy as necessary.

If you have published your artifacts in the build itself as a published drop folder, you can use the build as an artifact type for your build.

Build Pipeline target to publish Artifacts: $(Build.ArtifactStagingDirectory)
Release Pipeline. Add Artifact- Build from --> $(Build.ArtifactStagingDirectory) to consume Artifact

Azure repos can be used as another artifact type. Code or other files such as YAML
deployment support files can be used in release steps

You can also consume other artifacts such as Jenkins artifact


Release Stages 151-157
Release stages can be used to control the "flow" of a release pipeline.
"Stages" in the pipeline provide you the flexibility to define your desired workflow of software delivery.

A Stage can be set up with three type of triggers:
1) Manual trigger: Manual trigger requires you to trigger the stage manually by clicking "deploy manually" after creating the release from the release pipeline.  <--- Deploy Manually

2) After stage: After stage lets you define previous stage(s) so that the current stage gets triggered only when all "previous stages are completed" <--- After Previous stage Completes

3) After release: After release will trigger a stage once "the release is created" for the pipeline, by the means of manual creation or continuous deployment trigger set at connected artifacts.  <--- After release is created


Release Gates & Approvals: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/approvals/?view=azure-devops&tabs=yaml

Pull request deployment enabling will allow the release based on pull requests to be deployed to the given stage; however,
it is advisable to keep this disabled for production stages.  <-------

A stage can be set up with pre-deployment approvals. (This approval for pre-deployment can be
effectively used to protect required environments such as production or demo.)

Another pre-deployment setting that can be applied to a stage is Gates

Gates: Gates let you invoke third-party calls and wait for desired outcomes before proceeding with a particular stage


Pre-Deployment Conditions:

Post-Deployment Conditions: pg 156  (approvals can be set up to denote the application works fine in the stage, after the deployment to the
stage, letting it trigger any next stages.)

Environments

An environment may contain a
1) Kubernetes cluster,
2) Set of virtual machines, OR
3) Resources such as Azure web app or functions apps as examples

The environment can be added with checks, which is a bit similar to gates.


Chp 10

Agent jobs require an installed Azure DevOps agent to execute the job. Agent = Machine

Agent machines can be hosted agent machines or on-premise machines

If you are deploying to a cloud target such as Azure or AWS, you can use "Microsoft hosted agents" to execute deployment actions.

However, if you are deploying to an on-premise target or a more secure Azure target such as Azure App Service Environment,
you might need to set up your "own deployment agent machine".

Most of the time the "on-premise environment" would be behind a corporate firewall, and the hosted agents will not have a line of sight to execute deployments against such targets.

Similar to that,in an Azure App Service Environment (ASE), access to even platform services would be
allowed only within the defined virtual network in Azure ASE. Hence, you need to set
up a virtual machine configured as an Azure DevOps agent, inside the Azure ASE virtual  <---------------
network, which can access the platform services in an Azure ASE.

These deployment steps may involve setting up infrastructure of a given environment target, deploy your applications, and even executing functional and integration tests.

Deployment: In agent job, you can add tasks from marketplace e.g. Azure App Service Deploy or AWS deploy

Agentless Jobs: Agentless jobs are useful to execute steps that do not require a machine to perform the
steps that are being executed.

You can use "delay steps" to wait for a given time after a given agent or deployment
group job, using an agentless phase.

Variables
The variables in a release pipeline can be ***scoped*** to the "Release" or to a "Stage"
The same variable can contain a different value for each stage.

For each variable in the release pipeline, you can set it to settable at release time, which allows the
values of those variables to be set at the time of the release creation.

Variables can be reused using a $(variablename) in another variable as it automatically resolves.

REST API and CLI

Programmatic access to the build and release pipelines is useful to generate reports,
manipulate pipelines behavior, or even implement extensibility to pipelines

operations such as run a build, update build definition, get details about a build, tag a
build, and many more with the REST API


Testing: A couple of testing types can be easily automated and get integrated with the build and release pipelines

Unit tests are implemented to test the code that is written by the developers using the test-driven development approaches (TDD) and behavioral driven
development (BDD).

Build pipelines can be used to execute unit tests written with many types of unit testing tools.

Build the code > Run unit tests > Package the code as deployable binaries

To execute the test with build pipelines, you can find several tasks available.


-----------------------------------Implementing Azure Devops Solution Book  (Recommends sometimes as well) ------------------------------------------


Some examples of agentless tasks:
Waiting for manual approval before continuing
Inserting a delay before proceeding
Calling a REST API
Calling an Azure function


and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

This condition specifies that the job will only run when all previous jobs have succeeded
and the build is not started from the master branch.

Service connections are managed in a central location as project settings


Values such as passwords and license keys can be used as Variables

Variables can be Settable at queue time (see label 2 in the
preceding screenshot), which means that their value can be changed whenever
someone queues a new build.An example of a variable for which this is used is
the system.debug built-in variable.

variable groups: can, in turn, be linked to one or more builds. This is an
effective way of sharing variables between builds


Difference between Variables and Variable Groups:

You cannot mark variables in a group as settable at queue time.

You can allow or deny the use of this group in all pipelines. If you
deny their use in all pipelines, then only you can use the variable
group. You can authorize other users or groups through the Security
option (labeled with a 2 in the preceding screenshot).

You can reference an Azure key vault for which this variable group
will act as a placeholder. After logging into Azure, you can select a key
vault and select which values that are stored in the key vault you want
to be accessible through the variable group.

Build Validation > Build Expiration -> Preferable to select "Immediately when master is updated."

using YAML pipelines is now the preferred approach (over Classic/ Graphical approach) for defining pipelines
This means that it is very likely that new features will only surface in YAML pipelines.

A trigger in YAML is not mandatory as a pipeline can also be started manually.

pool:
name: Azure Pipelines
vmImage: windows-2019  <---This determines which operating system and what software is available on the agent that will execute the task.


An up-to-date list of all the VM images that are available can be found at
https:/ / docs. microsoft. com/ en- us/ azure/ devops/ pipelines/ agents/
hosted#use- a- microsoft- hosted- agent.

Jobs > Steps > Tasks

As the second job in this example shows, it is also possible to specify which agent pool to
use per job. When no pool is specified for a job, the default pool specified at the top of the
file is used.

The jobs that are discussed in this section are called agent jobs. Besides
agent jobs, there are also server jobs (Azure Devops Server), container jobs, and deployment jobs
available.

Control options:
dependsOn keyword: e.g. compile
dependsOn: compile

condition keyword - the condition keyword can be used to specify a condition that a job should
run under.

condition: or(succeeded('test'), succeeded('build_schema'))

Variables can be defined at every level of a YAML pipeline (except for within a task)

variables:
name: value
anotherName: otherValue

Variables can later be retrieved via $(name) and $(anotherName).

Using variable from VariableGroup
variables:
 name: value
 anotherName: otherValue
 group: myVariableGroup


Tips for writing YAML pipelines:
1 When using classic designer(graphical) For every task, there is a link with the View YAML title. This opens a small pop-up box that shows you the YAML
corresponding to the task
2 built-in YAML intellisense  (This shows you the options available ***at that point*** in the file.)

Built-in agent pools (eg from Microsoft. However, cannot install extra software on the machines or containers that host the agents if you need to)
private agent pools

Only agents that are part of the selected pool (agent pool) are eligible for running the tasks.


Push-based deployments -> Regular Deployment (pg 101): able to connect to the target machines or services that will host the application. Jobs run on agent that is seperate from target machine

Agent-based deployment -> E.g. deploying an application to onpremises servers or servers that are behind a firewall.
via Deployment Groups: When deploying to target machines that cannot be connected to. Azure DevOps agent is installed on every machine that the application will be installed on. Next, these agents must be grouped into deployment groups. Once this is done, a
deployment group job can be added to the release.
Jobs run on target that also has an agent installed on it

If an application must be deployed to three stages (test, acceptance, and production) using deployment groups, there will need to be three separate deployment groups, one for each environment.

A YAML pipeline can be divided into one or more stages. A stage can represent an environment such as test, acceptance, or production, but
this isn't always true. I

Multi-stage YAML pipelines are the new default for creating pipelines in Azure DevOps


Important**********--> While jobs (unless otherwise specified) run in parallel by default, stages always run
sequentially by default.

All the artifacts that were published in a previous stage of the current pipeline can be
downloaded using a download task:

steps:
- download: current
	artifact: artifactName

Pipeline artifacts are downloaded to the $(Pipeline.Workspace) directory.

In a multi-stage pipeline, we need environments to define approvers.

To control whether a pipeline is allowed to proceed to a certain stage, the concept of
environments needs to be introduced. An environment is defined when we give it a name
and a description. One or more approvers can be attached to these environments. Once this
is done, jobs can be configured to target such an environment. If there is at least one job in a
stage that targets an environment, then that environment is said to be used by the stage. If
an approval has been configured on that environment, the deployment to that stage will
not continue until the approver has given permission.

Can deploy mobile apps (page 114)

Azure DevOps Release Notes Generator (pg 121)
To combat this, it is possible to automate the creation and publication of release notes. One
way to do this is by using the Azure DevOps Release Notes Generator.

A feed is a repository of packages that you can publish and download packages to and from.

A general recommendation for the maximum duration of a CI pipeline is 5
minutes.  pg 127

Within Azure Artifacts, you can create one or more feeds where you can store your
packages. For each package, you can have multiple versions in a feed.

A feed is a repository of packages that you can publish and download packages to and
from.


Managing views on a feed
for example, when you are implementing the continuous delivery of
a shared library but want to share only stable versions with the rest of your organization.
To do this, you can create views.
A view is a subset of the package versions within a feed

There are two ways in which you can publish packages to a feed:
1) Manually from your own computer
2) By using Azure Pipelines


No Deploy code in Pipeline exected for premerging/Build Validation -> Branch Policies
Only need CI Build.
https://www.endpointdev.com/blog/2022/08/cicd-with-azure-devops/

Build once and then deploy to multiple environments - Dev, UAT, Prod
https://josh-ops.com/posts/angular-tokenization/

Videos
https://www.youtube.com/watch?v=o9oeMZjrZp4


script: echo

Azure Key Vault Secrets within Azure DevOps Pipelines


Workspace clean:
- job: myJob
    workspace:
      clean: outputs | resources | all # what to clean up before the job

- job: myJob
    workspace:
      clean: all # what to clean up before the job






Angular 15
1) Standalone components stable
2) No environment files (but can add them if needed). In future, CLI will have support for environments
3) No polyfill specific file




----------------------------------------------TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO----------------------------------------

1/3 - ***Books*** (skim) - done:
Hands-on Azure Pipelines
Implementing Azure DevOps Solutions   (skim)


2/3 - ***Links*** - done:

Ref-Deploy to Azure AppService: https://learn.microsoft.com/en-us/azure/app-service/deploy-azure-pipelines?tabs=yaml

https://www.c-sharpcorner.com/blogs/creating-cicd-pipeline-for-angular-and-hosting-in-azure-app-service

(Angular with Node.Js and MongoDB)
https://medium.com/bb-tutorials-and-thoughts/building-ci-cd-for-angular-static-web-apps-service-using-azure-devops-460d6439e73b
     https://medium.com/bb-tutorials-and-thoughts/building-an-angular-app-with-azure-static-web-apps-service-8fe84ebe4709

https://www.endpointdev.com/blog/2022/08/cicd-with-azure-devops/

(Using Tokenized files for different environments) - Token Replacing happens in YAML file (Multi-Stage- both Build and Deploy)
https://josh-ops.com/posts/angular-tokenization/


3/3 - ***Videos***:
https://www.youtube.com/watch?v=o9oeMZjrZp4 - done (good) - Azure App Service Setup
https://www.youtube.com/watch?v=PmggkrGRZ5c - done (good) - Azure App Service Setup

https://www.youtube.com/watch?v=NFqrWsUPCAM - done (good) - CICD
https://www.youtube.com/watch?v=QbmLxfRCt38 - done (good) - CICD

https://www.youtube.com/watch?v=Tpa7r_iXgM8 - good (Release Pipeline-> Azure Subscription dropdown for 'Azure Subscriptions')
https://www.youtube.com/watch?v=pSmKNbN_Y4s - good (Release Pipeline-> Azure Subscription dropdown for 'Azure service Connections')

https://www.youtube.com/watch?v=FFxww1-M25E  (ng test - starting 11 min - good)

https://www.youtube.com/watch?v=oeNYtYuhZQ4 - done (ok)-  (npm install > ng lint (linting)> ng test (unit test)> ng build) -  user graphical- get Yaml

https://www.youtube.com/watch?v=eGcosoC43vI - done (good) <--- Token replacement happens in Release Pipeline via Classic/Graphic Editor
https://www.youtube.com/watch?v=OFr6Vkw0mq8 - done (good) Release Variables

https://www.youtube.com/watch?v=D97Qhk8n-lU - done (good) - Build and Serve Configuration


Sim8Q~f6-PXVTprs4Dxc1kbVPTlXKo~_Obes_czf
Sim8Q~f6-PXVTprs4Dxc1kbVPTlXKo~_Obes_czf


https://www.youtube.com/watch?v=iX1vHFghCtQ - done (decent)

https://www.youtube.com/watch?v=LwDYfL7mGfw  - done (ok)
https://www.youtube.com/watch?v=GhPi3xBhzrI  - done (ok)
https://www.youtube.com/watch?v=YMw5YmZRiI0  - done (ok) - Azure Resource Groups


Azure websites:

https://angular-cicd.azurewebsites.net
https://angular-cicd-qa.azurewebsites.net
https://angular-cicd-uat.azurewebsites.net
https://angular-cicd-prod.azurewebsites.net

NodeJs Api:
https://nodejsapi-dev.azurewebsites.net/getEnv
https://nodejsapi-qa.azurewebsites.net/getEnv
https://nodejsapi-uat.azurewebsites.net/getEnv
https://nodejsapi-prod.azurewebsites.net/getEnv

HR Business Manager ===  Talent Manager


Api assumptions:
Dev  Api: https://catfact.ninja/fact
QA   Api: https://www.boredapi.com/api/activity
UAT  Api: https://api.agify.io/?name=meelad
Prod Api: https://api.genderize.io/?name=luc


For Node js api- Release Pipeline - Use "Deploy Node.js to Azure App Service" and NOT "Deploy to Azure App Service"
https://javascript.plainenglish.io/deploying-node-js-app-using-azure-devops-part1-74cb13a6bd02
https://javascript.plainenglish.io/deploying-node-js-app-using-azure-devops-part2-4567e4cf783b


How to Build and release Node.js package:
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/javascript?view=azure-devops&pivots=pipelines-yaml


ng new AngularProject
ng cache clean  (delete .git folder if it exists- could be in hidden files)
git init
git add .
git commit -m "first commit"
git remote add origin https://961702@dev.azure.com/961702/Angular-CICD/_git/Angular-CICD
git push -u origin --all

-----
git remote add origin https://danlokman@dev.azure.com/danlokman/Angular-CICD/_git/Angular-CICD
git push -u origin --all


How to create a Nodejs api: https://medium.com/@onejohi/building-a-simple-rest-api-with-nodejs-and-express-da6273ed7ca9
How to add adn existing NodeJs project to AzureDevops Git
git init
git add .
git commit -m "first commit"
(Get below commands from Azure Devops)
git remote add origin https://danlokman@dev.azure.com/danlokman/NodeJsApi/_git/NodeJsApi
git push -u origin --all



npm run build   (will execute "ng build" via package.json) to create dist folder. will run production build. default configuration.


----Angular Testing. Official Doscs-------

Ref:
https://angular.io/guide/testing
https://angular.io/cli/test

-To test your Angular CLI application in Continuous integration (CI) run the following command: ng test --no-watch --no-progress
-To generate a coverage report run the following command in the root of your project:           ng test --no-watch --code-coverage

When the tests are complete, the command creates a new /coverage folder in the project. Open the index.html file to see a report with your source code and code coverage values

Code Coverage: The code coverage percentages let you estimate how much of your code is tested.If your team decides on a set minimum amount (e.g 80%) to be unit tested, enforce this minimum with the Angular CLI. (https://angular.io/guide/testing-code-coverage)

- script: mocha test --reporter mocha-junit-reporter
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/customize-javascript?view=azure-devops


By default task does not proceed if previous task failed


"npm test -- --reporter"  --> translates to  --> "ng test -- reporter"

"scripts": {
    "test": "ng test"
  }



Angular-CICD Project --- under --- 961702@cognizant.com
Azure Portal         --- under --- dan.lokman@hotmail.com





Ref Task Options: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml

----Task----
Basic CI/CD - Build & Deployment     ----- Done

Add Unit Testing                     (Test failure and success, code coverage?, publish test results)   ----- Done
Add Linting (ESLint) to Devops       (ESLint)   ----- Done


Azure Devops Branching Strategy: https://learn.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=azure-devops

Main Branch
Feature Branches  (Merged back into main branch via PR. For new features and bug fixes)
Release Branches  (Long lived. Not merged back to main branch.


Azure Devops Branching Strategy:
https://learn.microsoft.com/en-us/azure/devops/repos/git/manage-your-branches?view=azure-devops


feature
    featureA
    featureB
users/userA
    feature
develop
main-------> Dev -> QA -> UAT -> Prod
(no releases folder for pure CI/CD since everything gets triggered off of main branch to Dev > QA > UAT > Prod)




Dev > QA > UAT > Prod Environments
https://www.softwaretestinghelp.com/qa-testing-release-and-deployment-management-process/

Build Once Deploy Many (Build one time and pass the build through different environments Dev>QA>UAT>Prod)
https://sergiuoltean.com/2017/12/07/build-one-run-many-vs-build-many/


"Build Once Deploy Many". Angular 15 has no environment files (no seperate builds for each environment)

Develop (PR merges it into main)
Main --> Dev (Developer Testing)--> QA (QA Testing) --> UAT (end user Testing) --> Prod
Same Build proceeds. Build already has the following done: linting, unit tests, code coverage



Dev > QA > UAT > Staging (Optional. Mirrors Production) > Prod


-----------Release Pipeline Links-------------------
https://learn.microsoft.com/en-us/azure/devops/pipelines/release/define-multistage-release-process?view=azure-devops   --- good
https://www.azuredevopslabs.com/labs/azuredevops/continuousdeployment/


https://www.youtube.com/watch?v=PmggkrGRZ5c -- good     (create 3 environments and deploy -Dev, QA, STage in Appservice)
https://www.youtube.com/watch?v=lBl_SoCja2A -- good   (pre and post deployment approvals. good misc info.)
https://www.youtube.com/watch?v=VW4yjUtpZdE -- good (build once, deploy many)


https://www.youtube.com/watch?v=UUmgg2xqFxU -- done  (deployment to Azure App Service)
https://www.youtube.com/watch?v=BAFCiiOAXB8 -- done  (deployment to Azure App Service)
https://www.youtube.com/watch?v=CWeBLNe0Pho -- ok    (deployment to VMs)
https://www.youtube.com/watch?v=u9sYdmyXOek -- not good (seperate pipelines for each environment)
https://www.youtube.com/watch?v=H0j7r-oa_Hw -- ok    (3 environments)


you can select a QA group with multiple users for pre-deployment approval

QA role in Contiuous Deployment (rely on more automated testing. QA involved in user stories and in development instead of only at QA stage in CI/CD)
As you may recall, speed is the essence of CD. So manual QA isn t really compatible with CD.
https://www.rainforestqa.com/blog/2017-05-18-the-role-of-qa-testing-in-continuous-delivery
https://medium.com/@martijn.endenburg/qa-in-the-land-of-continuous-deployment-86102938e248
https://codefresh.io/learn/ci-cd/ci-cd-testing-why-its-essential-and-how-to-make-it-great/


Pre-Deployment Approval QA:   QA is ready to accept changes and proceed with Testing
Post-Deployment Approval QA:  QA signoff. Testing good. Ready to proceed to next stage.



add Dev branch and point source code there -done

TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
Deployment add different environments to Release Pipeline
Pull Request Test (Failure plus Success-Diff Artifact) - Release artifact config needs to be updated? - plus stage trigger config for PR?


2 Diff Pipelines depending on Client needs
CI/CD for all environments (Dev, QA, Prod). Rely on Automated Testing
CI/CD for Dev. QA, UAT & Prod Manual. Manual Testing by QA & UAT.


Reading Json data + apiurl update in Release pipeline:
https://davemateer.com/2019/03/07/Azure-DevOps-GUI-Pipelines
https://www.javatpoint.com/display-data-from-json-file-in-angular
https://www.techiediaries.com/angular-local-json-files/
https://medium.com/codeptivesolutions/how-to-import-json-file-in-angular-a2e012948479

Observable.toPromise Deprecated:   <-----------------------
https://rxjs.dev/deprecations/to-promise
https://indepth.dev/posts/1287/rxjs-heads-up-topromise-is-being-deprecated

Earlier we used to use toPromise() method to convert an Observable into a promise response. But the toPromise() function is going to be depreciated in RxJS v7 and completely removed from v8. https://www.freakyjolly.com/how-to-resolve-promise-or-observable-before-app-load-app_initializer-angular-12-example/

How to use APP_INITIALIZER post Angular 12
https://www.freakyjolly.com/how-to-resolve-promise-or-observable-before-app-load-app_initializer-angular-12-example/



Using multiple APP_INITIALIZER functions for different purposes. 1 to load config data. another to check if user is authenticated or not (eg via jwt token)
https://stackoverflow.com/questions/45477905/multiple-angular-app-initializers


To use
import config from '../../assets/config.json';

following changes need to be made to tsconfig.json
    "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true,


------------------------------------------------------------------------------------------------------------------------------------------

https://dev.to/angular/ci-ready-e2e-tests-for-angular-with-cypress-and-typescript-in-under-60-minutes-4f30
https://www.steffendielmann.com/2021/04/14/automated-testing-in-angular/
https://learn.openwaterfoundation.org/owf-learn-angular/angular-e2e-testing/

Cypress E2E Testing
Adding Cypress E2E testing to Angular 12 project: https://www.youtube.com/watch?v=ke1qAgF7Pt0
https://dev.to/angular/ci-ready-e2e-tests-for-angular-with-cypress-and-typescript-in-under-60-minutes-4f30
https://learn.openwaterfoundation.org/owf-learn-angular/cypress-e2e-testing/

Check Integration & E2E Testinh among others
https://livebook.manning.com/book/testing-angular-applications/cover/   (Book on Angular Testing)
https://testing-angular.com/ (Book on Angular Testing)

https://www.rishabhsoft.com/blog/automation-testing-in-ci-cd  (knowledable pupeteer- headless browser)

https://christianlydemann.com/complete-guide-to-angular-testing/

To add e2e tests to angular projects, use 'ng e2e'. QA??? <-------------------------------------------------------------------
Angular E2E, Protractor deprecated.can integrate with: Cypress(Prefer?), Nightwatch, and WebdriverIO. Playwright also has a migration guide.<----------
https://blog.angular.io/the-state-of-end-to-end-testing-with-angular-d175f751cb9c


https://purple.telstra.com/blog/run-angular-unit-tests-in-gitlab-ci  (Run Tests in Docker)
https://marutitech.com/qa-in-cicd-pipeline/

Build Pipeline
Unit Testing:  Eg. Test 1 component.mock dependencies.
Integration Testing: Test several related components work together in harmony . can use mock or real dependencies

Build or Release Pipeline
End-to-End testing: A helper robot behaves like a user to click around the app and verify  that if functions correctly.real tests. no mocked or fake dependencies
(eg *********QA writes e2e tests using Selenium******* Can integrate in Azure Devops Release Pipeline) <----------------------------------
https://www.geeksforgeeks.org/difference-between-end-to-end-testing-and-unit-testing/


Google's testing blog suggests a 70/20/10 split between unit, integration and end-to-end tests is a good, general rule of thumb.
https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html

Integrating QA's Selenium E2E Tests (Browser Testing) in Azure Devops Release Pipeline
https://azuredevopslabs.com/labs/vstsextend/selenium/

Integration Tests test REAL network responses 'by hitting the real server endpoint' ?
https://lawrey.medium.com/unit-tests-ui-tests-integration-tests-end-to-end-tests-c0d98e0218a6 (good ??)

Unit Testing, Integration Testing, End-to-End testing:
https://infinum.com/handbook/frontend/angular/angular-guidelines-and-best-practices/testing (good. testing an interceptor)
https://kentcdodds.com/blog/static-vs-unit-vs-integration-vs-e2e-tests
https://moduscreate.com/blog/an-overview-of-unit-integration-and-e2e-testing/

QA team usually writes end-to-end tests using Selenium or a similar framework.
https://methodpoet.com/unit-tests-vs-end-to-end-tests/

E2E testing  (Protractor [Angular CLI out of box] for E2E TEsting. Mimics user on a browser)
Angular CLI projects come with a separate E2E testing project which uses Protractor. Protractor is basically a wrapper around Selenium, which allows us to write tests in JavaScript, and it also has some Angular-specific helper functions.

https://angular.io/guide/testing
Most test suites in this guide call beforeEach() to set the preconditions for each it() test and rely on the TestBed to create classes and inject services.
You must tell the TestBed to perform data binding by calling fixture.detectChanges().
The Angular testing environment does not know that the test changed the component's title. call fixture.detectChanges()

let component: BannerComponent;
let fixture: ComponentFixture<BannerComponent>;
let h1: HTMLElement;

beforeEach(() => {
  TestBed.configureTestingModule({
    declarations: [ BannerComponent ],
  });
  fixture = TestBed.createComponent(BannerComponent);
  component = fixture.componentInstance; // BannerComponent test instance
  h1 = fixture.nativeElement.querySelector('h1');
});


Angular doesn't know that you set the input element's value property. It won't read that property until you raise the element's input event by calling dispatchEvent(). Then you call detectChanges().

  const nameInput: HTMLInputElement = hostElement.querySelector('input')!;
  const nameDisplay: HTMLElement = hostElement.querySelector('span')!;

  // simulate user entering a new name into the input box
  nameInput.value = 'quick BROWN  fOx';

  // Dispatch a DOM event so that Angular learns of input value change.
  nameInput.dispatchEvent(new Event('input'));

  // Tell Angular to update the display binding through the title pipe
  fixture.detectChanges();

  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');

https://jasmine.github.io/index.html

A component-under-test doesn't have to be injected with real services. In fact, it is usually better if they are test doubles such as,
stubs, fakes, spies, or mocks. <----------------------------
The purpose of the spec is to test the component, not the service, and real services can be trouble.

The .withContext() is a helpful Jasmine method to give us clearer error messages when values are not equal. Just provide more info

Create Component with test file:
https://angular.io/tutorial/toh-pt3
"ng generate component hero-detail"


{
  data: 'this is a test'
  length: 10
}

WithCredentials: When true, this property is used to include ***authentication cookies*** when making
cross-site requests. This setting must be used only with servers that include the
Access-Control-Allow-Credentials header in responses, as part of the Cross-Origin
Resource Sharing (CORS) specification. See the “Making Cross-Origin Requests”
section for details. pg 680 apress

When WithCredentials is true, the browser will include authentication
cookies, and headers from the origin will be included in the request to the server. pg 681

HTTP requests made using the Angular HttpClient class will automatically use Cross-Origin Resource
Sharing to send requests to different origins.
For Angular developers, CORs should work out of the box. Making cross origin requests as long as the
server supports CORS pg 681

fact
:
"Cats that live together sometimes rub each others heads to show that they have no intention of fighting. Young cats do this more often, especially when they are excited."
length
:
169



Extract YAML or snapshots from both Pipelines

Testing Links:

ng test parameters Ref: https://angular.io/cli/test
https://www.youtube.com/watch?v=FFxww1-M25E  (ng test - starting 11 min - good)


https://ciemasen.com/articles/how-to-build-angular-in-azure-devops  (best)
https://davemateer.com/2019/03/07/Azure-DevOps-GUI-Pipelines (good)
https://medium.com/@dijin123/angular-unit-testing-code-coverage-report-in-azure-devops-build-pipeline-a062c881609c (good)
https://tharaka-madhusanka.medium.com/publish-execute-angular-unit-tests-in-azure-devops-build-pipeline-with-code-test-unit-test-c32288d59e8d (ok for reference)
https://stackoverflow.com/questions/61669563/integrating-angular-test-cases-in-azure-pipelines

 install karma-junit-reporter to report test results as Junit
 npm install karma-junit-reporter --save-dev

---Official Testing Reference Docs---
https://angular.io/guide/testing
https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/customize-javascript?view=azure-devops
https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml
https://learn.microsoft.com/en-us/azure/devops/pipelines/test/test-glossary?view=azure-devops
https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=azure-devops


  - task: CmdLine@2
    displayName: "Run Angular tests"
    inputs:
      script: "ng test --watch=false --browsers=ChromeHeadless --code-coverage"

 adding eslint
 ng add @angular-eslint/schematics@14.2.0

SOSO....
https://medium.com/@kristaps.strals/build-and-test-projects-in-azure-devops-pipelines-745abea273b8
https://ngohungphuc.wordpress.com/2020/05/26/publish-angular-unit-test-result-with-azure-pipeline/
https://tharaka-madhusanka.medium.com/publish-execute-angular-unit-tests-in-azure-devops-build-pipeline-with-code-test-unit-test-2dd5cf6aea93

CI - lint, test, build and publish artifact
CD - deploy to azure app service  (each environment should have its own configuration)

Check azure test plans - Manual Testing

https://m.youtube.com/watch?v=Cu7zx9u1sOE
https://m.youtube.com/watch?v=LF0hmSysWCg     (Manual Testing with associated Testing Work Items)
https://www.azuredevopslabs.com/labs/azuredevops/testmanagement/

1) https://angular.io/guide/testing
2) Pro Angular Book

3) https://www.prestonlamb.com/blog/unit-testing-in-angular
4) https://www.prestonlamb.com/blog/intro-to-testing-in-angular




------------------------------------------------------TODOOOOOOOOOOOOOOO- Task---------------------------------------------------------------


Misc Others (e.g. Standalone Components)- Do after Task:
https://www.youtube.com/watch?v=KOz02yQU-SQ
https://www.youtube.com/watch?v=25IPuO_8hxg

https://www.youtube.com/watch?v=LAgpu2VtQME
https://www.youtube.com/watch?v=vpOxWPADDj4 - Angular Elements
https://www.youtube.com/watch?v=e8km3blGu6g
https://www.youtube.com/watch?v=7k0AqqJeWNo
https://www.youtube.com/watch?v=kIC_nWGggWw
https://www.youtube.com/watch?v=dOdxzHxSfD0
https://www.youtube.com/watch?v=x5PZwb4XurU  (standalone components -search youtube?)

Angular 15 changes (environments): https://blog.angular.io/angular-v15-is-now-available-df7be7f2f4c8

Angular Roadmap: https://angular.io/guide/roadmap

Go over: https://blog.angular.io/

Skim Micro-front End?

NGRX?
----------------------------------------------Angular Interview Oral Section---------------------------------------------------

Alexander Mazakas Jun - Senior Associate

1) Explain 2 way binding.

2) difference between ngIf and display:none?

3) How do you specify optional parameters in a function?

4) List Angular Lifecycle events and what they are used for?
	- difference between constructor and ngOnInit
	- what is ngOnInit?
	- what is ngOnchanges?
	- what is ngOnDestroy?
      - what is ngAfterViewInit?
      - what does @ViewChild(class) do Vs @ViewChild('dtExport') (Somewhat Advanced)

5) What do these ngModule options/property do?
   - imports
   - declarations
   - providers
   - exports

6) What are Pipes?
   Pipes are small fragments of code that transform data values so they can be displayed to the user in templates.
    Used to format data

7) Explain different ways how you can communicate between 2 components?
   how do you pass data from parent component to child component and vice versa?

   a) Via @Input() and @Output() Properties

   b) Using template reference variable. Parent interacts with child using local variable. Limitation only in parent template (template reference variable e.g.
   <div class="seconds">{{timer.seconds}}</div>
   <app-countdown-timer #timer></app-countdown-timer>

   c) Using Viewchild Property. Parent calls an @ViewChild() to get a reference to the child component so that it can call the
      child component's properties and methods

   d) Using a Service. Parent and children communicate using a service

8) What is a singleton Service? How do you create a singleton Service? . Only 1 instance throughout application
   @Injectable()
   providedIn: root

9) What is an Observable and when would you use it?
   Observables provide support for passing messages between parts of your application.

10) what is a Subject? How do you pass data using subject?   (Advanced)
	- what does subject.next method do? how do you receive results? via subscribe method

11) What is the difference between a Component and a Directive?
    Directives are classes that add additional behavior to elements in your Angular applications.
    Directive do not have a template
    https://stackoverflow.com/questions/34613065/what-is-the-difference-between-component-and-directive

12) Why would you use ng-container?  (Advanced)
    Because it doesn't get rendered on the DOM. Eg can not put both *ngIf and *ngFor on the same div tag

13) What is Dependency Injection and how do you specify it in Angular?

14) What is the difference between template and reactive forms?

15) difference between Structural Directive and Attribute directives
    https://stackoverflow.com/questions/34613065/what-is-the-difference-between-component-and-directive

    'Structural Directives' change the layout of the HTML document by 'adding and removing' elements
    Built-in: *ngIf, *ngFor, Custom: *paIf

    'Attribute Directives' modify the 'behavior' or 'appearance'(class/height) of the host element they are applied to
    Built-in: [(ngModel)], routerLink="/form/edit" ?, Custom: [(paModel)]  ngStyle

    There are mainly three kinds of directives,
    Structural directives   These directives change the DOM layout by adding and removing DOM elements. e.g  *ngIf, *ngFor
    Attribute directives   These directives change the appearance or behavior of an element, component, or another directive e.g ngModel
    Components   These are directives with a template.

- what is the purpose of using async/await on methods?  (non-blocking UI)

24) when do you use async pipe in template and what does it do?
  <p>{{ data | async }}</p>
   The built-in AsyncPipe subscribes to an observable and returns the latest value it has emitted

-   How does Angular change detection work?  (see below)
    checks all component tree from top to bottom. can use OnPush change detection to improve performance

22) How would you optimize change detection on a component?  (Advanced)
      - what does ChangeDetectionStrategy.OnPush do?

 21) how can you improve ngFor performance (trackby) - (Advanced)

- what is the difference between package.json and package-lock.json
  https://www.atatus.com/blog/package-json-vs-package-lock-json/
  (exact library versions if clone. recreate same development environment as the ones that checked in code)

  https://stackoverflow.com/questions/44206782/do-i-commit-the-package-lock-json-file-created-by-npm-5

  package-lock.json needs to be checked in to source control. It describes the exact tree to recreate same
  local development environment as the ones that checked in code


  In earlier versions of Node.js, the package.json file did not provide a way to lock down the specific version of each dependency
  that a project was using. This meant that when a project was deployed or shared with others, there was a risk that different developers
  or machines would use different versions of the same dependency, which could cause compatibility issues or unexpected behavior.

  Difference between "~" and "^" in package.json
  https://vibhas1892.medium.com/difference-between-tilde-and-caret-in-package-json-76701e514445

16) What is CORS?   (Advanced)
    Cross-origin resource sharing. e.g. Cross domain api call. www.carelonrx.com to api.carelonrx.com
    CORS defines a way for client web applications that are loaded in one domain to interact with resources in a different domain

    Origin includes the combination of protocol, domain, and port. This means https://api.mydomain.com and https://mydomain.com are actually different origins and thus impacted by same-origin policy. In a similar way, http://localhost:9000 and http://localhost:8080 are also different origins. The path or query parameters are ignored when considering the origin.

    https://www.bannerbear.com/blog/what-is-a-cors-error-and-how-to-fix-it-3-ways/

    port<-><--domain--><port>
    https://domain-a.com:8080

17) What is an activation guard (CanActivate) and how/when do you use it?  (to guard routes - Advanced)

18) What is a de-activation guard (CanDeactivate) and how/when do you use it? (to guard routes - Advanced)

19) What is a route resolver and how/when do you use it? (to guard routes - Advanced)

20) what are Angular Elements/Custom Elements/Web Components?   (can use it in different frameworks - Advanced) - knowledge testing

-)What are Dynamic components  (load component at run time as opposed to creating them at design time - Advanced)

23) what is an http interceptor?  (advanced)
Modify HTTP headers
Modifying the request body
Set authentication/authorization token
Modify the HTTP response
Error handling

25) purpose of environment folder?  (advanced)

- have you ever added a custom type in angular? (advanced)

- what is the polyfill file used for? (advanced)

26) Deployment to Cloud? Azure, AWS?

27) CI/CD Azure etc ?

28) NGRX

----------------------------------------------Typescript Oral Section---------------------------------------------------


26) difference between == and ===?
    == checks only the value
    === checks both data type and value

27) difference between var and let

28) what is hoisting? (advanced)

29) how do you check a variable type? typeof

29b) how do you check if object is an instance of a particular class ? instanceof
     if (ev.target instanceof HTMLInputElement)

30) how do you call base class constructor?
    super()

31) difference between public, private and protected?

public This keyword is used to denote a property or method that can be accessed anywhere. This is the default access protection if no keyword is used.

private This keyword is used to denote a property or method that can be accessed only within the class that defines it.

protected This keyword is used to denote a property or method that can be accessed only within the class that defines it or by classes that extend that class


31b) How do you inherit a class? using 'extends'
     How do you implement an interface? using 'implements'

export class CompareToAnalogComponent	extends BaseComponent
					implements OnInit, AfterViewInit, OnDestroy {

32) what is this keyword?
  This  keyword refers to an object that is executing the current piece of code. It references the object that is executing
 the current function. If the function being referenced is a regular function,  this  references the global object.

 https://www.w3schools.com/js/js_this.asp
 In an object method, this refers to the object.
 Alone, this refers to the global object.
 In a function, this refers to the global object.

----------------------------------------------Javascript Oral Section---------------------------------------------------


33) what is the difference between null(absense of data) and undefined (declared but not set/initialized)? (tricky but good to know)

34) what do setInterval() and setTimeout() do?
   trigger change detections.
   setInterval(): execute piece of code after regular intervals
   setTimeout(): execute piece of code after a set time period

----------------------------------------------------Angular Coding Portion using StackBlitz-------------------------------------------------------


Task 0:
                    ---->
                    <----
a)  In <button [color]="getColor()"> binding, which direction is the data flowing?   <----(Typescript to View) OR ----> (View to Typescript)

                      ---->
                      <----
b)  In <button (onclick)="getColor($event)"> binding, which direction is the data flowing?   <----(Typescript to View) OR ----> (View to Typescript)


c) What will this do?  Skip
<div>{{ getProducts() | json }}</div>

d) How will the text between "" be treated differently?
<div [class]="getClasses(2)">
<div class="getClasses(2)">



Candidate 1
Task 1:  Convert function to arrow function
https://stackblitz.com/edit/angular-eqpg3r
https://stackblitz.com/edit/angular-vvwobm (completed)

Task 2:  Pass Data from Child component to Parent component
https://stackblitz.com/edit/angular-4n3eqp
https://stackblitz.com/edit/angular-te7jka (completed)

Task 3: Pass Data between 2 components using a Service  (Advanced)
https://stackblitz.com/edit/angular-p99do7
https://stackblitz.com/edit/angular-gk8dpm (completed)

Misc Task: Find 1st three even numbers in the array  (Use Mod- % operator and check remainder-> even # check)
https://stackblitz.com/edit/angular-7i3ekc
https://stackblitz.com/edit/angular-rxsk3b


https://stackblitz.com/edit/angular-phww6j?file=src%2Fapp%2Fhello.component.ts,src%2Fapp%2Fapp.service.ts,src%2Fapp%2Fapp.component.ts
https://stackblitz.com/edit/angular-pavwm8?file=src%2Fapp%2Fhello.component.ts,src%2Fapp%2Fapp.service.ts,src%2Fapp%2Fapp.component.ts


Candidate 2
Task 1:  Convert function to arrow function
https://stackblitz.com/edit/angular-jfwk4f

Task 2:  Pass Data from Child component to Parent component
https://stackblitz.com/edit/angular-htnbhw

Task 3: Pass Data between 2 components using a Service  (Advanced)
https://stackblitz.com/edit/angular-7dfy3

https://stackblitz.com/edit/angular-pavwm8?file=src%2Fapp%2Fhello.component.ts,src%2Fapp%2Fapp.service.ts,src%2Fapp%2Fapp.component.ts

-----------------------------------------------Job Description(JD) Based Questions-----------------------------------



List JD based skills needed and add questions accordingly


Roles/Responsibilities

 - UI application architecture   modules, components, routing and integration
    Manage UI application development and guide developers
   1) Have you ever solely designed front-end architecture of an Angular project?
	   4 people - Team Lead, collabartive

   2) Have you ever lead a team and guided junior developers? for 3 months- keurig

   Cross Check Knowledge
    - What are some of the "best practices" in designing a website using Angular?
      security level, auth we need, cors
      testcases

    - What is the difference between a
     core module:
     shared module:  common code (put shared components)
     feature module: ok

 - Performance optimization
   1) some Angular Performance Optimization
       - how can you improve ngFor performance (trackby) -  ok
       - What is ChangeDetector strategy OnPush?  -
       - What is lazy loading? - ok
       - what is the purpose of using async/await on methods?  (non-blocking UI)
       - difference between dev build and prod build?
	    code generation
       - How does Angular achieve cache busting? -

 - Deployment and build strategy-  just know the process. haven't been in charge
   1) Have you ever been in charge for Build and Deployment for any project? What tool did you use? Follow up Qs? -
   2) Have you ever implemented CI/CD using any tool? Azure Devops, Jenkins etc
      Deployment to Cloud? Azure, AWS?

     Cross Check Knowledge
     What is CI/CD and How does it work? - Jenkins
     APi Urls how update environment to environment? -

 - Have you interacted with project stakeholders to deliver a product?

----------------------------------------------Angular Oral Section---------------------------------------------------

 Angular Ref: https://angular.io/guide/cheatsheet
 Typescript Ref: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html
 Typescript Ref 2: https://www.typescriptlang.org/docs/handbook/2/classes.html
 Typescript Ref 3: https://www.typescriptlang.org/cheatsheets
 Typescript Utilities: https://www.typescriptlang.org/docs/handbook/utility-types.html

 Javascript Array Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
 Javascript String Reference:  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
 Lodash Reference: https://lodash.com/docs

 ***Javascript String***
 indexof: The indexOf() method of String values searches this string and returns the index of the first occurrence of the specified substring. Return -1 if not found

   const paragraph = 'The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?';
   const searchTerm = 'dog';
   const indexOfFirst = paragraph.indexOf(searchTerm);

 includes
    The includes() method of String values performs a case-sensitive search to determine whether a given string may be found within this string, returning
    true or false as appropriate.

    const sentence = 'The quick brown fox jumps over the lazy dog.';
    const word = 'fox';
    console.log(`The word "${word}" ${sentence.includes(word) ? 'is' : 'is not'} in the sentence`);

 slice
   The slice() method of String values extracts a section of this string and returns it as a new string, without modifying the original string.
   const str = 'The quick brown fox jumps over the lazy dog.';
   console.log(str.slice(31));
   // Expected output: "the lazy dog."

 split
   The split() method of String values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.
   const str = 'The quick brown fox jumps over the lazy dog.';

   const words = str.split(' ');
   console.log(words[3]);
   // Expected output: "fox"

  toLowerCase  (toUpperCase)
  The toLowerCase() method of String values returns this string converted to lower case.
  const sentence = 'The quick brown fox jumps over the lazy dog.';
  console.log(sentence.toLowerCase());
  // Expected output: "the quick brown fox jumps over the lazy dog."

  trim
  The trim() method of String values removes whitespace from both ends of this string and returns a new string, without modifying the original string.
  const greeting = '   Hello world!   ';
  console.log(greeting);
  // Expected output: "   Hello world!   ";
  console.log(greeting.trim());


***Javascript Array***
 indexof: The indexOf() method of Array instances returns the first index at which a given element can be found in the array, or -1 if it is not present.
   const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];
    console.log(beasts.indexOf('bison'));

 includes
   The includes() method of Array instances determines whether an array includes a certain value among its entries, returning true or false as appropriate.
   const array1 = [1, 2, 3];
   console.log(array1.includes(2));

 filter
   The filter() method of Array instances creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array
   that pass the test implemented by the provided function.
   const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
   const result = words.filter((word) => word.length > 6);

 find
  The find() method of Array instances returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.
  const array1 = [5, 12, 8, 130, 44];
  const found = array1.find((element) => element > 10);

 forEach
   The forEach() method of Array instances executes a provided function once for each array element.
   const array1 = ['a', 'b', 'c'];
   array1.forEach((element) => console.log(element));

 map
   The map() method of Array instances creates a new array populated with the results of calling a provided function on every element in the calling array.
   const array1 = [1, 4, 9, 16];
   // Pass a function to map
   const map1 = array1.map((x) => x * 2);

push
   The push() method of Array instances adds the specified elements to the end of an array and returns the new length of the array.
   const animals = ['pigs', 'goats', 'sheep'];
   const count = animals.push('cows');

reduce
   The reduce() method of Array instances executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the
   return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.

   const array1 = [1, 2, 3, 4];

   // 0 + 1 + 2 + 3 + 4
   const initialValue = 0;
   const sumWithInitial = array1.reduce((accumulator, currentValue) => accumulator + currentValue, initialValue);

   console.log(sumWithInitial); // 10


slice
   The slice() method of Array instances returns a shallow copy of a portion of an array into a new array object selected from start to end (end not
   included) where start and end represent the index of items in that array. The original array will not be modified.

   const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
   console.log(animals.slice(2));

 splice
   The splice() method of Array instances changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
   splice(start)
   splice(start, deleteCount)
   splice(start, deleteCount, item0)
   splice(start, deleteCount, item0, item1)

   const months = ['Jan', 'March', 'April', 'June'];
   months.splice(1, 0, 'Feb');
   // Inserts at index 1
   console.log(months);
   // Expected output: Array ["Jan", "Feb", "March", "April", "June"]

   months.splice(4, 1, 'May');
   // Replaces 1 element at index 4
   console.log(months);
   // Expected output: Array ["Jan", "Feb", "March", "April", "May"]


 every: The every() method of Array instances tests whether all elements in the array pass the test implemented by the provided function.
 some: The some() method of Array instances tests whether at least one element in the array passes the test implemented by the provided
	function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.

 LODASH
    _.cloneDeep(value)


Compare 2 arrays or 2 objects to see if they are equal. Deep comparison
1) Lodash faster, Sort Order doesn't matter. More Thorough solution
Lodash - Issue if remove all elements to [] and then re-add- it doesn't equal
 https://lodash.com/docs/#isEqual (_.isEqual(value, other))

2) JSON.stringify. sort order matters.But less performant. issue null or undefined.
https://www.samanthaming.com/tidbits/33-how-to-compare-2-objects/

const k1 = { fruit: '??' };
const k2 = { fruit: '??' };

// Using JavaScript
JSON.stringify(k1) === JSON.stringify(k2); // true

// Using Lodash
_.isEqual(k1, k2); // true


RXJS
https://www.thisdot.co/blog/basic-rxjs-operators-and-how-to-use-them/

*SwitchMap*

Real life example for switchMap:
AutoComplete
If you google something, you press a key on the big input box, and then you get suggestions for things you might mean to write.

So every new input triggers a new ajax request for that search term.

If you just used mergeMap you’ll get suggestions for every key stroke
(“m”, “my “, “my p” …. “my parrot is looking at me like I owe him money!”)

But switchMap will make sure that the ongoing http request is being canceled on every new search input, and only the newest http request is live.


Map, Filter example:
https://stackblitz.com/edit/angular-filter-on-data-from-api-jdvb7b
https://stackblitz.com/edit/angular-filter-on-data-from-api-zyel62
https://stackoverflow.com/questions/60592517/trying-to-filter-via-rxjs-data-returned-via-angulars-httpclient-which-is-return

  ngOnInit() {
    this.http
      .get('https://jsonplaceholder.typicode.com/users')
      .pipe(
        tap((users) => console.log(users)),
        map((users: any) =>
          users.filter((user) => user.name.includes('Leanne'))
        )
      )
      .subscribe((users: any) => {
        console.log(users);
        this.users = users;
        this.filteredUsers = [...this.users];
      });
  }

forkjoin
https://medium.com/@swarnakishore/performing-multiple-http-requests-in-angular-4-5-with-forkjoin-74f3ac166d61

how to use lodash in typescript
https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html

how to add boostrap in stackblitz
https://thinkster.io/tutorials/blogs/how-to-add-bootstrap-to-an-angular-stackblitz-project

1) Var Vs Let
Let has block scope whereas Var has function scope
Always use 'let' block scope vs var 'function of global scope'

2) Closures: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures (IIFE -> Immediately Invoked Function Expression)
In other words, a closure gives you access to an outer function's scope from an inner function.

A closure is the combination of a function bundled together (enclosed) with references to its surrounding state
(the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner
function. In JavaScript, closures are created every time a function is created, at function creation time.

Using closures in this way provides benefits that are normally associated with object-oriented programming. In particular,
data hiding and encapsulation.


3) Var and Let hoisting.
for 'var', declaration is moved to top of function (hiding another global variable of the same name). for 'let'
declaration is moved to top of block scope-curly braces (not function)
(search above)

- Have you ever used Jwtoken, oAuth or any Authentication mechanism?

- what is the difference between package.json and package-lock.json.
      Would you check-in package-lock.json to source control?

4) Option Strict. https://www.typescriptlang.org/tsconfig#strict
The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.

5) Difference between Promise and Observable:
https://www.freecodecamp.org/news/what-are-observables-how-they-are-different-from-promises/
Observables are lazy whereas promises are not
This is pretty self-explanatory: observables are lazy, that is we have to subscribe observables to get the results. In the case of promises, they execute immediately.

Observables handle multiple values unlike promises
Promises can only provide a single value whereas observables can give you multiple values (stream of values).

Observables are cancelable
You can cancel observables by unsubscribing it using the unsubscribe method whereas promises don t have such a feature.

Observables provide many operators
There are many operators like map, forEach, filter etc. Observables provide these whereas promises does not have any operators in their bucket.

Content projection is a pattern in which you insert(or project) the content you want to use inside another component.
Project host component content to another content

Summary: Host Component will project paProductTable to ng-content in paToggleView Component
Instead of hardcoding in paToggleView, you let the host component project it. Because some other host component could also
use paToggleView and project something different to it. Delegate the content responsibility to the host component.

Angular.Json: https://angular.io/guide/workspace-config
ANGULAR.JSON is the file which has various properties and configuration of your Angular project. (https://medium.com/siam-vit/how-an-angular-app-work-behind-the-scenes-angular-flow-dcc4d1df27bd)
contains build configuration settings. contains workspace-wide and project-specific configuration defaults
Can bundle up your styles and scripts.

Main.ts: This file acts as the entrypoint of the Angular application. It Bootstraps and loads the AppModule to run it in the browser
Main.ts helps in creating the browser environment for the application to run.

tsconfig.json: contains typescript configuration(what library to target via lib and what echmascript version to target via target) & compiler options

polyfill: https://developer.mozilla.org/en-US/docs/Glossary/Polyfill
A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it.

Angular Best Practices:
1) Do define one thing, such as a service or component, per file. Consider limiting files to 400 lines of code.
2) Do define small functions. Consider limiting to no more than 75 lines. Should do one thing and serve one purpose
3) Naming Guidelines. Do follow a pattern that describes the symbol's feature then its type. The recommended pattern is feature.type.ts.
    a) Separate file names with dots and dashes. A recommended pattern is feature.type.ts. Do use conventional type names including .service, .component, .pipe, .module, and .directive
    b) Do use consistent names for all services named after their feature. Do suffix a service class name with Service. For example, something that gets data or heroes should be called a DataService or a HeroService.
    c) Do use dashed-case or kebab-case for naming the element selectors of components. selector: 'tohHeroButton' =>  selector: 'toh-hero-button'
       Kebab case is written like works are put in a shish-kebab--like-this-for-example. Camel case uses capitalization instead of spaces--capitalizationLooksLikeThis.
    d) Component custom prefix. Do use a hyphenated, lowercase element selector value; for example, admin-users
    e) Pipename. The pipe class name should use UpperCamelCase(InitCapsPipe) (the general convention for class names), and the corresponding selector name string should use lowerCamelCase (@Pipe({ name: 'initCaps' })

4) Application structure
   All of the application's code goes in a folder named src. All feature areas are in their own folder, with their own NgModule.

5) Shared Module
    SharedModule - exists to make commonly used components, directives, and pipes available for use in the templates of components in many other modules.
    Do create a feature module named SharedModule in a shared folder; for example, app/shared/shared.module.ts defines SharedModule.

    Do declare components, directives, and pipes in a shared module when those items will be re-used and referenced by the components declared in
    other feature modules.

    Consider not providing services in shared modules. Services are usually singletons that are provided once for the entire application or in a particular feature module.

    Do import all modules required by the assets in the SharedModule; for example, CommonModule(NgIf, NgForOf, DecimalPipe) and FormsModule.
    Do export all symbols from the SharedModule that other feature modules need to use

 6) Feature Module
    Do create different modules for each feature. A feature module can easily be routed to both eagerly and lazily.

 7) Note: No mention of Core Module now in angular style guide. But can be used for singleton services or singleton components if needed.
 Puts Navbar, Growler(toaster) and Model Components (singleton components) under Core Module

 8) Lazy Loaded folders (Don't use unless you have to)
    Do put the contents of lazy loaded features in a lazy loaded folder. A typical lazy loaded folder contains a routing component, its child components, and their related assets and modules.

 9) Consider giving components an element selector, as opposed to attribute or class selectors.

 10) Extract templates and styles to their own files: [component-name].component.html, [component-name].component.css

 11) Avoid aliasing Inputs and Outputs properties
     Avoid input and output aliases except when it serves an important purpose.
     Two names for the same property (one private, one public) is inherently confusing.

    Change Below
    // Pointless aliases
    @Output('heroChangeEvent') heroChange = new EventEmitter<any>();
    @Input('labelAttribute') label: string;

    TO

    // No aliases
    @Output() heroChange = new EventEmitter<any>();
    @Input() label = '';

 12) Member sequence
     Do place properties up top followed by methods.

     Do place private members after public members, alphabetized.

     properties
     public methods
     private methods

 13) Don't name Output Properties starting with prefix 'on'
     e.g   @Output() onSavedTheDay = new EventEmitter<boolean>(); <-- incorrect
             @Output() savedTheDay = new EventEmitter<boolean>(); <-- correct

 14) Whenever possible initialize Input Properties by providing a default value
     @Input() id = 'default_id';

     If the property is hard to construct a default value for, use ? to explicitly mark the property as optional
      @Input() id?: string;

 15) Consider preferring the @HostListener and @HostBinding to the host property of the @Directive and @Component decorators.

 16) Do use services as singletons within the same injector. Use them for sharing data and functionality.
     Services are ideal for sharing methods across a feature area or an app.

     Available application wide:
     @Injectable({
        providedIn: 'root',   <--providing service to the root injector
     })

 17) Use Lifecycle hooks to tap into important events exposed by Angular.


 Misc ones:
 18) Use trackBy along with ngFor to improve performance. Using only *ngFor directive without trackBy function in an angular application will remove all the DOM elements and then it will recreate the DOM elements again in the DOM tree. So even when the same data is getting used, it ll slow the application performance when there is a lot of data. That is why it is good to use trackBy along with *ngFor directive.
 19) Can use lazy loading if needed
    const routes: Routes = [
    {
      path: 'profile',
      loadChildren: () => import('./modules/profile/profile.module').then(m => m.ProfileModule)
    }
  ];


 20) Unsubscribe from Obervables e.g. using takeUntil:
     https://www.linkedin.com/pulse/how-unsubscribe-from-observables-angular-samuel-y-

This operator emits values emitted by the source Observable until a notifier Observable emits a value.
@Component({...})
export class AppComponent implements OnInit, OnDestroy {
    notifier = new Subject();

    ngOnInit () {
        var observable$ = Rx.Observable.interval(1000);
        observable$.pipe(
            takeUntil(this.notifier),
        ).subscribe(x => console.log(x));
    }

    ngOnDestroy() {
        this.notifier.next();
        this.notifier.complete();
    }

}

  21) Use  ESLint
  22) Use compiler option strict mode to true in tsconfig.ts version 12 and up (if possible)
  23) OnPush Change Detection strategy
      When you use OnPush, only changes to *your @Inputs* (in case of objects, reference to new object must be passed) and Observable emits that are caught
      by the async pipe trigger change detection

      By using the OnPush change detection strategy, Angular will only check for changes when the input changes, rather than every time there is a
      change in the application.
  24) Use AOT compilation
      Ahead of Time (AOT) compilation improves the application s performance by compiling the template code during the build process.
      ng build --aot

      AOT Vs JIT
      Compiles your application and libraries at build time. This is the default starting in Angular 9.
      In JIT, the Angular application is compiled in the browser, during runtime. This means that the application is compiled just before it is executed

      The Ahead Of Time Compiler converts all your Angular HTML and Typescript code to Javascript. (https://medium.com/taager-tech-blog/angular-what-is-aot-vs-jit-compilation-and-how-it-works-a52c81bc58f#:~:text=You%20can%20change%20the%20compiler,to%20enable%20the%20JIT%20compiler.)

      Angular version <= 8  Default is JIT compilation
      Angular version >= 9  Default is AOT compilation (https://medium.com/taager-tech-blog/angular-what-is-aot-vs-jit-compilation-and-how-it-works-a52c81bc58f#:~:text=You%20can%20change%20the%20compiler,to%20enable%20the%20JIT%20compiler.)


Dependency injection
can inject services in component via having them as parameters in constructor
can help in unit testing (can mock them)

angular selector: element Vs attribute: https://blog.knoldus.com/different-types-of-component-selectors-in-angular/
selector: 'app-element, [app-element]',

Change Detection reference: https://mokkapps.de/blog/the-last-guide-for-angular-change-detection-you-will-ever-need/
Change Detection: The process of updating the view (DOM) when the data has changed

1) When Change Detection by default occurs:
  a) Any browser event (click, keyup, etc.)
  b) setInterval() and setTimeout()
  c) HTTP requests via XMLHttpRequest

2) How to manually trigger Change Detection?
  a) ChangeDetectorRef.detectChanges() triggers change detection on this view and its children by keeping the change detection strategy in mind
  b) ApplicationRef.tick()             triggers change detection for the whole application by respecting the change detection strategy of a component

  c) ChangeDetectorRef.markForCheck()  [use used much] which does not trigger change detection but marks all OnPush *ancestors* as to be checked once, either as part of the current or next change detection cycle.



Eager Loading Vs Lazy Loading
Eager loading is loading modules before application starts. Lazy loading(loadchildren) is loading modules on demand.



Observable, Observer, Subject

In stream programming there are two main interfaces: Observable and Observer.

Observable is for the consumer, it can be transformed and subscribed:
observable.map(x => ...).filter(x => ...).subscribe(x => ...)

Observer is the interface which is used to feed an observable source:
observer.next(newItem)

Or, we can use a Subject which implements both the Observable and the Observer interfaces:
var source = new Subject();
source.map(x => ...).filter(x => ...).subscribe(x => ...)
source.next('first')
source.next('second')


Difference Between Template and Reactive Forms
-Template-driven forms make use of the "FormsModule", while reactive forms are based on "ReactiveFormsModule".
-Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.
-In a template-driven approach, most of the logic is driven from the template, whereas in a reactive-driven approach, the logic resides mainly in the component or typescript code.
-Template-driven forms based only on template directives, but Reactive forms are defined programmatically at the level of the component class.
-Reactive Forms are more powerful as they are and easier to use, therefore, forms are a better default choice for new applications.
-The Reactive approachable to removes validation logic from the template, keeping the templates cleaner.
-Compared to template-driven forms, reactive forms more robust: they re more scalable, reusable, and testable.
-Template-driven forms are suitable for small or simple forms, whereas reactive forms are more scalable and suitable for complex forms.


Difference between Pure and Impure Pipes

Pipe Pure=true: Default is evaluated when data value before the vertical bar character in the template changes or when
one or more of its arguments is modified.

Pipe is re-evaluated if item.price changes or taxRate changes
<td>{{item.price | addTax:(taxRate || 0) | currency:"USD":"symbol" }}</td>

Pure=false. Pipe is re-evaluated / invokes the transform methods even when there has been no data value or argument changes
Impure- don't use- performance issue. re-evaluated too often


NGRX (state management framework)
NgRx is a framework for building reactive web applications in Angular.
The Angular NgRx store is a client-side data management pattern
A global state for the reuse of data
Example Usecase: To keep 2 tabs in sync since they'll share the same data source


Difference between local Storage and session storage: https://www.geeksforgeeks.org/difference-between-local-storage-session-storage-and-cookies/
local Storage is stored across browser sessions. session storage expires when the browser or tab is closed

Client Side Storage Options:
https://medium.com/@lancelyao/browser-storage-local-storage-session-storage-cookie-indexeddb-and-websql-be6721ebe32a

1) Local Storage and Session Storage
2) IndexedDB
3) Web SQL
4) Cookies


Angular Elements
Angular elements are Angular *components* packaged as custom elements (also called Web Components), a web standard for defining new HTML
elements in a framework-agnostic way.
Create an Angular Component that can be used in another framework.
Web components are a set of browser APIs that enable developers to create custom and reusable HTML tags that can be used in web apps just like standard HTML tags
Re-usable components that you can embed in any front-end website-> Angular, React, Html page
Base re-usable component (Web Component) can be created as an Angular Element or React Component wrapped/converted to be a Web Component

Dynamic Components
Create and load new components on the fly.
Component templates are not always fixed. An application might need to load new components at runtime.

Route resolvers allow us to provide the needed data for a route, before the route is activated

Routes Properties
resolve: This property is used to define work that must be completed before a route can be activated, as described in Chapter
             Delaying navigation until a task is complete. Use a route resolver

canActivate: This property is used to control when a route can be activated (e.g is user authenticated)
              Preventing route activation. Use an activation guard

canDeactivate: This property is used to control when a route can be deactivated so that a new route can be activated
               e.g if the form has unsaved changes and the user tries to navigate away fromit
               Preventing the user from navigating away from the current content. Use a deactivation guard

Http Interceptor
7 ways to use http interceptors (authorization, logging) - intercept requests to web server or responses from web server
https://blog.bitsrc.io/7-ways-to-leverage-httpinterceptors-in-angular-59436611844d
1) Header Modification
2) Request body modification
3) HttpRequest body
4) Authentication/Authorization <------ jwt token example
5) Backend Mock
6) Caching
7) Logging

ViewEncapsulation pg 429
Emulated:    **Default** Component styles are seperate from others. but it still allows elements to be styled by the global CSS styles e.g Bootstrap
ShadowDom:   When this value is specified, Angular uses the browser s shadow DOM feature
None:        When this value is specified, Angular simply adds the unmodified CSS styles to the head
section of the HTML document and lets the browser figure out how to apply the styles using

Explain the purpose of the  in  operator.
The in operator is used to find if a property is in the specified object. It returns true if the property belongs to the object. Otherwise, it returns false.

const car = { make: 'Hyundai', model: 'Elantra', year: 2017 };
console.log('model' in car);  // true
console.log('test' in car);  // false

Type Assertion (also known as Type casting in other languages)
let someValue: any = "Hello";
let stringLength: number = (someValue as string).length; OR
let stringLength: number = (<string>someValue).length;

Omit: https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys
Create a new type excluding some properties

Difference between ng-template, ng-container, and ng-content
https://vibhas1892.medium.com/difference-between-ng-template-ng-container-and-ng-content-a1d264619655


Components AND Directives Lifecycle Hooks
ngOnChanges()  (first call)
ngOnInit()     (input properties are now set. Can use them now. Initialize component/directive)
ngOnChanges()  (whenever input properties change)
ngDoCheck()    Detect and act upon changes that Angular can't or won't detect on its own. This method is called when Angular runs its change detection process so that directives have an opportunity to update any state that isn t directly associated with an input property.
ngOnDestroy()  Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.

Components lifecycle hook
ngAfterViewInit()     --> This method is called after Angular initializes the component's views and child views. The results of the view queries are set before this method is invoked.
ngAfterContentInit()  --> This method is called after Angular projects external content into the component's view. Called once after the first ngDoCheck().

Directives lifecycle hook
ngAfterViewInit()     --> This method is called after Angular initializes the view that contains the directive.
ngAfterContentInit()  --> This method is called after Angular projects external content into the view that a directive is in.



ngOnInit This method is called after Angular has set the initial value for all the input
properties that the directive has declared.

ngOnChanges This method is called when the value of an input property has changed and also
just before the ngOnInit method is called.

ngDoCheck This method is called when Angular runs its change detection process so that
directives have an opportunity to update any state that isn t directly associated
with an input property.

ngAfterContentInit This method is called when the directive s (projected) content has been initialized. See the
 Receiving Query Change Notifications  section in Chapter 14 for an example
that uses this method.

ngAfterContentChecked This method is called after the directive s content has been inspected as part of
the change detection process.

ngOnDestroy This method is called immediately before Angular destroys a directive.

@ViewChild(class)
This decorator tells Angular to query for the first directive or component object
of the specified type and assign it to the property. The class name can be
replaced with a template variable. Multiple classes or variable names can be
separated by commas.

@ViewChildren(class)
This decorator assigns all the directive and component objects of the specified
type to the property. Template variables can be used instead of classes, and
multiple values can be separated by commas. The results are provided in a
QueryList object, described in Chapter 14.

ngAfterViewInit
This method is called when the component s view has been initialized. The
results of the view queries are set before this method is invoked.

ngAfterViewChecked
This method is called after the component s view has been checked as part of the
change detection process.


https://angular.io/guide/lifecycle-hooks <--good

import { noop } from "rxjs";

this.xxx.subscribe (
  noop,   <----------- success function. noop function does nothing
  ()=> alert('df')
)

Vs

using PartialObservable
this.xxx.subscribe ({
 next: () => {},
 error: () => {},
 complete: () => {}
})


http call reference - rxjs
https://www.thisdot.co/blog/mapping-returned-http-data-with-rxjs/

Note: Map and Taop operators are applied before subscribe****

//only return a specific object from api response. (api response could have alot of misc data)
this.http.get("https://swapi.dev/api/people/1")
    .pipe(map(response => ({
        name: response.name,
        birthYear: response.birth_year,
        height: Number(response.height),
        weight: Number(response.mass),
        eyeColor: response.eye_color
 })))
 .subscribe(luke => console.log(luke))

Rxjs - Tap operator
In Angular, the tap operator in RxJS is used to perform side effects for each emitted value from an observable stream, without modifying or transforming the values themselves.

Transparently perform actions or side-effects, such as logging using Tap operator

ngOnInit() {
    this.userService.getUsers()
      .pipe(
        tap(user => console.log(user))
      )
      .subscribe(users => this.users = users);
  }

'!!' operator is just 2 !
It converts Object to boolean. If it was falsy (e.g., 0, null, undefined, etc.), it would be false, otherwise, true.
!object  // Inverted Boolean
!!object // Noninverted Boolean, so true Boolean representation
Ref: https://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript

----------------------------------------------------------------

12) Why would you use ng-container?  (Advanced) ))

16) What is CORS?   (Advanced) -

17) What is an activation guard (CanActivate) and how/when do you use it?  (to guard routes - Advanced)

19) What is a route resolver and how/when do you use it? (to guard routes - Advanced)

20) what are Angular Elements/Custom Elements/Web Components?   (can use it in different frameworks -Advanced) - knowledge testing


-)What are Dynamic components  (load component at run time as opposed to creating them at design time Advanced)

23) what is an http interceptor?  (advanced)
Modify HTTP headers
Modifying the request body
Set authentication/authorization token
Modify the HTTP response
Error handling

what is tsconfig.json - ok

what is angular.json -

25) purpose of environment folder?  (advanced)

- what is the polyfill file used for? (advanced)

2) difference between ngIf and display:none?

4) List Angular Lifecycle events and what they are used for?
	- difference between constructor and ngOnInit
	- what is ngOnInit?
	- what is ngOnchanges?
	- what is ngOnDestroy?
      - what is ngAfterViewInit?  4/10
      - what does @ViewChild(class) do Vs @ViewChild('dtExport') (Somewhat Advanced)

5) What do these ngModule options/property do?
   - imports
   - declarations
   - providers
   - exports

6) What are Pipes? - ok

7) Explain different ways how you can communicate between 2 components? Input/Output, RxJs
   how do you pass data from parent component to child component and vice versa?

8) What is a singleton Service? How do you create a singleton Service?

9) What is an Observable and when would you use it?

10) what is a Subject? How do you pass data using subject?   (Advanced)
	- what does subject.next method do? how do you receive results? via subscribe method

-----
11) What is the difference between a Component and a Directive?

13) What is Dependency Injection and how do you specify it in Angular?

14) What is the difference between template and reactive forms?

24) what does async pipe do?
  <p>{{ data | async }}</p>

3) How do you specify optional parameters in a function?

1) Explain 2 way binding.

----------------------------------------------Typescript Oral Section---------------------------------------------------

27) difference between var and let

28) what is hoisting? (advanced)

26) difference between == and ===?

----
29) how do you check a variable type? typeof

31) difference between public, private and protected?

32) what is this keyword?


----------------------------------------------Javascript Oral Section---------------------------------------------------


33) what is the difference between null(absense of data) and undefined (declared but not set)? (tricky but good to know)

const names = ["Alice", "Bob", "Eve"];

for (const item of names) {
}

names.forEach((s) => {
  console.log(s.toUpperCase());
});

What is an Immediately Invoked Function in JavaScript?
(function(){
  // Do something;
})();

An Immediately Invoked Function ( known as IIFE and pronounced as IIFY) is a function that runs as soon as it is defined.

What are closures in JavaScript?
Closures (closureFn) are functions that have access to variables from an outer function even after the outer function has
finished executing. They  remember  the environment in which they were created.

How do you handle errors in JavaScript?
Errors in JavaScript can be handled using try-catch blocks.


--------------------------------------------------CSS---------------------------------------------------

 - Work closely with UX to create screens
   Some CSS questions
    -what is the css selector for selecting via classes vs selecting via ids
    -what happens if you increase border-radius on a div from 25px to 50px?

    -how would you place a div at the right end of the page? thought process (css float or flexbox).
      1) css:       -----> float:right
       <div>
         <span>One</span>
         <span style="float:right">Two</span>
       </div>

       2) flexbox:  -----> margin-left:auto
        <div  style="display: flex;">
           <span>One</span>
           <span  style="margin-left:auto">Two</span>
        </div>



       What does float: left do?
       Go to Boostrap Flex Utilities page and tell me how to place a div in center vs to the right???
    -what is the difference between margin and padding. Which one is inside the border? - ok
    -What happens if you give margin-top: -5px in regards to layout #?
    -what does z-index do?  -
    -difference between px and rem?

    -what does !important do?


 - Code maintenance strategy   repository, branches, merging and quality check
   1) Which version control worked on and which project?  (Git)
   2) Where was the source code hosted? e.g Azure Devops
   3) Have you ever merged a branch in any of your previous projects?*
   4) Have you ever written unit tests in any of your previous projects?*
	  what tool did you use? cross check resume


--------------------------------------------------Coding Task---------------------------------------------------


Task 1:  Pass Data from Child component to Parent component
https://stackblitz.com/edit/angular-qcpxv4

Task 2: Pass Data between 2 components using a Service  (Advanced)
https://stackblitz.com/edit/angular-5ufth3




Suggest:
Read up in regards to
  Angular security best practices
  Kendo




cd C:\Users\961702
ng new Angular-Project (2.5 min) (To create a new Angular Project)
     navigate to folder. view>show>hidden items to view 'git' folder


Create Azure Devops Organization and Project
Name your Azure DevOps organization: Org-961702
Project name: Angular-Project  (Project's Repo will contain the source code)


cd C:\Users\961702\Angular-Project
git init                      (To initialize Local Git)
git add .                     (To stage all files)
git commit -m "first commit"  (To commit to Local Git)

(Get the below 2 commands from the Project's Repo at Azure Devops)
git remote add origin https://Org-961702@dev.azure.com/Org-961702/Angular-Project/_git/Angular-Project (To push to Remote git)
git push -u origin --all      (To push to Remote git)





--------------------------------------------Storing your Codebase in Azure DevOps Repo-------------------------

Goals
To store a new Angular project s codebase created on a  Laptop to Azure DevOps Repo.
To download an existing Azure DevOps Repo to your Local Laptop and run the Angular website locall

Pre-requisites
To avoid sync issues of the massive  node_modules  folder to OneDrive, we will create the new Angular project on the root user profile folder that will not be backed up continuously e.g. C:\Users\xxx

This presentation also assumes that you have already installed the following software:

Microsoft Visual Studio Code  (Code Editor)
Node Js (Note: Installing NodeJs installs npm as well)
Angular CLI
Git

Create a new Angular Project

Open command prompt by typing  cmd  on windows taskbar. By default, your mouse cursor should be blinking next to C:\Users\your_user_id>


Create a new Angular project by typing in the following:
C:\Users\your_user_id>ng new Angular-Project

This command will create the new Angular project, download all dependencies in the node_modules folder and will initialize the git repository (a .git folder will be created within the Angular-Project folder)

This process should take around 2.5 min

Create a new Angular Project   (Continued )

If the .git folder is not visible under Angular-Project, then update Angular-Project s folder properties by navigating to View > Show > Hidden items

Configure your user.email and user.name in git by typing the following from C:\Users\your_user_id\Angular-Project
git config --global user.email  dan.lokman@hotmail.com"
git config --global user.name  dlokman"


Create a new Azure DevOps Organization and Project

Navigate to https://dev.azure.com/ and create a new Organization called Org-YourUserId

Create a new Project called  Angular-Project . This project s Repo will host the source code of your local Angular project.

While on Azure Devops, navigate to Repos>Files and copy the 2 commands from the HTTPS section  Push an existing repository from command line . E.g
git remote add origin https://Org-961702@dev.azure.com/Org-961702/Angular-Project/_git/Angular-Project
git push -u origin --all

While on C:\Users\your_user_id\Angular-Project, execute each command and press enter. This will push all your code from your local Angular folder to the main branch on Azure DevOps Repo

Here is a handy reference of git commands. Keep in mind, you can always delete a .git folder and start over.

git init                      (To initialize Local Git)
git add .                   (To stage all files)
git commit -m "first commit"   (To commit to Local Git)
git status                  (To check git status)

Switching from main to development branch

Main branch is deployment ready branch. Code only gets merged to main branch via a PR(Pull Request)
Currently, we are on main branch. Let s create a development branch from the main branch.
Refresh origin on VS code's Remotes. Remote Development branch will appear.
Switch to remote development branch from VS Code.
Create local branch from remote origin/development branch
Update main branch policy: Require min # of approvers (Branch with a Branch Policy cannot be deleted)

Test Local folder properly connected to Azure Repo on development branch

Use  git status  to very you re on development branch
Modify app.component file on your local folder, check-in and push modified changes to Azure Repo s development branch
Create PR to merge changes to main branch

Add Users to Azure DevOps Organization and Project
Organization Settings > Users > Add Users
Project Settings > Teams > Team > Add User

 ----------------Downloading Existing Azure DevOps Repo to your Local Computer------------
Most times when you start a project, you will already have an Azure Repo with code hosted that you will have to download and setup on your local computer

Create a new folder called 'Angular-Project-2' while on C:\Users\user_id>
While on main branch on Azure DevOps, click on 'Clone', followed by clicking on 'Clone in VS Code
Next, click on the button 'Open Visual Studio Code' and then on 'Open' Button. Navigate to the C:\Users\user_id\Angular-Project-2 on the folder explorer and click on the button 'Select Repository Location'
This will download all the codebase to your local computer.

Switch to remote development branch and create a new local development branch
Test check-in process followed by Pull Request(PR) again.

Finally, run  npm install  to add node_modules folder with the project dependencies and then run 'ng serve' to run Angular website locally.

Note:  node_modules  folder is not checked into Azure Repo. If you open the  .gitignore  file under C:\Users\user_id\Angular-Project-2, you will notice that  node_modules  folder is excluded from git


How to break out of parent container and occupr 100% width
Breaking Out With Viewport Units and Calc
https://cloudfour.com/thinks/breaking-out-with-viewport-units-and-calc/

<!DOCTYPE html>
<html>
<head>
   <style>
	 .parentdiv{
		max-width: 500px;
		height: 300px;
  		margin-left: auto;
  		margin-right: auto;
		background-color:grey;
	  }
	 p{
		text-align: center;
		height: 50px;
		background-color:blue;
  		margin-left: calc(-50vw + 50%);
  		margin-right: calc(-50vw + 50%);
           }
   </style>
</head>
<body>

<!DOCTYPE html>
<html>
<head>
   <style>
	 .parentdiv{
		max-width: 500px;
		height: 300px;
  		margin-left: auto;
  		margin-right: auto;
		background-color:grey;
	  }
	 hr{
		height: 50px;
		background-color:blue;
  		margin-left: calc(-50vw + 50%);
  		margin-right: calc(-50vw + 50%);
           }
   </style>
</head>
<body>


<div class="parentdiv">
   <hr/>
</div>


</body>
</html>


-------------------------------------------Node Api------------------------------------------------------------------------

mockdata.ts

export const data = {
  'somedata': [
     {
       'id': 1,
       'name': 'Test'
     },
     {
       'id': 2,
       'name': 'Test 2'
     }
  ]
}

node api dal layer


getSomeData(): Promise<SomeClass[]> {
  //real api call

  return Promise.resolve(
      data.somedata
  )
}


return Promise.reject(new HttpError(400));

-------------------------------------------------UI---------------------------------------------------------

returns Promise<IHttpResponse>[]  (Promise.All)

Promise.All([apicall1, apicall2])
   .then((data) => {


 })
 .catch((error: IhttpResponse) => {

   console.log(JSON.stringify(error.data));
 });



returns Promise<IHttpResponse>[]  (1 api call)

this.service.getsomething().then(
  (result: IHttpResponse) => {

   },
  (error: IhttpResponse) => {
    console.log(error);
  })

Bootstrap collapse/expand

dynamic ids
[id]="'test' + index"
[name]="'test' + index"


transform- promise service call

return this.httprequest.get({
   url: xx
}).then(response => {

   return response;
}).catch(this.handleError);

private handleError(error: any): Promise<any> {
 return Promise.reject(error);
}


http://url?somenum=2  (extract query param)

private route: ActivatedRoute

this.route.queryParams.subscribe(params => {
  const num = params['somenum'];

});

-----------------------------------------------Unit Testing------------------------------------

unit test service

beforeEach(() => {
  service = TestBed.inject(someService);
}

how to call a mock  service
it('test func', (done:DoneFn)=> {

  //jasmine.spy

   spyOn(service, 'methodOnService')
    .withArgs('sample').and
    .returnValue (
     Promise.resolve(data.somedata);
    );

  service.methodOnService('sample').then(
  (result: someClass[]) => {
     expect(result.length).toBe(33);
     done();
  })
});

Or

   spyOn(service, 'methodOnService')
    .and.returnValue (
     Promise.resolve(data.somedata as IHttpResponse);    method return type: Promise<IHttpResponse>
    );

-----------------------


import { DebugElement } from '@angular/core';
import {fakeAsync, flush, TestBed, tick } from '@angular/core/testing'

So in Angular for asynchronous testing we are using this wonderful fakeAsync zone: https://engineering.corzent.com/angular-asynchronous-unit-testing-with-fakeasync-194b4fbdcbb4

FakeAsync
fakeAsync is the special zone that lets us test asynchronous code in a synchronous way. fakeAsync keeps tasks internally and gives APIs to decide when the task should be executed.

beforeAll

beforeEach(fakeAsync(()=> {

}));


it('test func', () => {
   expect(comp).toBeTruthy();
});

it('test func 2', fakeAsync(() => {
   comp.ngOnInit();
   tick(3000);
   fixture.detectChanges();
   expect(comp.propertyList).toEqual([]);
   flush();
}));

it('test func 3', fakeAsync(() => {
   comp.someProp = true;
   fixture.detectChanges();
   expect(comp.propertyList).toBeTruthy();
}));

.toBeFalsy();

it('test func 4', fakeAsync(() => {
   spyOn(comp, 'someMethod');
   comp.someMethod();
   expect(comp.someMethod).toHaveBeenCalled();
}));

comp.someMethod();
.toHaveBeenCalled();



--------------------------------------------------------------Angular Setup on Laptop-----------------------------------------------

To setup, install and run an Angular related website we need the following software:
1)	Microsoft Visual Studio Code  (Code Editor)
2)	Node Js (Note: Installing NodeJs installs npm as well)
3)	Angular CLI
4)	Git (if you want to work with a Git based repository)

1) Microsoft Visual Studio Code 1.72.0
2) Git Git for Windows 2.37.3
3) Nodejs Nodejs 16.18.0

Once you have VsCode, Git and Node Js installed. Open a command line prompt by typing  cmd  in your windows task bar and execute the following commands to verify your versions (Your versions may differ based on what you selected earlier).

C:\Users\961702>git -v
git version 2.37.3.windows.1

C:\Users\961702>node -v
v16.18.0

C:\Users\961702>npm -v
8.19.2

If the commands don t execute then try restarting your computer and then try again.

To configure Git, execute the following on the command prompt replacing the information in the quotes with your own information:
git config --global user.email "Your email address"
git config --global user.name "Your Name"
Next step is to install angular cli version 14.2.7 by typing the following on the command line:

git config --list => to list all git config settings including username and email

npm install -g @angular/cli@14.2.7

Note: Angular version 14.2.7 is compatible with Node v16.18.0. However, if you want to install the latest angular version via: npm install -g @angular/cli@latest, then you will need to make sure that your node version is compatible with your angular version (See Section 4 below on resolving Node Js compatibility issue with Angular).


Once angular cli is installed, execute the following on command prompt to check your angular version:

C:\Users\961702>ng v

Angular CLI: 14.2.7
Node: 16.18.0
Package Manager: npm 8.19.2


4.	Resolving Incompatible Node Js Issue
If you have installed the latest version of angular using  npm install -g @angular/cli@latest  and you see a warning  Incompatible version  next to Node when you execute  ng v  on the command prompt, then you will need to uninstall Node and install the compatible version of Node.

To accomplish this, first determine which Angular version you have or want to install. Lets assume its angular 14.2.7. Next, go to angular release history at https://github.com/angular/angular/releases. Scroll down and click on that release version (red box in the snapshot):

Here, you will find which node versions are compatible for the angular version you selected.

To understand difference between ~ and ^ in package.json, please have a look at: https://vibhas1892.medium.com/difference-between-tilde-and-caret-in-package-json-76701e514445

5.	Create and Run a new Angular website
Once we have angular cli installed with the correct version of node, we are ready to create a new angular website. Execute the following on the command prompt:

C:\Users\961702>ng new AngularProject

When prompted: Select  Yes  to add Routing then press  enter  to use CSS for styles.

This will create a new angular project called  AngularProject  and will install all the dependencies under node_modules folder. This will take a few minutes.

Once this is done, execute  cd AngularProject  on the command prompt and then type in  ng serve  to run the angular website.

Next, navigate to the url on your browser specified on the command prompt e.g. http://localhost:4200/ to finally view your Angular website.

Node incompatibility issues with Angular. Go over to https://github.com/angular/angular/releases and click on the Angular version you have or want to install. Next, click on package.json file to see the compatible Node Js version (under "engines") to install. It appears right now Angular 14.2.7 does not support the LTS version of Node i.e. v18.12. Angular version 15 will. However Angular v15 is still in release candidate state. Looking at package.json file for Angular 14.2.7, you can see that Node version 16.10 or 16.18 should be compatible with Angular 14.2.7. This will be useful for folks setting up their Node Js and Angular environment for the first time.

Resolving Merge Conflicts using Visual Studio Code
While working on feature branches using Git you may occasionally run into merge conflicts.

Here's a helpful guide on how to resolve them using VS Code: https://www.youtube.com/watch?v=HosPml1qkrg

Make sure your 3 way Merge Editor is enabled in VS Code User Settings: https://dev.to/vscodetips/vs-code-tip-of-the-week-3-way-merge-editor-416h



Hello,

I came across your ... and I would like to discuss the opening more to see if it s a good fit.

I m a Senior UI Developer with 12 years of experience. My expertise lies in front-end technologies specifically with latest versions of Angular 12-14. I m a strong Angular with Typescript developer who can design delightful UI with or without UX mockups. To date, I ve delivered 7 enterprise projects using Angular. I also lead front-end UI on a project at Shell that won a Digi-Dev award. I also have a UI portfolio to showcase some of the pages I have actually created in the past.

If this sounds good to you, then please get back to me via email or MS Teams. and my grade level is Senior Manager and am based out of Houston, TX.

I m also attaching my Resume. Thanks



I came across your xxx - Lead Developer. My skills and experience appear to be a great match for your opening.

Here's a bit about me:
I m a Senior UI Developer with 12 years of experience. My expertise lies in front-end technologies specifically with latest versions of Angular 12-14. I m a strong Angular with Typescript developer who can design delightful UI with or without UX mockups. To date, I ve delivered 8 enterprise projects using Angular.
I've also lead front-end UI on a project at Shell that won a Digi-Dev award. In my last project at IngenioRx I served as an Angular Team Lead as well. I also have a UI portfolio to showcase some of the pages that i have actually created.

I have a few questions in regards to the xx for instance: xxx

xxx and i am based out of Houston, TX . Please let me know if you would like to discuss more. You can reach me via email or MS Teams. My Id is xxx.

I'm also attaching my resume.

Thanks



--------------------------------------------------------------------------------------------------------------------------------------

Misc Task: Find 1st three even numbers in the array  (Use Mod- % operator and check remainder-> even # check)

export class AppComponent implements OnInit {
  name = 'Angular';

  numbersArray: number[] = [
    1, 7, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  ];

  firstThreeEvenNumArray: number[] = [];

  counter: number = 0;

  constructor(public appService: AppService) {}

  ngOnInit() {
    //console.log(this.array);

    // Task: Find 1st three even numbers in the array

    // Algorithm: 4, 6, 8
    // Even # criteria: Mod with 2 === 0
    // Only 1st three: Counter to check if found 3
    // Print out 1st 3 even #
    //console.log(4 % 2)

    // #1 Solution Below
    // #2 Alternatively, use filter with mod opertor and then slice 1st 3 elements

    for (const num of this.numbersArray) {
      if (this.counter < 3) {
        if (num % 2 === 0) {
          this.firstThreeEvenNumArray.push(num);
          this.counter += 1;
        }
      } else {
        break;
        console.log(this.counter);
      }
    }

    console.log(this.firstThreeEvenNumArray);
    console.log(this.counter);
  }
}


To click on angular element in VScode, update 'Angular Language Service" extension. Then hover over the element while pressing Ctrl
and then mouse click to navigate.


--------------NGRX (Udemy approved course) - Course from Angular University  - 6.5 hours. -----------------------------------------

  NGRX Documentation (skim)
       Reference (TODOOOO):
          a) Youtube: I bet you can understand NgRx after watching this video:
                 Video: https://www.youtube.com/watch?v=kx0VTgTtSBg  (7min out of 20 min)
                 Git source: https://github.com/joshuamorony/ngrx-ionic-example/tree/main

                 Video: https://www.youtube.com/watch?v=iWX7qCGVt9U  (1hr 29 min - Creator of NGRX - Mike Ryan)
                 Git source: https://github.com/thisdot/ngrx-training

          b) Online Docs: https://ngrx.io  (First go over Online Docs, then select book based on the understanding)
          c) NGRX Resources: https://ngrx.io/resources

          Book??? later:
            https://n-mehlhorn.gumroad.com/l/angular-ngrx-book (mentioned in NGRX Resources)
            Architecting Angular Applications with Redux, RxJS, and NgRx: Learn to build Redux style high-performing applications with Angular 6
          Search Online for Helpful articles

          Installation: https://ngrx.io/guide/store/install  (ng add @ngrx/store --no-minimal)


NGRX Data -
1) How to use NGRX Data so you don't have to write actions, reducers, effects. Relies on conventions that
you can override if needed----> John Papa
https://www.youtube.com/watch?v=2ZFgcTOcnUg&t=212s ->  NGRX Data
https://github.com/johnpapa/ngrx-data-lab

2) Udemy Course: https://www.udemy.com/course/ngrx-course/
   Github Repo for course: https://github.com/angular-university/ngrx-course


Reactive Testing Strategies with NgRx
https://www.youtube.com/watch?v=MTZprd9tI6c

Github Repo for course: https://github.com/angular-university/ngrx-course

https://ngrx.io/guide/store


I bet you can understand NgRx after watching this video
https://www.youtube.com/watch?v=kx0VTgTtSBg  (7min out of 20 min)

component -> dispatches actions

----------------------------------------------
To use StoreDevtoolsModule for troubleshooting purposes, search in google 'Redux devtools extension' and install to chrome
to get the Redux tab in Chrome Developer Tools

reducers-> *monitors actions => modifies state*
detect all actions dispatched and act on how actions should modify state
store new state on the store
changes state


effects-> *monitors actions => runs misc code(side effects)*
like reducer, can listen to all actions being dispacthed and act upon it
----------------------------------------------

selectors->
pull state from the store and bind to the components

Good Action Hygiene:
1) Unique events get unique actions
2) Actions are grouped by their source
3) Actions are never reused

Actions

"[Books Page] Select Book"
"[Books Page] Add Book"
"[Books Page] Update Book"
"[Books Page] Delete Book"

@Inputs <=> Selectors
@Outputs <=> Dispatch Actions

Date serialization to ngrx store?

metareducers will be invoked before the normal reducers are invoked

***Can use NGRX data to load/edit data in store without needing to write actions, reducers, effects***
See NGRX data limitations- read online docs

NGRX Data works with conventions Hero model will have getHeros api call etc
can override Api names, reducers and effects

reducer
1) Produce new states
2) Receive the last state and next action
3) Listen to specific actions
4) Use pure, immutable operations

reducer start with an initial state and due to an action creates a new state that is stored in memory
last state is looped back into the reducer along with the next action

Store
1) State contained in a single state tree
2) State in the store is immutable
3) Slices of state are updated with reducers
*cannot change State directly. Have to change it via Reducers*

Selectors (to read data out of the store)
are like database queries for database)

Effects are second consumers of actions. First one being reducers.
listening to actions => so you can call api etc
*Effects where most Rxjs code is written*
*Effects are used to call services*

Angular Services called Effects Services


Logical OR (||)
https://javascript.info/logical-operators
The OR || operator does the following:

Evaluates operands from left to right.
For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
If all operands have been evaluated (i.e. all were false), returns the last operand.


const test = () => true || 'tt';
console.log(test());  //returns true

const test2 = () => false || 'tt';
console.log(test2());  //returns 'tt'

const test3 = () => 'tt' || false;
console.log(test3());  //returns 'tt'

const test4 = () => 'tt' || true;
console.log(test4());  //returns 'tt'


//Query Usecase
const test5 = (books, activeBookId) => books.find((book) => book.id === activeBookId) || null;
//test5() will return either a book or null (if find returns undefined-no book found then it'll return null)




export interface AuthState {
    user: User
}

export const initialAuthState: AuthState = {
    user: undefined
};

export const authReducer = createReducer(

    initialAuthState,


    //state is the current state. initially it'll be initialAuthState above. action is when you dispatch an action, the parameter you pass
    // to it
    on(AuthActions.login, (state, action) => {
        return {
            user: action.user
        }
    }),

    on(AuthActions.logout, (state, action) => {
        return {
            user: undefined
        }
    })
);


**Return keyword optional If*
If a JavaScript arrow function immediately returns a value, writing 'return' is optional (if we also remove the curly brackets). The return is then implied, making it an “implicit return”.

const test5 = (books, activeBookId) => {
  return  books.find((book) => book.id === activeBookId) || null;
}

is same as   <====>

const test5 = (books, activeBookId) => books.find((book) => book.id === activeBookId) || null;


https://redux.js.org/faq/general
Redux is most useful in cases when:

You have large amounts of application state that are needed in many places in the app
The app state is updated frequently
The logic to update that state may be complex
The app has a medium or large-sized codebase, and might be worked on by many people
You need to see how that state is being updated over time


These ARE the Angular tips you are looking for | John Papa
https://www.youtube.com/watch?v=2ZFgcTOcnUg&t=212s
Unsubscribing from Observables, NGRX Data

Pitfalls Of Using takeUntil and takeUntilDestroyed RxJS Operators
https://www.youtube.com/watch?v=eJs4EJUOnNE

6 Ways to Unsubscribe from Observables
https://blog.bitsrc.io/6-ways-to-unsubscribe-from-observables-in-angular-ab912819a78f


**********Unsubscribing from multiple Observables**********
https://blog.bitsrc.io/6-ways-to-unsubscribe-from-observables-in-angular-ab912819a78f
https://github.com/wardbell/subsink/issues/1

Subscriptions Memory Leak Test Example:
(Sign in using Github)
https://stackblitz.com/edit/angular-observable-takeuntil-1-jgcjfb
https://stackblitz.com/edit/angular-observable-takeuntil-1-uxmfrg
https://stackblitz.com/edit/angular-observable-takeuntil-1-enzcbj


import { Component, OnDestroy, OnInit, VERSION } from '@angular/core';
import { of, interval, Subject, Observable, Subscription } from 'rxjs';
import { take, takeUntil, tap } from 'rxjs/operators';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit, OnDestroy {
  subscription: Subscription = new Subscription();

  ngOnInit() {
    var observable1$ = interval(1000);
    var observable2$ = interval(400);

    this.subscription.add(observable1$.subscribe(x => console.log("From interval 1000" + x)));
    this.subscription.add(observable2$.subscribe(x => console.log("From interval 400" +  x)));

  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
}


Async | Pipe.  When the component gets destroyed, the asyncpipe unsubscribes automatically to avoid potential memory leaks.


*******Unsubscribing via TakeUntil**************

@Component({...})
export class AppComponent implements OnInit, OnDestroy {
    notifier = new Subject()
    ngOnInit () {
        var observable$ = Rx.Observable.interval(1000);
        observable$.pipe(takeUntil(this.notifier))
        .subscribe(x => console.log(x));
    }
    ngOnDestroy() {
        this.notifier.next()
        this.notifier.complete()
    }
}


*************************************************NGRX Official Doc***************************************************

Installation: https://ngrx.io/guide/store/install  (ng add @ngrx/store --no-minimal)


*****NGRX Best PRactices &  7 Sample NGRX Applications TODO in spare time later******

NGRX: premises => Single Responsibility Principle (Solid Principles). Component should just select and bind data. Should not use service and make Api calls. Pure Components-that select state and dispatch actions.

NGRX Resources:

(Contains folder hierarchy at bottom)
Best PRactices: https://wesleygrimes.com/angular/2018/05/30/ngrx-best-practices-for-enterprise-angular-applications

NGRX website recommended courses:
https://www.pluralsight.com/courses/angular-ngrx-getting-started
https://ultimatecourses.com/learn/ngrx-store-effects

NGRX website recommended book:
https://n-mehlhorn.gumroad.com/l/angular-ngrx-book

Best PRactices: https://wesleygrimes.com/angular/2018/05/30/ngrx-best-practices-for-enterprise-angular-applications

Sample NGRX Applications:

1) Video: https://www.youtube.com/watch?v=iWX7qCGVt9U  (1hr 29 min - Creator of NGRX - Mike Ryan)
   Github: https://github.com/thisdot/ngrx-training    (check folder hierarcy & setup)


2) Youtube: I bet you can understand NgRx after watching this video:
   Video: https://www.youtube.com/watch?v=kx0VTgTtSBg  (7min out of 20 min)
   Github: https://github.com/joshuamorony/ngrx-ionic-example/tree/main

3) How to use NGRX Data ----> John Papa
   Video: https://www.youtube.com/watch?v=2ZFgcTOcnUg&t=212s ->  NGRX Data   (check folder hierarcy & setup)
   Github: https://github.com/johnpapa/ngrx-data-lab

4) Udemy Course: https://www.udemy.com/course/ngrx-course/
   Github: https://github.com/angular-university/ngrx-course

Sample NGRX applications per online docs - TODO: https://ngrx.io/resources

5) https://github.com/tomastrajan/angular-ngrx-material-starter  (check folder hierarcy & setup)
6) https://github.com/avatsaev/angular-contacts-app-example      (check folder hierarcy & setup)
7) https://github.com/mdbootstrap/Angular-Bootstrap-Boilerplate


Global, application-wide solution to manage state => Use NGRX Store
Local State Management => Use NgRx ComponentStore

In cases where you don't need a global, application-wide solution to manage state, consider using "NgRx ComponentStore" which provides a solution for local state management.


When Should I Use NgRx Store for State Management?

Use NGRX when (https://ngrx.io/guide/store/why)
1) User has a lot of user interactions and multiple data sources OR
2) managing state in services are no longer sufficient <==== for simple usecases services ok?

A good guideline that might help answer the question, "Do I need NgRx Store?" is the SHARI principle:

Shared: state that is accessed by many components and services.
Hydrated: state that is persisted and rehydrated from external storage.
Available: state that needs to be available when re-entering routes.
Retrieved: state that must be retrieved with a side-effect.
Impacted: state that is impacted by actions from other sources.

NGRX Store is stored in browser memory. Reloading page clears it. It can be persisted in localstorage.
https://github.com/ngrx/store/issues/384

Actions are first processed by Reducers and then by Effects (https://ngrx.io/guide/store)

All Actions that are dispatched within an application state are always first processed by the Reducers before being handled by the Effects of the application state.



export interface Book {
    id: string;
    volumeInfo: {
      title: string;
      authors: Array<string>;
    };
}


https://ngrx.io/guide/store/reducers
Each action handles the state transition immutably. This means that the state transitions are not modifying the original state, but are returning a new state object using the spread operator.

StoreModule.forRoot({ game: scoreboardReducer })
The StoreModule.forRoot() registers the global providers for your application, including the Store service you inject into your components and services to dispatch actions and select pieces of state.

selectors are pure functions

(Memoization. Cached result for same argument)
Because selectors are pure functions, the last result can be returned when the arguments match without reinvoking your selector function.

pure function - https://en.wikipedia.org/wiki/Pure_function
1) Same argument gives same result
2) function has no side effects

The createSelector function can take up to 8 selector functions for more complete state selections.

//selector function with max 8 selectors and 1 projector
export const selectFeatureCount = createSelector(
  selectFeature,   <-- can have 8 selectors here
  (state: FeatureState) => state.counter  <-- projector. result of the above selector will be added as parameters here
);

//selector function with dictionary of selectors without a projector.

// result type - { books: Book[]; query: string }
const selectBooksPageViewModel = createSelector({
  books: selectBooks, // result type - Book[]
  query: selectQuery, // result type - string
});


Selectors with props are deprecated. (https://ngrx.io/guide/store/selectors)

To select a piece of state based on data that isn't available in the store you can pass props to the selector function.

The last argument of a selector or a projector is the props argument


You can pass the props argument from the component

index.ts
export const selectCount = createSelector(
  selectCounterValue,
  (counter, props) => counter * props.multiply    => last argument is props
);


app.component.ts
ngOnInit() {
  this.counter = this.store.select(fromRoot.selectCount, { multiply: 2 })   => passing props argument
}

If props argument is same, selector will get it from cache. Else, will re-evaluate it


Resetting Memoized Selectors  (Release memory held by Memoized Selector in Cache)
A selector's memoized value stays in memory indefinitely. If the memoized value is, for example, a large dataset that is no longer needed it's possible to reset the memoized value to null so that the large dataset can be removed from memory. This can be accomplished by invoking the release method on the selector

selectTotal(state); // returns the memoized value of 8
selectTotal.release(); // memoized value of selectTotal is now null

Releasing a selector also recursively releases any ancestor selectors.

**Entity management library**
NGRX Data is same as BreezeJs. BreezJs is better but its not reactive/redux.
https://ngrx.io/guide/data/limitations#an-alternative-to-ngrx-data

How is NgRx Data different from NgRx Entity?
The NgRx Data library extends Entity.

**Meta-reducers**
Executed before regular Reducers
Meta-reducers allow developers to pre-process actions before normal reducers are invoked (https://ngrx.io/guide/store/metareducers)
E.g: Using a meta-reducer for logging purposes

FeatureCreator() function (https://ngrx.io/guide/store/feature-creators)
Youtube: https://www.youtube.com/watch?v=bHw8SV4SNUU
The createFeature function reduces repetitive code in selector files by generating a feature selector and child selectors for each feature state property

createActionGroup (https://ngrx.io/guide/store/action-groups) - Basically, it groups Actions that have the same Source
The createActionGroup function creates a group of action creators with the same source


export const ProductsPageActions = createActionGroup({
  source: 'Products Page',
  events: {
    // defining an event without payload using the `emptyProps` function
    'Opened': emptyProps(),

    // defining an event with payload using the `props` function
    'Pagination Changed': props<{ page: number; offset: number }>(),

    // defining an event with payload using the props factory
    'Query Changed': (query: string) => ({ query }),
  },
});

ProductsPageActions.paginationChanged({ page, offset })

------

Instead of
'Pagination Changed': props<{ page: number; offset: number }>(),

Can use camelcase

paginationChanged: props<{ page: number; offset: number }>(),


in component's file:
ProductsPageActions.paginationChanged({ page, offset })

'Pagination Changed' => by convention can use '.paginationChanged'
https://ngrx.io/guide/store/action-groups
In the previous example, event names are defined in the title case format. In that case, it can be challenging to search for unused action creators because their names are automatically generated by camel-casing the event names.

Runtime checks (https://ngrx.io/guide/store/configuration/runtime-checks)
Runtime checks are here to guide developers to follow the NgRx and Redux core concepts and best practices.

Effects (https://ngrx.io/guide/effects)
Traditional Angular: Component <=> Services <=> Api
NGRX:  Effects <=> API (In NGRX, we do not call the Api from the Component via service)

Effects are an RxJS powered side effect model for Store. Effects use streams to provide new sources of actions to reduce state based on external interactions such as network requests, web socket messages and time-based events.

Effects perform tasks, which are synchronous or asynchronous and return a new action.

Effects can trigger new Actions that can be handled again by a reducer. Eg LoadedSuccess Action


Functional Effects
Creating Effects without classes
Functional effects are also created by using the createEffect function. They provide the ability to create effects outside the effect classes.


To register root-level effects:   EffectsModule.forRoot(MoviesEffects, actorsEffects)
For "feature modules", register your effects by adding the EffectsModule.forFeature() method in the imports array of your NgModule:
EffectsModule.forFeature(MoviesEffects, actorsEffects)


The dispatch: false flag is used to indicate to NgRx that this particular effect is not impacting the Store , so it won't be dispatching a resulting Action . Needed if you won't dispatch another action

https://ngrx.io/guide/effects/lifecycle
But when an effect does not dispatch another action, the browser will crash because the effect is both 'subscribing' to and 'dispatching' the exact same action, causing an infinite loop. To prevent this, add { dispatch: false } to the createEffect function as the second argument.

@ngrx/router-store
Bindings to connect the Angular Router with Store. So that you can use Route info with NGRX

Router selectors  (https://ngrx.io/guide/router-store/selectors)
The getRouterSelectors method supplied within @ngrx/router-store provides functions for selecting common information from the router state.





****NGRX Entity****
Can do without. Will Just make it more complex

Used for managing collections (manipulate and query entity collections)
(Can still do without? See Mike ryan's Sample app #10-more-effects and #11-entity in Git. Do you really need NGRX Entity? Can do without. Already complex)

The Entity State is a predefined generic interface for a given entity collection with the following interface:
interface EntityState<V> {
  ids: string[] | number[];
  entities: { [id: string | id: number]: V };
}

The entity adapter provides many collection methods for managing the entity state.

Additional Entity State Properties Update (https://ngrx.io/guide/entity/recipes/additional-state-properties#additional-entity-state-properties-update)
It's possible to add extra properties to a State extending from EntityState. These properties must be updated manually. Just like in a non-entity state, we can update the added properties in the reducer.

The entity adapter is only used to update the EntityState properties. The additional state properties should be updated same as normal state properties,
as the example below.

Documentation not good for Entity.( eg EntityStateAdapter setAll Vs addMany)
Eg Reference for createEntityAdapter in Redux. Since NGRX implements Redux, it should be the same:
https://redux-toolkit.js.org/api/createEntityAdapter#:~:text=addMany%20%3A%20accepts%20an%20array%20of,and%20adds%20or%20replaces%20them.




****@ngrx/component-store****
manages local/component store (as opposed to global state)
manages store for a component

Local state is typically tied to the life-cycle of a particular component and is cleaned up when that component is destroyed.





***** NGRX Data ******

NGRX Data: Not enterprise ready like BreezeJs  <=============

NGRX Data is a entity management library like BreezeJs (more thorough and reliable)

The NgRx Data extends Entity.

Automatically generates http calls. Relies on conventions (api url structure etc). Only add/update single entity

NgRx Data
1) automates the creation of actions, reducers, effects, dispatchers, and selectors for each entity type.
2) provides default HTTP GET, PUT, POST, and DELETE methods for each entity type.

Limitations:
Recommend BreezeJs to overcome NGRX Data limitations

1) NGRX Data expects an APi to return single entity or an array of entities of the **same type**. Business Apis could return
    entity bundle with data for many different entity types. Reasonable expectation. Issue***

2) It does shallow cloning. For Deep cloning, clone yourself using lodash before asking NgRx Data to save data.

3) Cannot handle Entity relationship via foreign keys. Reasonable expectation. Issue***

.....etc etc


----------------------------------------------Sample Applications----------------------------------------------------------

(Contains folder hierarchy at bottom) <--------------
Best PRactices: https://wesleygrimes.com/angular/2018/05/30/ngrx-best-practices-for-enterprise-angular-applications

Goal (Skim over)
1) Evaluate which ones are good for reference
2) Check folder/file structure
3) Check flow (code-wise)

Sample NGRX Applications:

1) Video: https://www.youtube.com/watch?v=iWX7qCGVt9U  (1hr 29 min - Creator of NGRX - Mike Ryan) - Skimmed
   Github: https://github.com/thisdot/ngrx-training    (check folder hierarcy & setup)

1b) Online-NGRX-Docs - Skimmed

2) Youtube: I bet you can understand NgRx after watching this video:   - Skimmed
   Video: https://www.youtube.com/watch?v=kx0VTgTtSBg  (7min out of 20 min)
   Github: https://github.com/joshuamorony/ngrx-ionic-example/tree/main

3) How to use NGRX Data ----> John Papa  - Skimmed
   Video: https://www.youtube.com/watch?v=2ZFgcTOcnUg&t=212s ->  NGRX Data   (check folder hierarcy & setup)
   Github: https://github.com/johnpapa/ngrx-data-lab

4) Udemy Course: https://www.udemy.com/course/ngrx-course/ - Skimmed
   Github: https://github.com/angular-university/ngrx-course

Sample NGRX applications per online docs - TODO: https://ngrx.io/resources

5) https://github.com/mdbootstrap/Angular-Bootstrap-Boilerplate (Good for folder hierarchy) <--------------

6) https://github.com/avatsaev/angular-contacts-app-example      (check folder hierarcy & setup) - fine example like above

7) https://github.com/tomastrajan/angular-ngrx-material-starter  (check folder hierarcy & setup) - soso





*************************************6) Misc:  Micro-front end architecture with Angular ************************************

Nx official
https://nxplaybook.com/p/nx-workspaces
https://nx.dev/getting-started/intro

NX Official Videos with Angular:
https://www.youtube.com/watch?v=cXOkmOy-8dk&list=PLakNactNC1dH2ff_srFKtabxA-1a3Pv4f
https://www.youtube.com/watch?v=cXOkmOy-8dk&t=256s
https://www.youtube.com/watch?v=2mYLe9Kp9VM&list=PLakNactNC1dH38AfqmwabvOszDmKriGco
https://www.youtube.com/watch?v=dJG9zH30c-o
https://www.youtube.com/watch?v=e8-hBYw5bx0&t=1s
https://www.youtube.com/watch?v=ZAO0yXupIIE&t=175s
https://www.youtube.com/watch?v=bwPkz4MrPDI

Nx sample projects
https://github.com/nrwl/nx-examples
https://github.com/nrwl/nx-workshop
https://github.com/trungk18/angular-spotify
https://github.com/nrwl/nx-recipes
https://github.com/nrwl/nx-apollo-angular-example


Videos:
https://www.youtube.com/watch?v=NCFQBRh3hZk
https://www.youtube.com/watch?v=gEv4WSDM2Z4
https://www.youtube.com/watch?v=EGdbmj-kj88
https://www.youtube.com/watch?v=lKKsjpH09dU
https://www.youtube.com/watch?v=EGdbmj-kj88&t=1238s
https://www.youtube.com/watch?v=A0JAZhyYXGA&t=406s
https://www.youtube.com/watch?v=qWl8vYmb-TE
https://www.youtube.com/watch?v=MLVv516-QWA&t=1309s
https://www.youtube.com/watch?v=e8-hBYw5bx0
https://www.youtube.com/watch?v=5jPKKfko2BU

Websites:
https://www.bacancytechnology.com/blog/angular-micro-frontends-architecture
https://dev.to/michaeljota/how-to-split-an-angular-app-into-micro-frontend-apps-1fi9
https://developer.okta.com/blog/2022/05/17/angular-microfrontend-auth
https://levelup.gitconnected.com/your-first-angular-microfrontend-58950768a465
https://blog.briebug.com/blog/micro-frontends-angular
https://serengetitech.com/tech/micro-frontend-architecture-in-angular-applications-module-federation/
https://nx.dev/getting-started/tutorials/angular-standalone-tutorial
https://nx.dev/recipes/angular/dynamic-module-federation-with-angular



-----------------------------------------------AngularJS Book--------------------------------------------------

require: https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/

Error:
var connect = require('connect');
connect.createServer(
connect.static("../angularjs")
).listen(5000);

npm install connect
npm install serve-static

https://stackoverflow.com/questions/24346161/nodejs-connect-error-has-no-method-static


In an AngularJS app, variable names that start with $ represent *built-in features* that AngularJS provides.
When you see the $ sign, it usually refers to a built-in service

$scope is special and is used to expose data and functionality to views

td><input type="checkbox" ng-model="item.done" /></td>  <---- ng-model creates a two-way binding

ng-model attribute, which tells AngularJS to create a two-way binding between the value of the input element and the done property

$http.get("todo.json").success(function (data) {
model.items = data;
});
The result from the get method is a promise, which is an object used to represent work that will complete in the future.

Functions can be passed around as objects within JavaScript, and it can be useful to be able to tell whether an object is
a function. AngularJS provides the angular.isFunction method for this purpose

Variables that are defined within a function are local variables and are available for use only within that function.

Variables that are defined directly in the script element are global variables and can be accessed anywhere, including other scripts in the same HTML document.

You define string values using either the double quote or single quote characters,

Creating Objects:
1)
var myData = new Object();
myData.name = "Adam";
myData.weather = "sunny";

2) Creating Objects Using Object Literals
var myData = {
  name: "Adam",
  weather: "sunny"
};


***angular.extend***
AngularJS makes it easy to copy methods and properties from one object to another through the angular.extend
method,

var myData = {
  name: "Adam",
};

var myExtendedObject = {
  city: "London"
};

angular.extend(myExtendedObject, myData); // copying all of the properties and functions from the myData object to myExtendedObject. myExtendedObject will then have the 'name' property

console.log(myExtendedObject.name);
console.log(myExtendedObject.city);

2 ways of Reading and Modifying the Property Values

var myData = {
  name: "Adam",
  weather: "sunny",
};

myData.name = "Joe";
myData["weather"] = "raining";

console.log("Hello " + myData.name + ".");
console.log("It is " + myData["weather"]);

Enumerating an Object’s Properties
You enumerate the properties that an object has using the for...in statement Or using angular.forEach   pg 92

for (var prop in myData) {
  console.log("Name: " + prop + " Value: " + myData[prop]);
}

console.log("---");

angular.forEach(myData, function (value, key) {
  console.log("Name: " + key + " Value: " + value);
});


***Adding and Deleting Properties and Methods to an Object***

var myData = {
  name: "Adam",
  weather: "sunny",
};

myData.dayOfWeek = "Monday";   // Adding new property  dayOfWeek

Similarly, you can add new methods to an object as well


***Deleting a Property from an Object***

var myData = {
  name: "Adam",
  weather: "sunny",
};

delete myData.name;
delete myData["weather"];

***Determining Whether an Object Has a Property***

var myData = {
  name: "Adam",
  weather: "sunny",
};

var hasName = "name" in myData;   // true
var hasDate = "date" in myData;   // false

***JavaScript primitives are compared by value, but JavaScript objects are compared by reference***

***Converting Numbers to Strings***

var myData1 = (5).toString() + String(5);
console.log("Result: " + myData1);

Notice that I placed the numeric value in parentheses, and then I called the toString method. This is because
you have to allow JavaScript to convert the literal value into a number before you can call the methods that the number
type defines.


***Converting Strings to Numbers***

var firstVal = "5";
var secondVal = "5";
var result = Number(firstVal) + Number(secondVal);
console.log("Result: " + result);

Number(str)     Parses the specified string to create an integer or real value
parseInt(str)   Parses the specified string to create an integer value
parseFloat(str) Parses the specified string to create an integer or real value


*** Creating Arrays ****

1)
var myArray = new Array();
myArray[0] = 100;
myArray[1] = "Adam";
myArray[2] = true;

I didn’t need to declare the number of items in the
array when I created it. JavaScript arrays will resize themselves to hold any number of items. The second point is that
I didn’t have to declare the data types that the array will hold. Any JavaScript array can hold any mix of data types. In
the example, I have assigned three items to the array: a number, a string, and a boolean.

2)  Using an Array Literal

create and populate an array in a single statement
var myArray = [100, "Adam", true];


*** Enumerating the Contents of an Array ***

for (var i = 0; i < myArray.length; i++) {
console.log("Index " + i + ": " + myArray[i]);
}
console.log("---");
angular.forEach(myArray, function (value, key) {
console.log(key + ": " + value);
});

Working with Promises  - pg 111

*** JSON *** => ***Property names are in quotes***

[{ "action": "Buy Flowers", "done": false },
{ "action": "Get Shoes", "done": false },
{ "action": "Collect Tickets", "done": true },
{ "action": "Call Joe", "done": false }]

Object  ***Property names are not in quotes***
var myData = {
  name: "Adam",
  city: null
};

The JSON data looks similar to the literal formats used to declare arrays and objects in JavaScript. The only
difference is that the property names of the objects are enclosed in quotes.


*** Encoding and Decoding JSON ***

When you request JSON data via Ajax, the response will be parsed automatically into JavaScript objects and passed to the success function

angular.toJson   => converts from object to json
angular.fromJson =>  converts from json to object

$http.get("todo.json").success(function (data) {
  var jsonString = angular.toJson(data);
  console.log(jsonString);
  $scope.todos = angular.fromJson(jsonString);
});

Json.stringify (https://www.w3schools.com/js/js_json_stringify.asp)
JSON.Parse      (https://www.w3schools.com/js/js_json_parse.asp)


<body ng-controller="sportsStoreCtrl">
    <div class="panel panel-default row" ng-controller="productListCtrl">

***$scope inheritance***
$scope for productListCtrl inherits data and behaviors(methods) from $scope of sportsStoreCtrl

limitTo filter -> pg 144

Template Binding - Checks the $scope

AngularJs Services are singleton- only one instance (pg 157)

Directives are self-contained, reusable units of functionality that sit at the heart of AngularJS development.

Custom directives

Directives
restrict: "E" => directive can be applied only as an element
restrict: "EA" => directive can be applied as an element or as an attribute

https://docs.angularjs.org/guide/directive
'A' - only matches attribute name
'E' - only matches element name
'C' - only matches class name
'M' - only matches comment


.directive("cartSummary", function (cart) {
	return {
 		restrict: "E",

applied as  (with a '-')
<cart-summary />

scopes can inherit from one another when controllers are nested or (as I explain in Chapter 17) when directives are defined.



-------------------------------------Upgrading from AngularJs to Angular-----------------------------------------

https://angular.io/guide/upgrade






----------------------------------How to install multiple versions of Node & Angular on the same Computer-------------

Using NVM for Windows

https://github.com/coreybutler/nvm-windows

https://github.com/angular/angular/blob/12.2.17/package.json

https://github.com/angular/angular/blob/16.2.0/package.json


https://github.com/coreybutler/nvm-windows/discussions/568

What is npmrc file?
https://docs.npmjs.com/cli/v10/configuring-npm/npmrc
https://github.com/microsoft/rush-example/blob/main/common/config/rush/.npmrc


How to remove Node.js from windows completely?
https://stackoverflow.com/questions/20711240/how-to-completely-remove-node-js-from-windows

HOw to install multiple versions of Node & Angular on the same computer?
https://www.youtube.com/watch?v=8r75fmuybC0
https://www.youtube.com/watch?v=_8FizjwXVzA
https://www.youtube.com/watch?v=RDScvojqAio
https://www.youtube.com/watch?v=-inrG8xNpGg


https://www.getfishtank.com/blog/use-nvm-to-install-multiple-node-versions#:~:text=Now%20you%20can%20have%20multiple,to%20switch%20between%20different%20versions.
https://stackoverflow.com/questions/43018777/angular-cli-different-versions-in-the-same-computer
https://dev.to/patricepeartree/how-to-run-multiple-node-and-angular-versions-simultaneously-3lfj
https://blog.logrocket.com/switching-between-node-versions-during-development/
https://www.getfishtank.com/blog/use-nvm-to-install-multiple-node-versions
https://www.sharepointcafe.net/2023/02/can-we-install-multiple-versions-of-angular-on-a-single-system.html#:~:text=If%20you%20are%20asked%20whether,can%20use%20multiple%20Angular%20versions.

How to install local angular version?
cd to a folder
npm install @angular/cli@14.2.7
this will add package.json and node_modules
to create a new project using this local angular version (and not global angular version) use ng from node_modules
node_modules/.bin/ng new ng-14.2 (this will create a new angular project using 14.2)

to run it execute 'node_modules/.bin/ng serve'

package.json
  "scripts": {
    "version": "ng version",   // to run ng command using the locally installed angular
	....
  }

  if we don't have angular installed globally on your machine then running 'npm run version' will use local angular
  install in node_modules i.e. it will run 'node_modules/.bin/ng version'

or install latest
npm install -g @angular/cli@latest

npm install -g @angular/cli@16.2.0 (install angular globally)
npm install @angular/cli@16.2.0 (install angular in a folder. will create package.json and node-modules folder)

nvm install 10.23.0  (install node 10.23.0 for AngularJs)
nvm install 18.17.1  (install node 18.17.1 for Angular 16)

nvm use 10.23.0  (to switch to a different node version)

nvm list (to list all node versions)



MonoRepo:
1 Repo can have many projects.
For example, a monorepo can contain a directory for a web app project, a directory for a mobile app project, and a directory for a server app project. The projects can be unrelated and can be completely distinct.


npx vs npm
npx: execute npm packages without installing them
NPX is installed automatically with NPM version 5.2.0 and above.
https://www.codingninjas.com/studio/library/difference-between-npm-and-npx
https://www.geeksforgeeks.org/what-are-the-differences-between-npm-and-npx
https://sentry.io/answers/difference-between-npm-and-npx-in-javascript


--save-exact  (npm install xxx --save --save-exact)
https://javascript.plainenglish.io/how-to-install-npm-packages-with-an-exact-version-558599f0aa5b


********SSH Setup to connect to Github********

Main: https://docs.github.com/en/authentication/connecting-to-github-with-ssh

1) Generate a new "private SSH key" and add it to the "SSH agent"
   https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

2) You must also add the "public SSH key" to your account on GitHub before you use the key to authenticate or sign commits.
   https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account

3) https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/authorizing-an-ssh-key-for-use-with-saml-single-sign-on

cloning using SSH in Powershell:
git clone git@github.com:xxx.git


Difference between npm and yarn
https://phoenixnap.com/kb/yarn-vs-npm


****Traditional Angular folder hierarchy****

app/
 core (singleton) - Services (both specific and common), Navbar, Footer, ErrorHandler, Banner,
		    Interceptors, modal,

 shared
    shared components, shared pipes, shared directives
    models*

 enums
 models*
 auth

 pages (with feature folders underneath)
 Or
 feature specific folders

lcov viewer- nx test
https://lcov-viewer.netlify.app/

difference between tsconfig.json and tsconfig.app.json
tsconfig.json => typescript compiler options for the whole project
tsconfig.app.json => typescript compiler options for the angular application
<------------------------------------------NX--------------------------------------------->

Nx cache is stored in  node_modules/.cache/nx by default
https://nx.dev/concepts/how-caching-works#customizing-the-cache-location

Angular cli cache is stored in .angular/cache folder

Setting up a Devops pipeline with NX: https://christianlydemann.com/setting-up-a-devops-pipeline-with-nx/

Nx version 16 renamed Packages from @nrwl to @nx (ver 15 and lower use nrwl)
https://nx.dev/recipes/other/rescope


Suitable for large application to break into multiple smaller applications and make the smaller application's CI/CD faster and
independent so different teams can work on different smaller applications
https://www.bacancytechnology.com/blog/angular-micro-frontends-architecture

Micro Front-Ends:
1) Tutorial: https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation
   Git: https://github.com/nrwl/ng-module-federation

2) Tutorial: https://nx.dev/concepts/more-concepts/micro-frontend-architecture

3) Tutorial: https://nx.dev/recipes/angular/dynamic-module-federation-with-angular
   Git: https://github.com/Coly010/nx-ng-dyn-fed/tree/main

   Tutorial shows how to load a remote app dynamically from url. First loads remote app statically, then changes it to be Dynamically


https://nx.dev/reference/glossary

Nx and Angular Version Compatibility Matrix
https://nx.dev/nx-api/angular/documents/angular-nx-version-matrix

Sample Project: https://nx.dev/getting-started/tutorials/angular-monorepo-tutorial
Tasks: https://nx.dev/core-features/run-tasks

Nx sample projects

https://github.com/nrwl/ng-module-federation (to speed up the builds of Angular apps. Has CI-Continuous Integration workflow in ci.yml)

https://github.com/nrwl/nx-examples  (Official-Nx Micro-Frontend Example: https://nx.dev/showcase/example-repos/mfe)

https://github.com/nrwl/nx-workshop

https://github.com/trungk18/angular-spotify

https://github.com/nrwl/nx-recipes

https://github.com/nrwl/nx-apollo-angular-example

Official Sample Projects:
1) https://nx.dev/getting-started/tutorials/angular-monorepo-tutorial
2) https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation
3) https://nx.dev/recipes/angular/dynamic-module-federation-with-angular
Others:
1) https://nxplaybook.com/p/nx-workspaces




package.json
@nrwl/angular": "10.10.1"  <-- This package is an Angular plugin for Nx.
https://www.npmjs.com/package/@nx/angular

https://nxplaybook.com/courses/709074/lectures/12735465
This course will introduce you to the essential features of Nx, created by Nrwl.
This course will introduce you to the essential features of https://nx.dev, created by https://nrwl.io

-----------------Process per video Nx version 16.8.1-----------------
(per video: https://nxplaybook.com/courses/709074/lectures/12735532):
1) Create new workspace
npx create-nx-workspace my-org

2) What to create in the new Workspace?
empty, web components, angular, angular-nest, react, react-nest

3)What CLI to power the Nx workspace
a) NX  (CLI for Js and Typescript applications)
b) Angular CLI (CLI for Angular applications. Recommended for Angular projects)


Folder structure
1) apps (keep lightweight. runnable application. entry points)
2) libs (imported by apps. heavy lifting)
3) tools (scripts like db scripts or schematics)
4) tsconfig.json (can be overriden by individual app or library if needed. typescript compiler options)
5) nx.json and workspace.json help nx know how apps and libraries relate to each other and what actions
can be performed on each app or library.
If using Angular CLI then workspace.json will be called angular.json

if Nx project has workspace.json => using NX based CLI
if Nx project has angular.json => using Angular CLI

create-nx-workspace@16.8.1

Nx version  (or check package.json)
nx --version  => 16.9.0 current global installation (npm install --global nx@latest)

-----------------Process version Nx version 16.8.1-----------------
1) npx create-nx-workspace my-org
2) Which stack to use
None, React, Angular, Node
3) Integrated monorepo, or standalone project? (Check ClientWorks) <-----
Integrated Monorepo:  Nx creates a monorepo that contains multiple projects.
Standalone:           Nx creates a single project and makes it fast.

4) Application nameReverse
5) style sheet (css or scss)
6) Testrunner (Cypress, Playwright, None) for E2E Tests
7) Would you like to use Standalone Components in your application? (Check ClientWorks) <------


nx dep-graph (draws graph)

to run 'my-org' project
npx nx serve my-org

https://nxplaybook.com/courses/709074/lectures/12736111
1) To add Angular plugin to a NX project:
yarn add -D @nrwl/angular (-D adds to dev dependencies)
Or
npm install @nrwl/angular --save-dev

2) Create an angular app in NX called store (in apps folder) using routing and scss
nx g @nrwl/angular:app store --directory=apps/store --routing --style=scss


npm vs yarn:
https://www.digitalocean.com/community/tutorials/nodejs-npm-yarn-cheatsheet

npx nx g @nx/react:lib product-list
plugin => @nx/react
library generator => :lib
name=> product-list
will get created in the libs folder at the same level as apps folder

https://nx.dev/concepts/more-concepts/global-nx
With a global Nx installation, Nx looks for the local copy of Nx in your repo and hands off the process execution to it. This means that whichever version of Nx is installed locally in your repo is still the version of Nx that runs your code.

What is a preset?
https://nx.dev/extending-nx/recipes/create-preset#what-is-a-preset

npx nx g @nx/angular:app inventory --directory=apps/inventory --dry-run

--dry-run just to check the output. won't execute it

nx command reference:
https://nx.dev/nx-api/nx
https://nx.dev/packages/angular/generators/component

Tutotial puts shared components under lib folder and are created as standalone components

TODO Next
https://nx.dev/getting-started/tutorials/angular-monorepo-tutorial#importing-libraries-into-the-angular-applications

To run Unit tests for a project 'orders' via project.json, run
nx test orders

Testing and Lintin g
nx test angular-store     # runs the tests for angular-store
nx lint inventory         # runs the linter on inventory
nx e2e angular-store-e2e  #  runs e2e tests for the angular-store

//run test lint e2e on all projects (https://nx.dev/nx-api/nx/documents/run-many)
nx run-many -t test lint e2e

//to build all projects
npx nx run-many -t build

//to build angular-store project only
npx nx or nx
nx build angular-store

type of your library
"feature" library,
"utility" library,
"data-access" library,
"ui" library

Nx is Modern Angular
https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d


*******Affected command*******
Run tasks only for projects that are actually affected by the code changes that you've made

Make some code change and then run
nx affected -t test

Note that the unit tests were run for products, angular-store and inventory, but not for orders because a change to products can not possibly break the tests for orders.

Storybook:
https://storybook.js.org/
https://nx.dev/recipes/storybook/overview-angular


header is project name. Target is build
nx run header:build

Tasks can be defined as npm scripts in a project's package.json file or as targets in a project.json file
    target  project name
nx  test    products
or
npx nx test products

-t => target
Run the build target for all projects in the repo:
npx nx run-many -t build

Run the build, lint and test target for all projects in the repo:
npx nx run-many -t build lint test

Run the build, lint and test target just on the header and footer projects:
npx nx run-many -t build lint test -p header footer

❯ nx run [project]:[command]
❯ nx run cart:build

https://nx.dev/core-features/plugin-features/use-task-executors
 nx build mylib --configuration=production or
 nx run mylib:build:production.

When you run nx test app1, you are telling Nx to run the app1:test task plus all the tasks it depends on.

NX folder structure
https://nx.dev/concepts/more-concepts/folder-structure

Since version 14, Nx provides out-of-the-box Module Federation support to both React and Angular. The Micro Frontend (MFE) architecture
builds on top of Module Federation by providing independent deployability.

Micro Frontend Architecture (Builds on top of Module Federation)
1) https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation
2) https://nx.dev/concepts/more-concepts/micro-frontend-architecture

As applications grow, builds can become unacceptably slow, which leads to slow CI/CD pipelines
"Module Federation" provides a solution by allowing a Single Page Application (SPA) to be sliced
into multiple smaller remote applications that are built independently.

Micro Frontend Architecture/Module Federation provides *faster Builds (faster CI/CD Pipelines)* by slicing an application into multiple smaller remote
applications

Preset
https://nx.dev/extending-nx/recipes/create-preset#what-is-a-preset

e.g:
npx create-nx-workspace --preset=qwik-nx

qwik-nx is a Nx community plugin. It is a generator that you can use to create a new Nx workspace with Qwik support.

create-nx-workspace API (Preset values e.g. "apps", "angular-monorepo")
https://nx.dev/nx-api/nx/documents/create-nx-workspace

preset
Type: string
Customizes the initial content of your workspace. Default presets include:
["apps", "empty", "core", "npm", "ts", "web-components", "angular-monorepo", "angular-standalone", "react-monorepo",
"react-standalone", "next", "nextjs-standalone", "react-native", "expo", "nest", "express", "react", "angular",
"node-standalone", "node-monorepo", "ts-standalone"].

****Module Federation****
Purpose: Speed up CI/CD Pipelines by slicing slicing an application into multiple smaller remote applications
Pros:
1) Speeds up CI/CD Pipelines since applications are smaller
    (Speeding Up Angular Builds Using Module Federation)
Cons:
1) Cognitive overhead of developing multiple applications versus a SPA
2) Coordinating build and deployment across many applications is a huge headache, especially in a multi-repo setup.
3) Version-Mismatch-Hell where different applications are deployed with different versions of shared libraries can lead to unexpected errors
4) Developers need to think about which remotes they are working on, since it is a waste of CPU and memory to run all remotes in development mode. In practice this may not be a problem if the teams are already divided by domain or feature
5) Increased orchestration since remotes are independent of each other, shared state may require the **host application** to coordinate it between remotes. For example, sharing Redux state across remotes is more complicated versus a SPA.

Module Federation Architecture:

With Module Federation, a large application is split into
1) A single Host application that references external...
2) Remote applications, which handle a single domain or feature.

E.g 1 Host application and 3 remotes(shop, cart, about). 3 teams. Each team works on 1 remote application.

Module Federation Example(https://github.com/nrwl/ng-module-federation)

nx serve host
the executor is going to build all the remotes first. If the remotes are available in the cache (local or remote), the executor is
going to restore them from the cache. All the remotes in the case are loaded and are available in the application, but they are
static and cannot be changed (This is great for running e2e tests in CI but not useful for local development.)

nx serve host --devRemotes=shop,cart
The executor is going to build (or fetch from cache) about but is going to start two dev servers, one for shop and another one
for cart. The about remote is static, while shop and cart will watch for file changes.

Idea: You will only run your remote in the dev mode, and other remotes will be retrieved from cache
    You will be able to run the serve command 10-20 times faster and also see the app reflect you file changes 10-20 times faster.

This gives you a good developer experience: the whole app is available, but only the part you are working on is served and watched.
The rest is "served" from cache, so is basically free (both CPU and RAM wise)
Need distributed caching set up

This repo utilizes Nx Cloud's distributed tasks execution

npm install --save-dev @nx/angular   <--- installing @nx/angular : which is angular plugin for nx


To Create workspace using specific version of nx
npx create-nx-workspace@14.2.0-rc.2 acme --preset=apps

Issue:
I'm following the tutorial on Module Federation at https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation
I have NX 16.8.1 installed. When i execute the command per instructions in the article "npx create-nx-workspace acme --preset=apps" it creates a workspace but does not create an apps folder like mentioned in the article.
If i change the command to use the same version of nx as the code in the github mentioned in the article i.e.  "nx": "14.2.0-rc.2", then it does create the apps folder.
Looks like using --preset=apps option is not working like before.



Faster Builds with Module Federation
https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation

npx nx [target] [project]

can add --watch flag  (run in interactive mode. change and reload?)

npx nx [target] -> set in project.json
npx nx serve [project] or npx nx project:serve
npx nx test  [project]   //jest testing
npx nx lint  [project]
npx nx e2e    e2e        //cypress e2e
npx nx build (will create production build by default- in dist folder)


//run build test lint in parallel for all projects
npx nx run-many --target build test lint
npx nx run-many -t build test lint

npx nx list @nx/angular

--dry-run flag (to check without executing)

to create standalone component:
npx nx g @nx/angular:component hello-world --standalone

can add tags to project.json to inform type and scope
"tags": ["type:ui", "scope:shared"]
specify rules in eslint
e.g. library can only depend on some other library


apps

lib
  orders
  Products
  shared>ui

//will only execute the tasks that got affected by the PR
npx nx affected:test

using module federation updates project.json
target>build to update from @angular-devkit to @nx/angular

cd dist/production
npx http-server . // (to serve the production bundle)

nx uses a lint rule blocks to use libs directly. you have to export via index.ts


Reference video: https://www.youtube.com/watch?v=JkcaGzhRjkc&t=8s (18 min)
"build:appName": "nx build appName"
cd dist\apps\appName
npx http-server .
  Available on:
   http://10.35.120.164:8080
   http://192.168.1.249:8080
   http://127.0.0.1:8080
   Hit CTRL-C to stop the server

navigate to localhost:8080 to run UI (modify index.html to have base href='/'

----------------------------------------------------------------

1) To run tests
npx nx test project-name --codeCoverage=true --silent

2) To run E2E
npx nx e2e project-name

3) To lint
npx nx lint (to lint all projects)
npx nx lint project-name
npx nx lint project-name  --format html --outputFile reports/project-name.html (to show output in html format)

npx nx test [--options=xx]
https://nx.dev/nx-api/jest/executors/jest

Execute a single spec file
npx nx test project-name --test-file path/specfile.spec.ts
Example: npx nx test clients --test-file apps/specfile.spec.ts

ng serve -o //(Opens the url in default browser.)
https://docs.angular.lat/cli/serve

npx create-nx-workspace acme --preset=apps
cd acme
npm install --save-dev @nx/angular
nx g @nx/angular:host host --directory=apps/host
nx g @nx/angular:remote shop --host=host --directory=apps/shop
nx g @nx/angular:remote cart --host=host --directory=apps/cart
nx g @nx/angular:remote about --host=host --directory=apps/about
nx serve host --open   (runs only host in development mode)
nx serve host --open --devRemotes="shop,cart"  (runs shop and cart in development mode as well apart from running host in dev mode)

execute with --dry-run option first

nx g @nx/angular:library about-main --directory=libs/about-main
nx g @nx/angular:library cart-main --directory=libs/cart-main
nx g @nx/angular:library shop-main --directory=libs/shop-main
nx g @nx/angular:library shared-components --directory=libs/shared-components

//will add prefix to component selectors. execute with --dry-run first (confirm folder hierarchy, scss. Tailwind should use application properties)
nx g @nx/angular:library --name=ao-shared --directory=libs/ao-shared --prefix=ao --projectNameAndRootFormat=as-provided
nx g @nx/angular:component ao-test-cmp --project=ao-shared-prefix
nx g @nx/angular:component ao-test-cmp --project=ao-shared-prefix  --dry-run

for nx 15 and below. execute with --dry-run first
npx nx g @nrwl/angular:library --name=ao-shared --directory=libs --prefix=ao
npx nx g @nrwl/angular:component ao-test-cmp --project=ao-shared

npx nx g @nrwl/angular:component ao-test-cmp --project=ao-shared --dry-run


nrwl angular generators 15.8.6: https://github.com/nrwl/nx/tree/15.8.6/packages/angular/src/generators
nrwl github: https://github.com/nrwl/nx/blob/15.8.6/packages/angular/src/generators/component/schema.json

have to use path and not directory e.g:
npx nx g @nrwl/angular:component --name=xxx --project=projectname --path=apps/directorypath --export   --dry-run


// nx g @nx/angular:lib shop-main --directory=libs/shop-main

nx g @nx/angular:pipe formatx --project=ui-formatters --export

Docs for
[collection]:[generator]
@nx/angular:app => https://nx.dev/nx-api/angular/generators/application
@nx/angular:lib => https://nx.dev/nx-api/angular/generators/library
@nx/angular:pipe => https://nx.dev/nx-api/angular/generators/pipe

nx g @nx/angular:service user --project=shared-data-access-user (projectname is project.json)

nx g @nx/angular:component about-main --project=about-main --export

npx nx g @nx/angular:app inventory --directory=apps/inventory (to create an angular app within apps folder)

npx nx g @nx/angular:app --help     //lists all the commands  <--------------------------------------------------------------------
npx nx g @nx/angular:lib --help     //lists all the commands  <--------------------------------------------------------------------
npx nx g @nx/angular:remote --help  //lists all the commands  <--------------------------------------------------------------------


nx run login:serve (run angular app login and serve it)

nx serve host --open --devRemotes="shop,cart"

nx graph
or
npx nx graph
https://nx.dev/core-features/explore-graph

nx affected:graph
nx affected:dep-graph

Nx test using Jest:
Code Coverage: https://nx.dev/nx-api/jest/executors/jest#codecoverage
Silent: https://nx.dev/nx-api/jest/executors/jest#silent

Check plugin help

Shared Assets(Images) between different projects- last one:
https://nxplaybook.com/courses/709074/lectures/12736150

When should I use micro frontend architecture?
We recommend MFE for teams that require applications to be ***deployed independently***

Changes to Shared Libraries Concern: <----------------------------------------------------
https://nx.dev/concepts/more-concepts/micro-frontend-architecture
It is also recommended to agree on a process to handle changes to core libraries (i.e. ones that
are shared between applications). Since the core changes affect all applications, it also blocks
all other releases, thus should not occur too frequently.

One such strategy is to share as little as possible between applications.

As such, if we follow a 80/20 approach: https://nx.dev/concepts/more-concepts/applications-and-libraries
place 80% of your logic into the libs/ folder
and 20% into apps/

Library Types: https://nx.dev/concepts/more-concepts/library-types
Feature libraries:

Developers should consider feature libraries as libraries that implement smart UI (with access to data sources) for specific business use cases or pages in an application.

UI libraries:
A UI library contains only presentational components (also called "dumb" components).

Data-access libraries:
A data-access library contains code for interacting with a back-end system. It also includes all the code related to state management.

Utility libraries:
A utility library contains low-level utilities used by many libraries and applications.

Example File Hierarchy

apps/
  booking/
  check-in/
libs/
  booking/                 <---- grouping folder
    feature-shell/         <---- library

  check-in/
    feature-shell/

  shared/                  <---- grouping folder
    data-access/           <---- library

    seatmap/               <---- grouping folder
      data-access/         <---- library
      feature-seatmap/     <---- library


apps/
   api/  (express node api)
   mysite/
   mysite-e2e/
libs/
   api-interface/src/lib/api-interface.ts  (structure of api response plus Api url constant)


Traditional Angular Folder Hierarchy


app/
 core (singleton) - Services (both specific and common), Navbar, Footer, ErrorHandler, Banner,
		    Interceptors, modal,

 shared
    shared components, shared pipes, shared directives
    models*

 enums
 models*
 auth

 pages (with feature folders underneath)
 Or
 feature specific folders



Global Vs Local NX Installation: https://nx.dev/concepts/more-concepts/global-nx
With a global Nx installation, Nx looks for the local copy of Nx in your repo and hands off the
process execution to it. This means that whichever version of Nx is installed locally in your
repo is still the version of Nx that runs your code.

npm list --global nx  (checking global nx version)

Migrating AngularJs to NX: https://nx.dev/recipes/angular/migration/angularjs

CI (Continous Integration) Setup: https://nx.dev/recipes/ci/ci-setup  <-----------------------

Environment Variables
1) https://nx.dev/recipes/tips-n-tricks/define-environment-variables
2) https://nx.dev/recipes/angular/use-environment-variables-in-angular

How to add Tailwind:
https://nx.dev/recipes/angular/using-tailwind-css-with-angular-projects


Vs Settnings: Use the files.associations setting to tell VS Code to always open .css files in Tailwind CSS mode.
Else @apply will show a warning
"files.associations": {
    "*.scss": "tailwindcss"
}

Build once, deploy everywhere:  <-----------------------
Single Build is pushed to multiple environments such as Staging & Production<-----------------------

******Advanced Angular Micro Frontends with Dynamic Module Federation******
https://nx.dev/recipes/angular/dynamic-module-federation-with-angular
“Build once, deploy everywhere” is the concept of being able to create a "single build artifact"
 of your application and deploy it to "multiple environments" such as staging and production.

 RemoteEntryModule: https://nx.dev/recipes/angular/dynamic-module-federation-with-angular
 The RemoteEntryModule generated will be imported in app.module.ts file, however, it is not used in
 the AppModule itself. This is to allow TS to find the Module during compilation, allowing it to be
  included in the built bundle. This is required for the Module Federation Plugin to expose the
  Module correctly. You can choose to import the RemoteEntryModule in the AppModule if you wish,
   however, it is not necessary.


Dashboard (Host)


npx create-nx-workspace acme (will ask for Application name)

npx create-nx-workspace acme --preset=apps (preset apps is deprecated)
Did not create apps folder

npx create-nx-workspace acme --preset=angular-monorepo (will ask for Application name)

npx create-nx-workspace acme --preset=angular (will ask for Application name)


However, by taking advantage of Nx's project graph, Nx will automatically find and share the dependencies of your applications.
Execute 'nx graph' to see dependencies. if have common dependencies and that common dependency has a service then
the service will be shared
https://nx.dev/recipes/angular/dynamic-module-federation-with-angular


If the host is configured dynamically, then adding a new remote with that host will add the necessary changes
for dynamic federation
https://nx.dev/recipes/angular/dynamic-module-federation-with-angular#generate-the-employee-host-application


Difference between micro-frontend and micro-services
micro-frontend: Breaks front-end UI application into smaller UI applications
micro-services: Breaks Api into smaller Apis
https://www.bacancytechnology.com/blog/angular-micro-frontends-architecture

Angular standalone: 1 project only. Opposite of mono-repo (1 repo and multiple apps)
https://nx.dev/getting-started/tutorials/angular-standalone-tutorial

Reference Websites:
https://www.bacancytechnology.com/blog/angular-micro-frontends-architecture
https://levelup.gitconnected.com/your-first-angular-microfrontend-58950768a465 (when to use Micro front end)

Videos:
High-Level Overview
https://www.youtube.com/watch?v=ZAO0yXupIIE&t=175s (25 min - good for basic command ref but for standalone repo)

Production Build NPX - at 20 min
https://www.youtube.com/watch?v=JkcaGzhRjkc&t=8s   (27 min - good- prod build at 19 min + https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation#production-build-and-deployment-with-nx-cloud )

https://www.youtube.com/watch?v=gEv4WSDM2Z4
https://www.youtube.com/watch?v=cXOkmOy-8dk&t=256s
https://www.youtube.com/watch?v=tsIZjUAtF1U
https://www.youtube.com/watch?v=bwPkz4MrPDI (43 min)

Soso:
https://www.youtube.com/watch?v=cXOkmOy-8dk&list=PLakNactNC1dH2ff_srFKtabxA-1a3Pv4f
https://www.youtube.com/watch?v=dJG9zH30c-o
https://developer.okta.com/blog/2022/05/17/angular-microfrontend-auth
https://blog.briebug.com/blog/micro-frontends-angular
https://serengetitech.com/tech/micro-frontend-architecture-in-angular-applications-module-federation/

*********Nx sample projects*********
1) https://nxplaybook.com/p/nx-workspaces  (Good!!. Check how generate file structure e.g data access. eg service file)
   (overall walkthrough)

2) https://nx.dev/getting-started/tutorials/angular-monorepo-tutorial
	  https://github.com/nrwl/nx-recipes/tree/main/angular-monorepo
      (Displaying shared components from libs folder)

3) https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation
 	  https://github.com/nrwl/ng-module-federation (to speed up the builds of Angular apps. Has CI-Continuous Integration workflow in ci.yml)
      reference video: https://www.youtube.com/watch?v=JkcaGzhRjkc&t=8s  (production deployment example at 20 min)

4) https://nx.dev/recipes/angular/dynamic-module-federation-with-angular
      https://github.com/Coly010/nx-ng-dyn-fed


5) See folder hierarchy
https://github.com/trungk18/angular-spotify (Angular 15, Nx Workspace, ngrx, TailwindCSS and ng-zorro)
Video: https://www.youtube.com/watch?v=uPB0KHKlrU8


SoSo (Nx, NGRX though. No data access layer. Uses mock data)
https://github.com/nrwl/nx-examples  (Official-Nx Micro-Frontend Example: https://nx.dev/showcase/example-repos/mfe)


Misc Reference Projects (CI setup, Mono Repo, Storybook etc)
https://github.com/nrwl/nx-workshop   (TODOOOOOOOOOOOOOOOO)
https://github.com/nrwl/nx-recipes

https://nxplaybook.com/p/nx-workspaces  (Check how generate file structure e.g data access. eg service file)

Module Federation
1)Slices 1 App to multiple Apps.

Dynamic Module Federation


*********Micro Frontend Architecture with Module Federation Summary****

As applications grow, builds can become unacceptably slow, which leads to slow CI/CD pipelines
"Module Federation" provides a solution by allowing a Single Page Application (SPA) to be sliced
into multiple smaller remote applications that are built independently.

Purpose: Speed up CI/CD Pipelines by slicing slicing an application into multiple smaller remote applications

Micro Frontend Architecture/Module Federation provides *faster Builds (faster CI/CD Pipelines)* by slicing an application into multiple smaller remote
applications

The ***Micro Frontend (MFE)*** architecture builds on top of ***Module Federation** by providing independent deployability.

Module Federation Setup
Break 1 Host application and multiple Remotes so that can have their own CI/CD


****DevMode****
 Host     http://localhost:4200   (Can have its own CI/CD)
   About  http://localhost:4201   (Can have its own CI/CD)
   Shop   http://localhost:4202   (Can have its own CI/CD)

Host module-federation.config.js pulls it together

module.exports = {
  name: 'host',
  remotes: ['cart', 'shop', 'about'],
};

Production build and deployment

in host/webpack.config.prod.js, specify the urls where the remote bundles are:
https://nx.dev/concepts/more-concepts/faster-builds-with-module-federation#production-build-and-deployment-with-nx-cloud


*********Micro Frontend Architecture with Dynamic Module Federation Summary - Build Once Deploy Many****

Very little incremental changes from Static version above

Build Once Deploy Many: Build 1 time and use the same build for all environments. Each environment will just use  a different
config to know the updated api urls.

Micro Frontend Architecture with Static Module Federation:  At Build time, specify the location of remotes. Since its part of the build, have to build it for seperate
environments (staging, production)

Micro Frontend Architecture with Dynamic Module Federation Summary: At run time, find location of remotes. Since its runtime,
each environment can just use a different config that informs the location of the remote. Hence, you can build once and deploy the same build to
many environments
src/assets/   => module-federation.manifest.json file


Micro-Front End Architecture: https://nx.dev/concepts/more-concepts/micro-frontend-architecture
1) Speeds up Ci/CD of individual Apps by breaking 1 App into multiple Apps
2) Minimize amount of shared libraries <------------------------ Less Code Reuse
      because changes in shared features will need for other Apps to be built and deployed again
3) If shared library is used then teams should deploy their applications whenever changes to a shared library affects them

Sound like: Only if different pages are independent of each other

LibraryTypes
https://nx.dev/concepts/more-concepts/library-types


Feature Libraries (UI Logic - interact with data sources. lazy-loaded)
UI Libraries      (No Services injected. All data come from inputs)
Data-access Libraries

apps/
   dashboard or shell/
   cart/
   shop/

lib/
   dashboard Or shell
       data-access
       feature (components)
	   	  routes - see spotify app
	   ui      (components)
	   	  layout - see spotify app
       pipes
       directives
	   util
	   models
	   enums
   cart
       data-access
       feature (components)
	   ui      (components)
       pipes
       directives
	   utils
   shop
       data-access
       feature (components)
	   ui      (components)
       pipes
       directives
	   utils
	auth
	interceptors
	shared (try to have minimal shared. CI/CD seperate teams. Some team can break others. https://nx.dev/concepts/more-concepts/micro-frontend-architecture)
	   assets  (images. outlier. need common one for all projects. images. https://nxplaybook.com/courses/709074/lectures/12736150)
       services
       components
       pipes
       directives
	   utils

*************************************NX Main Features Summary***************************
Diff bw MonoRepo and Micro FrontEnd: https://infinum.com/blog/micro-frontends-nx-angular/

1- Mono-Repo
	1 Repo for all the code. Can have seperate CI/CD for each Angular app

***Folder/File Hierarchy starts getting too long but gives us seperate CI/CD Pipelines***
2- Micro FrontEnd & MonoRepo   (Micro Frontend Architecture with Static Module Federation)
	Slice 1 Angular App into multiple Angular Apps with each one having its own Ci/CD pipeline

3- Micro FrontEnd & MonoRepo & Build Once Deploy Many (Micro Frontend Architecture with Dynamic Module Federation)
    Same as #2. With additional advantage that you only build once and can deploy the same builds to
	multiple environments (staging, production) with help from configuration file (diff apis for diff environments.
	Configuration file swapped during CI/CD process)
****************************************************************************************


Convert to a Nx Monorepo (Integrated) using a specific nx version
npx nx@15.x.x init --integrated

Create Web Components
https://lit.dev/


When using Nx, you can either
1) let Nx decorate the Angular CLI to improve the developer experience **OR**
2) use the Nx CLI instead.
All the points below will apply in the same way.
https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d

The decorate-angular-cli.js file is used to point the Angular CLI to the Nx CLI. This allows you to use Nx commands instead of ng commands, such as nx build instead of ng build.
To use the decorate-angular-cli.js file, you first need to install it. You can do this by running the following command:

npm install -g decorate-angular-cli.js

Once you have installed the decorate-angular-cli.js file, you can use it by running the following command:

node ./decorate-angular-cli.js

This will decorate the Angular CLI and point it to the Nx CLI. You can then use Nx commands instead of ng commands.
For example, to build your application, you would run the following command:

nx build

Instead of running the following command:

ng build

The decorate-angular-cli.js file is a useful tool for anyone who wants to use Nx to manage their Angular applications. It makes it easy to use Nx commands without having to change your existing Angular code.



*************************************Tailwind CSS***************************

Official Plugins: https://tailwindcss.com/docs/plugins#official-plugins
Tailwind's Forms plugin: https://tailwindcss.com/docs/plugins#forms

Tailwind Form css: https://github.com/tailwindlabs/tailwindcss-forms

<div class="mt-8 max-w-md">
  <div class="grid grid-cols-2 gap-6">
    <div class="block"> (display block)
      <span class="text-gray-700">Full name</span>
      <input type="text" class="mt-1 block w-full" placeholder="" />
    </div>
    <div class="block">
      <span class="text-gray-700">Email address</span>
      <input type="email" class="mt-1 block w-full" placeholder="john@example.com" />
    </div>
  </div>
</div>


1 column in mobile. 2 in md and above
        <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
            <label class="block">
              <span class="text-gray-700">Input (text)</span>
              <input
                type="text"
                class="form-input mt-1 block w-full"
                placeholder="john@example.com"
              />
            </label>
            <label class="block">
              <span class="text-gray-700">Input (email)</span>
              <input
                type="email"
                class="form-input mt-1 block w-full"
                placeholder="john@example.com"
              />
            </label>

          </div>
*********Need to know all Tailwind utility classes: https://tailwindcss.com/docs/utility-first*********
Tailwind. Style elements using pre-existing utility classes in html without writing CSS

Using Tailwind with Angular and NX:
https://nx.dev/recipes/angular/using-tailwind-css-with-angular-projects#using-tailwind-css-with-angular-projects

Tailwind Default Theme (color palette, type scale, fonts, breakpoints, border radius values, and more) <======================================
https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js
https://tailwindcss.com/docs/theme

Tailwind Playground: https://play.tailwindcss.com/

Tailwind Color Generator:
https://uicolors.app/create

https://bloggie.io/@kinopyo/organize-your-css-in-the-tailwind-style-with-layer-directive
@tailwind base includes the reset/normalized default styles and --tw-xxx CSS variables. Open https://play.tailwindcss.com/YpShH9YUHX?file=css and
check out the full list at "Generated CSS" → "Base" tab.

Customizing  3rd party libraries CSS:
https://tailwindcss.com/docs/content-configuration#working-with-third-party-libraries

1REM=16px
https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale

Tailwind. Style elements using pre-existing utility classes in html without writing CSS
*********Need to know all Tailwind utility classes: https://tailwindcss.com/docs/utility-first*********
Tailwind. Style elements using pre-existing utility classes in html without writing CSS

Automatic Class Sorting using Prettier:
https://tailwindcss.com/blog/automatic-class-sorting-with-prettier

Utility classes reference:
https://tailwindcss.com/docs/utility-first

Pseudo-class Reference:
https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference

Modifiers Reference:
https://tailwindcss.com/docs/hover-focus-and-other-states#quick-reference

This approach allows us to implement a completely custom component design without writing a single line of custom CSS.

Install Tailwind CSS with Angular: https://tailwindcss.com/docs/guides/angular

SCSS is just a different syntax for using SASS.

SCSS is a pre-processor
https://techaffinity.com/blog/what-is-sass-css-preprocessor/#:~:text=Sass%20(Syntactically%20Awesome%20Style%20Sheets,don't%20exist%20in%20CSS.

Tailwind is a PostCSS plugin.

Preprocessor Vs PostCSS:
https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3


https://tailwindcss.com/docs/using-with-preprocessors#using-sass-less-or-stylus
For the best development experience, we highly recommended that you use PostCSS exclusively, and that you don’t use preprocessors like Sass or Less in your
Tailwind projects.

To use Tailwind with a preprocessing tool like Sass, Less, or Stylus, you’ll need to add an additional build step to your project that lets you run your
preprocessed CSS through PostCSS. If you’re using Autoprefixer in your project, you already have something like this set up.

To use Tailwind(postcss) with SCSS(preprocessor), follow: Ref: https://tailwindcss.com/docs/using-with-preprocessors#using-sass-less-or-stylus (half page down)
https://tailwindcss.com/docs/guides/angular OR
https://tailwindcss.com/docs/installation/using-postcss

Important: https://tailwindcss.com/docs/using-with-preprocessors#using-sass-less-or-stylus
The most important thing to understand about using Tailwind with a preprocessor
is that preprocessors like Sass(SCSS), Less, and Stylus run separately, before Tailwind.  <==================================
This means that you can’t feed output from Tailwind’s theme() function into a Sass color function for example, because the theme() function isn’t actually
evaluated until your Sass has been compiled to CSS and fed into PostCSS.

Won’t work, Sass is processed first. Darken is SASS function.
.alert {
  background-color: darken(theme('colors.red.500'), 10%);
}


Github: https://github.com/tailwindlabs/tailwindcss

NX - How to add Tailwind to an Angular project:
https://nx.dev/recipes/angular/using-tailwind-css-with-angular-projects

Tailwind recommends to use @apply operator sparingly else Tailwinds benefits are not realized:

If you’re going to use @apply, use it for very small, highly reusable things like buttons and form controls — and
even then only if you’re not using a framework like React where a component would be a better choice.

https://tailwindcss.com/docs/reusing-styles#avoiding-premature-abstraction

Use Tailwind's @apply directive to extract repeated utility patterns into custom CSS classes just by copying
and pasting the list of class names.

.btn {
  @apply text-base font-medium rounded-lg p-3;
}

To re-use classes, try using @apply operator
https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply

Tailwind- Loading - pulse animation
https://tailwindcss.com/docs/animation

It has  first-class CSS grid support
https://tailwindcss.com/

Tailwind UI:
Tailwind UI is a collection of beautiful, fully responsive UI components, designed and developed by us, the
creators of Tailwind CSS. It's got hundreds of ready-to-use examples to choose from, and is guaranteed to help
you find the perfect starting point for what you want to build.

CSS at-rule: https://css-tricks.com/the-at-rules-of-css/

Example: @import rule
@import 'global.css';
The at-rule is a statement that provides CSS with instructions to perform or how to behave.

This rule is inserted at the very top of the file and instructs the stylesheet to request and include an external CSS file as if the contents
of that file were right where that line is.

Example:
Can include @import 'global.css'; on top of styles.scss and it'll include global.css contents where the import line is

Tailwind CSS uses a lot of custom CSS at-rules like @tailwind, @apply, and @screen
e.g:
@tailwind base;
@tailwind components;
@tailwind utilities;


Responsive strategy for different devices.


Unknown at rule error for @tailwind base;
https://byby.dev/at-rule-tailwind#:~:text=The%20unknown%20at%20rule%20%40tailwind%20warning%20is%20a%20common%20issue,styles%20into%20your%20CSS%20file.
{
  "scss.lint.unknownAtRules": "ignore"
}

PostCSS VS SASS
PostCSS is a tool for transforming CSS with JS plugins. These plugins can support variables and mixins, transpile future CSS syntax, inline images,
and more; Sass: Syntactically Awesome Style Sheets. Sass is an extension of CSS3, adding nested rules, variables, mixins, selector inheritance, and more.

When using Tailwind with Sass, using !important with @apply requires you to use interpolation to compile properly: https://tailwindcss.com/docs/using-with-preprocessors#sass

.alert {
  @apply bg-red-500 #{!important};
}

Vendor Prefixes: https://tailwindcss.com/docs/browser-support#vendor-prefixes
Autoprefixer, which is a PostCSS plugin that automatically adds any necessary vendor prefixes based on the browsers you tell it you need to support.


Maintainability concerns: https://tailwindcss.com/docs/utility-first#maintainability-concerns
The biggest maintainability concern when using a utility-first approach is managing commonly repeated utility combinations.
This is easily solved by extracting components and partials, and using editor and language features like multi-cursor editing and simple loops.

Below, 'hover' is a modifier
<button class="bg-sky-500 hover:bg-sky-700 ...">

Every utility class in Tailwind can be applied conditionally by adding a modifier to the beginning of the class name that
describes the condition you want to target

Tailwind includes modifiers for just about everything you’ll ever need, including:

Pseudo-classes, like :hover, :focus, :first-child, and :required
Pseudo-elements, like ::before, ::after, ::placeholder, and ::selection
Media and feature queries, like responsive breakpoints, dark mode, and prefers-reduced-motion
Attribute selectors, like [dir="rtl"] and [open]

When stacking modifiers, they are applied from the inside-out, like nested function calls:
https://tailwindcss.com/docs/hover-focus-and-other-states#ordering-stacked-modifiers

for example changing the background color in dark mode, at the medium breakpoint, on hover:
<button class="dark:md:hover:bg-fuchsia-600 ...">
  Save changes
</button>

//focus applied seperately (3 times) for each state
<button class="bg-violet-500 hover:bg-violet-600 active:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-300 ...">
  Save changes
</button>

Style an element when it is the first-child or last-child using the first and last modifiers:
<li class="flex py-4 first:pt-0 last:pb-0">



// These modifiers:
'dark:group-hover:focus:opacity-100'

// ...are applied like this:
dark(groupHover(focus('opacity-100')))


Form states validity

Style form elements in different states using modifiers like required, invalid, and disabled:
https://tailwindcss.com/docs/hover-focus-and-other-states#form-states


Tailwind Breakpoints: https://tailwindcss.com/docs/responsive-design

Breakpoint	Minimum width	CSS
sm			640px			@media (min-width: 640px) { ... }
md			768px			@media (min-width: 768px) { ... }
lg			1024px			@media (min-width: 1024px) { ... }
xl			1280px			@media (min-width: 1280px) { ... }
2xl			1536px			@media (min-width: 1536px) { ... }

------Bootstrap 4 min css--------

mobile css... (<576px) Default - Portrait phone (top section) - xs

@media (min-width: 576px) - Landscape phones  - sm
css...

@media (min-width: 768px) - Tablets  -md
css...

@media (min-width: 992px) - Desktops -lg
css...

@media (min-width: 1200px) - Large Desktops -xl
css...


xs - extra small phone
sm - phone   (576px)
md - tablet  (768 px)
lg - desktop (992 px)
xl - wide desktop (1200px)
----------------------------------

Targeting a breakpoint range
If you’d like to apply a utility only when a specific breakpoint range is active, stack a responsive modifier like md with a max-* modifier to
limit that style to a specific range:
<div class="md:max-xl:flex">
  <!-- ... -->
</div>

What this means is that unprefixed utilities (like uppercase) take effect on all screen sizes, while prefixed utilities (like md:uppercase)
only take effect at the specified breakpoint and above.

 unprefixed version (text-center) is applied to mobile as Tailwind is mobile first. sm prefix applies it to sm and above
<!-- This will center text on mobile, and left align it on screens 640px and wider -->
<div class="text-center sm:text-left"></div>


Customizing your theme: https://tailwindcss.com/docs/adding-custom-styles

*****Using arbitrary values using sqaure brackets*****
If you need to specify: top: 117px, use below. Reference: https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values

<div class="top-[117px]">
  <!-- ... -->
</div>

This works for everything in the framework, including things like background colors, font sizes, pseudo-element content, and more
<div class="bg-[#bada55] text-[22px] before:content-['Festivus']">
  <!-- ... -->
</div>

for CSS variable
<div class="bg-[--my-color]">
  <!-- ... -->
</div>

CSS Variables in Html
[height]="'var(--some-height)'"

<!-- Will generate a font-size utility -->
<div class="text-[22px]">...</div>

<!-- Will generate a color utility -->
<div class="text-[#bada55]">...</div>

In these situations, you can “hint” the underlying type to Tailwind by adding a CSS data type before the value:
<!-- Will generate a font-size utility -->
<div class="text-[length:var(--my-var)]">...</div>

<!-- Will generate a color utility -->
<div class="text-[color:var(--my-var)]">...</div>

For more power, you can also use the @layer directive to add styles to Tailwind’s ****base, components, and utilities layers*****:
main.css

@tailwind base;        <==== these are layers
@tailwind components;  <==== these are layers
@tailwind utilities;   <==== these are layers

@layer components {
  .my-custom-style {
    /* ... */
  }
}

In CSS, the order of the ****rules in your stylesheet**** decides which declaration wins when two selectors have the same specificity:
If it targets the same property
.btn {
  background: blue;
  /* ... */
}

.bg-black {
  background: black;
}

If the property is different, then 2nd class will apply. card is in components and rounded-none is in utilities so utilities override
<!-- Will look like a card, but with square corners -->
<div class="card rounded-none">
  <!-- ... -->
</div>

Here, button will be black since .bg-black comes after .btn in the CSS:
<button class="bg-black btn">...</button>


https://darkghosthunter.medium.com/tailwind-the-base-the-components-and-the-utilities-a81137c52534

@tailwind base;
@tailwind components;
@tailwind utilities;

1) The base layer is for things like reset rules or default styles applied to plain HTML elements. (see below)
2) The components layer is for class-based styles that you want to be able to override with utilities.
3) The utilities layer is for small, single-purpose classes that should always take precedence over any other styles.

1)
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h1 {
    @apply text-2xl;
  }
  h2 {
    @apply text-xl;
  }
  /* ... */
}

2) Use the components layer for any more complicated classes you want to add to your project that you’d still like to be able to override with utility classes.

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .card {
    background-color: theme('colors.white');
    border-radius: theme('borderRadius.lg');
    padding: theme('spacing.6');
    box-shadow: theme('boxShadow.xl');
  }
  /* ... */
}

The components layer is also a good place to put custom styles for any third-party components you’re using:

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .select2-dropdown {
    @apply rounded-b-lg shadow-md;
  }
  .select2-search {
    @apply border border-gray-300 rounded;
  }
  .select2-results__group {
    @apply text-lg font-bold text-gray-900;
  }
  /* ... */
}

// https://tailwindcss.com/docs/functions-and-directives

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h1 {
    @apply text-2xl;
  }
  h2 {
    @apply text-xl;
  }
}

@layer components {
  .btn-blue {
    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;
  }
}

@layer utilities {
  .filter-none {
    filter: none;
  }
  .filter-grayscale {
    filter: grayscale(100%);
  }
}

Removing unused custom CSS: https://tailwindcss.com/docs/adding-custom-styles#removing-unused-custom-css
Any custom styles you add to the base, components, or utilities layers will only be included in your compiled CSS if those styles are actually used in your HTML.

Always retain custom CSS
If you want to add some custom CSS that should always be included, add it to your stylesheet without using the @layer directive:

@tailwind base;
@tailwind components;

/* This will always be included in your compiled CSS */
.card {
  /* ... */
}

@tailwind utilities;

Make sure to put your custom styles where they need to go to get the precedence behavior you want. In the example above, we’ve added the .card class
before @tailwind utilities to make sure utilities can still override it.

Functions & Directives
A reference for the custom functions and directives Tailwind exposes to your CSS.

@tailwind base; <=== @tailwind is a directive. Ref: https://tailwindcss.com/docs/functions-and-directives
Directives are custom Tailwind-specific at-rules you can use in your CSS that offer special functionality for Tailwind CSS projects.

https://tailwindcss.com/docs/functions-and-directives#apply
Any rules inlined with @apply will have !important removed by default to avoid specificity issues.

.select2-results__group {
  @apply text-lg font-bold text-gray-900;
}

/* Input */
.foo {
  color: blue !important;
}

.bar {
  @apply foo;
}

/* Output */
.foo {
  color: blue !important;
}

.bar {
  color: blue;
}

If you’d like to @apply an existing class and make it !important, simply add !important to the end of the declaration
Note that if you’re using Sass/SCSS, you’ll need to use Sass’ interpolation feature to get this to work:
.btn {
  @apply font-bold py-2 px-4 rounded #{!important};
}

using CSS variables:
https://cssf1.com/snippet/how-to-use-css-variables-in-tailwindcss
https://tailwindcss.com/docs/using-with-preprocessors#variables
https://tailwindcss.com/docs/customizing-colors#using-css-variables
https://stackoverflow.com/questions/64872861/how-to-use-css-variables-with-tailwind-css  (2 individual replies: 1153 & 23.4k)


Presets: https://tailwindcss.com/docs/configuration#presets
The presets section allows you to specify your own custom base configuration instead of using Tailwind’s default base configuration.

Adding !important: https://tailwindcss.com/docs/configuration#important-modifier
Alternatively, you can make any utility important by adding a ! character to the beginning:
<p class="font-bold !font-medium">
  This will be medium even though bold comes later in the CSS.
</p>
This can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control.

Don’t construct class names dynamically: https://tailwindcss.com/docs/content-configuration#dynamic-class-names
<div class="text-{{ error ? 'red' : 'green' }}-600"></div>          <-- Do not
<div class="{{ error ? 'text-red-600' : 'text-green-600' }}"></div> <-- Do

To override default Tailwind color pallete use:
theme: {
    colors: {
      'blue': '#1fb6ff'
    },

To add custom colors
theme: {
	extend: {
      colors: {


theme> spacing
By default, these values are inherited by the padding, margin, width, height, maxHeight, flex-basis, gap, inset,
space, translate, scrollMargin, scrollPadding, and textIndent core plugins.

theme > colors
https://tailwindcss.com/docs/theme#colors
By default, these colors are inherited by all color-related core plugins, like
backgroundColor, borderColor, textColor, and others


DEFault equates to rounded with no suffix. This is a common convention in Tailwind and is supported by all core plugins.
https://tailwindcss.com/docs/theme#core-plugins

module.exports = {
  theme: {
    borderRadius: {
      'none': '0',
      'sm': '.125rem',
      DEFAULT: '.25rem',                <----------------
      'lg': '.5rem',
      'full': '9999px',
    },
  }
}

.rounded-none { border-radius: 0 }
.rounded-sm   { border-radius: .125rem }
.rounded      { border-radius: .25rem }   <----------------
.rounded-lg   { border-radius: .5rem }
.rounded-full { border-radius: 9999px }

Arbitrary values
https://tailwindcss.com/docs/customizing-colors#arbitrary-values
If you need a one-off custom color in your project, consider using Tailwind’s arbitrary value notation to generate a class for that color on-demand
instead of adding it to your theme:

<button class="bg-[#1da1f2] text-white ...">
  Share on Twitter
</button>

Plugins
https://tailwindcss.com/docs/plugins
Plugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS.

Presets
https://tailwindcss.com/docs/presets
The presets option lets you specify a different configuration to use as your base, making it easy to package up a set of customizations that
you’d like to reuse across projects.

Presets are just regular Tailwind configuration objects, taking the exact same shape as the configuration you would add in your tailwind.config.js file.

in a micro-front end angular project. each angular app's tailwind.config.js can have as a preset base (at root level) tailwind.config.js ,
so it can have all the configurations there. Individual project configuration(tailwind.config.js) can inherit from Base Or Solution level configuraton (tailwind.config.js)

<div class="box-border h-32 w-32 p-4 border-4 ...">
  <!-- ... -->
</div>

h-32 = 128px  https://tailwindcss.com/docs/height
w-32 = 128px  https://tailwindcss.com/docs/width
p-4 =   16px  https://tailwindcss.com/docs/padding
border-4 = 4px https://tailwindcss.com/docs/border-width


grid	display: grid; <== CSS Grid. https://tailwindcss.com/docs/display
flex	display: flex; <= flexbox

class="grid"
class="flex"

Using negative values  							<--------------------------------------------------------------------------
https://tailwindcss.com/docs/top-right-bottom-left#using-negative-values

<div class="relative h-32 w-32 ...">
  <div class="absolute h-14 w-14 -left-4 -top-4 ..."></div>
</div>

Some apply to both flex and grid items whereas soe apply to only flex. check docs

Flex: https://tailwindcss.com/docs/justify-content
Justify Content: Justify Content along main axis (e.g x axis)
Justify Items:   Justify Items along main axis  (e.g x axis)
Justify Self:    Justify Self Item along main axis  (e.g x axis)

Align Content: Justify Content along cross axis (e.g y axis)
Align Items:   Justify Items along cross axis  (e.g y axis)
Align Self:    Justify Self Item along cross axis  (e.g y axis)

**To Justify and Align at the same time**
Place Content:
Place Items:
Place Self:

border-indigo-600
text-indigo-600
bg-indigo-600


Breakpoint prefix	Minimum width	CSS
no prefix=> default mobile up t0 640px
sm	640px	@media (min-width: 640px) { ... }
md	768px	@media (min-width: 768px) { ... }
lg	1024px	@media (min-width: 1024px) { ... }
xl	1280px	@media (min-width: 1280px) { ... }
2xl	1536px	@media (min-width: 1536px) { ... }

---------------------------------snippets---------------------------------------
https://tailwindcss.com/docs/hover-focus-and-other-states
<ul role="list" class="p-6 divide-y divide-slate-200">
  {#each people as person}
    <!-- Remove top/bottom padding when first/last child -->
    <li class="flex py-4 first:pt-0 last:pb-0">
      <img class="h-10 w-10 rounded-full" src="{person.imageUrl}" alt="" />
      <div class="ml-3 overflow-hidden">
        <p class="text-sm font-medium text-slate-900">{person.name}</p>
        <p class="text-sm text-slate-500 truncate">{person.email}</p>
      </div>
    </li>
  {/each}
</ul>


<blockquote class="text-2xl font-semibold italic text-center text-slate-900">
  When you look
  <span class="relative">
    <span class="block absolute -inset-1 -skew-y-3 bg-pink-500" aria-hidden="true"></span>
    <span class="relative text-white">annoyed</span>
  </span>
  all the time, people think that you're busy.
</blockquote>

<label class="relative block">
  <span class="sr-only">Search</span>
  <span class="absolute inset-y-0 left-0 flex items-center pl-2">
    <svg class="h-5 w-5 fill-slate-300" viewBox="0 0 20 20"><!-- ... --></svg>
  </span>
  <input class="placeholder:italic placeholder:text-slate-400 block bg-white w-full border border-slate-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1 sm:text-sm" placeholder="Search for anything..." type="text" name="search"/>
</label>

white text color on blue background
<button class="bg-[#1da1f2] text-white ...">
  <svg><!-- ... --></svg>
  Share on Twitter
</button>

https://tailwindcss.com/docs/responsive-design
<!-- Width of 16 by default, 32 on medium screens, and 48 on large screens -->
<img class="w-16 md:w-32 lg:w-48" src="...">

https://tailwindcss.com/docs/adding-custom-styles
<div class="bg-[#bada55] text-[22px] before:content-['Festivus']">
  <!-- ... -->
</div>

<div class="bg-[--my-color]">
  <!-- ... -->
</div>

https://tailwindcss.com/docs/functions-and-directives#apply
.btn {
  @apply font-bold py-2 px-4 rounded #{!important};
}

https://tailwindcss.com/docs/configuration#important-modifier
<p class="font-bold !font-medium">
  This will be medium even though bold comes later in the CSS.
</p>

https://tailwindcss.com/docs/functions-and-directives#screen
@media screen(sm) {
  /* ... */
} will emit

@media (min-width: 640px) {
  /* ... */
}

<div class="{{ error ? 'text-red-600' : 'text-green-600' }}"></div>

Difference between outline and border (css)
An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out".
https://www.w3schools.com/css/css_outline.asp#:~:text=Note%3A%20Outline%20differs%20from%20borders,the%20width%20of%20the%20outline.


https://play.tailwindcss.com/

<!-- Using Tailwind Grid -->
<div class="grid md:grid-cols-3 gap-6 p-6">
  <div style="background-color:blue">1</div>
  <div style="background-color:blue">2</div>
  <div style="background-color:blue">3</div>
  <div style="background-color:blue">4</div>
  <div style="background-color:blue">5</div>
  <div style="background-color:blue">6</div>
  <div style="background-color:blue">7</div>
  <div style="background-color:blue">8</div>
</div>

<!-- Using Flex -->
<div class="clear-right flex flex-row gap-6 p-6">
  <div style="background-color:blue" class="basis-1/3">1</div>
  <div style="background-color:blue" class="basis-1/3">2</div>
  <div style="background-color:blue" class="basis-1/3">3</div>
</div>

<div class="clear-right flex flex-row gap-6 p-6">
  <div style="background-color:blue" class="w-full md:w-1/3">1</div>
  <div style="background-color:blue" class="w-full md:w-1/3">2</div>
  <div style="background-color:blue" class="w-full md:w-1/3">3</div>
</div>


<div class="grid grid-cols-1 gap-6 p-6 float-right">
  <span style="background-color:blue" class="w-10">1</span>
</div>

*************************************Tailwind CSS End***************************

DevExtreme Templates:
Angular DevExtreme
https://js.devexpress.com/Angular/Documentation/21_1/Guide/Angular_Components/DevExtreme_Angular_Components/

Angular Demos: https://js.devexpress.com/Angular/Demos/WidgetsGallery/
Angular Documentation: https://js.devexpress.com/Angular/Documentation/Guide/Angular_Components/DevExtreme_Angular_Components/

https://js.devexpress.com/Angular/Documentation/21_1/Guide/UI_Components/Common/Templates/
https://js.devexpress.com/Angular/Documentation/21_1/ApiReference/UI_Components/Markup_Components/dxTemplate/


Responsive Browser Testing:
https://screenfly.org/#u=https%3A//dev.lpl.com%3A8000/samaum/&w=1920&h=1200&a=1
https://responsivetesttool.com/?url=http://cmboappqa1.sdqa.lpl.com/AdvisoryOpsTool/samAUM_Dashboard


